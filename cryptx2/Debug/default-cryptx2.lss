
default-cryptx2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c92c  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000ea00  8000ea00  0000ee00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007c8  8000ec00  8000ec00  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         0000023c  00000008  8000f3c8  0000f808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000244  8000f604  0000fa44  2**0
                  ALLOC
  8 .bss          00000bc0  00000248  00000248  00000000  2**2
                  ALLOC
  9 .heap         0000e1f8  00000e08  00000e08  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000fa44  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000012e0  00000000  00000000  0000fa78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 0000293b  00000000  00000000  00010d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00025745  00000000  00000000  00013693  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000342c  00000000  00000000  00038dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007460  00000000  00000000  0003c204  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003a00  00000000  00000000  00043664  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00009ef7  00000000  00000000  00047064  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00005b2b  00000000  00000000  00050f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .flash_nvram  000000a0  8003fe00  8000f604  0000fe00  2**2
                  ALLOC
 21 .debug_ranges 000012b0  00000000  00000000  00056a88  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	b8 6c       	st.h	r12[0xc],r12

Disassembly of section .text:

80002008 <hmac_sha256_init>:

/* HMAC-SHA-256 functions */

void hmac_sha256_init(hmac_sha256_ctx *ctx, const unsigned char *key,
                      unsigned int key_size)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 fd       	sub	sp,60
80002010:	ef 4c ff cc 	st.w	r7[-52],r12
80002014:	ef 4b ff c8 	st.w	r7[-56],r11
80002018:	ef 4a ff c4 	st.w	r7[-60],r10

    const unsigned char *key_used;
    unsigned char key_temp[SHA256_DIGEST_SIZE];
    int i;

    if (key_size == SHA256_BLOCK_SIZE) {
8000201c:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002020:	e0 48 00 40 	cp.w	r8,64
80002024:	c0 91       	brne	80002036 <hmac_sha256_init+0x2e>
        key_used = key;
80002026:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000202a:	ef 48 ff f8 	st.w	r7[-8],r8
        num = SHA256_BLOCK_SIZE;
8000202e:	34 08       	mov	r8,64
80002030:	ef 48 ff f4 	st.w	r7[-12],r8
80002034:	c4 28       	rjmp	800020b8 <hmac_sha256_init+0xb0>
    } else {
        if (key_size > SHA256_BLOCK_SIZE){
80002036:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000203a:	e0 48 00 40 	cp.w	r8,64
8000203e:	e0 88 00 13 	brls	80002064 <hmac_sha256_init+0x5c>
            num = SHA256_DIGEST_SIZE;
80002042:	32 08       	mov	r8,32
80002044:	ef 48 ff f4 	st.w	r7[-12],r8
            sha256(key, key_size, key_temp);
80002048:	ee c8 00 30 	sub	r8,r7,48
8000204c:	10 9a       	mov	r10,r8
8000204e:	ee fb ff c4 	ld.w	r11,r7[-60]
80002052:	ee fc ff c8 	ld.w	r12,r7[-56]
80002056:	f0 1f 00 54 	mcall	800021a4 <hmac_sha256_init+0x19c>
            key_used = key_temp;
8000205a:	ee c8 00 30 	sub	r8,r7,48
8000205e:	ef 48 ff f8 	st.w	r7[-8],r8
80002062:	c0 98       	rjmp	80002074 <hmac_sha256_init+0x6c>
        } else { /* key_size > SHA256_BLOCK_SIZE */
            key_used = key;
80002064:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002068:	ef 48 ff f8 	st.w	r7[-8],r8
            num = key_size;
8000206c:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002070:	ef 48 ff f4 	st.w	r7[-12],r8
        }
        fill = SHA256_BLOCK_SIZE - num;
80002074:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002078:	f0 08 11 40 	rsub	r8,r8,64
8000207c:	ef 48 ff f0 	st.w	r7[-16],r8

        memset(ctx->block_ipad + num, 0x36, fill);
80002080:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002084:	f0 c9 fd 60 	sub	r9,r8,-672
80002088:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000208c:	f2 08 00 08 	add	r8,r9,r8
80002090:	ee fa ff f0 	ld.w	r10,r7[-16]
80002094:	33 6b       	mov	r11,54
80002096:	10 9c       	mov	r12,r8
80002098:	f0 1f 00 44 	mcall	800021a8 <hmac_sha256_init+0x1a0>
        memset(ctx->block_opad + num, 0x5c, fill);
8000209c:	ee f8 ff cc 	ld.w	r8,r7[-52]
800020a0:	f0 c9 fd 20 	sub	r9,r8,-736
800020a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800020a8:	f2 08 00 08 	add	r8,r9,r8
800020ac:	ee fa ff f0 	ld.w	r10,r7[-16]
800020b0:	35 cb       	mov	r11,92
800020b2:	10 9c       	mov	r12,r8
800020b4:	f0 1f 00 3d 	mcall	800021a8 <hmac_sha256_init+0x1a0>
    }

    for (i = 0; i < (int) num; i++) {
800020b8:	30 08       	mov	r8,0
800020ba:	ef 48 ff fc 	st.w	r7[-4],r8
800020be:	c2 a8       	rjmp	80002112 <hmac_sha256_init+0x10a>
        ctx->block_ipad[i] = key_used[i] ^ 0x36;
800020c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020c8:	ee fa ff f8 	ld.w	r10,r7[-8]
800020cc:	f4 08 00 08 	add	r8,r10,r8
800020d0:	11 88       	ld.ub	r8,r8[0x0]
800020d2:	ec 18 00 36 	eorl	r8,0x36
800020d6:	5c 58       	castu.b	r8
800020d8:	ee fa ff cc 	ld.w	r10,r7[-52]
800020dc:	f4 09 00 09 	add	r9,r10,r9
800020e0:	f3 68 02 a0 	st.b	r9[672],r8
        ctx->block_opad[i] = key_used[i] ^ 0x5c;
800020e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020ec:	ee fa ff f8 	ld.w	r10,r7[-8]
800020f0:	f4 08 00 08 	add	r8,r10,r8
800020f4:	11 88       	ld.ub	r8,r8[0x0]
800020f6:	ec 18 00 5c 	eorl	r8,0x5c
800020fa:	5c 58       	castu.b	r8
800020fc:	ee fa ff cc 	ld.w	r10,r7[-52]
80002100:	f4 09 00 09 	add	r9,r10,r9
80002104:	f3 68 02 e0 	st.b	r9[736],r8

        memset(ctx->block_ipad + num, 0x36, fill);
        memset(ctx->block_opad + num, 0x5c, fill);
    }

    for (i = 0; i < (int) num; i++) {
80002108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000210c:	2f f8       	sub	r8,-1
8000210e:	ef 48 ff fc 	st.w	r7[-4],r8
80002112:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000211a:	10 39       	cp.w	r9,r8
8000211c:	fe 99 ff d2 	brgt	800020c0 <hmac_sha256_init+0xb8>
        ctx->block_ipad[i] = key_used[i] ^ 0x36;
        ctx->block_opad[i] = key_used[i] ^ 0x5c;
    }

    sha256_init(&ctx->ctx_inside);
80002120:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002124:	10 9c       	mov	r12,r8
80002126:	f0 1f 00 22 	mcall	800021ac <hmac_sha256_init+0x1a4>
    sha256_update(&ctx->ctx_inside, ctx->block_ipad, SHA256_BLOCK_SIZE);
8000212a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000212e:	f0 c9 fd 60 	sub	r9,r8,-672
80002132:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002136:	34 0a       	mov	r10,64
80002138:	12 9b       	mov	r11,r9
8000213a:	10 9c       	mov	r12,r8
8000213c:	f0 1f 00 1d 	mcall	800021b0 <hmac_sha256_init+0x1a8>

    sha256_init(&ctx->ctx_outside);
80002140:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002144:	f0 c8 ff 58 	sub	r8,r8,-168
80002148:	10 9c       	mov	r12,r8
8000214a:	f0 1f 00 19 	mcall	800021ac <hmac_sha256_init+0x1a4>
    sha256_update(&ctx->ctx_outside, ctx->block_opad,
8000214e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002152:	f0 c9 fd 20 	sub	r9,r8,-736
80002156:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000215a:	f0 c8 ff 58 	sub	r8,r8,-168
8000215e:	34 0a       	mov	r10,64
80002160:	12 9b       	mov	r11,r9
80002162:	10 9c       	mov	r12,r8
80002164:	f0 1f 00 13 	mcall	800021b0 <hmac_sha256_init+0x1a8>
                  SHA256_BLOCK_SIZE);

    /* for hmac_reinit */
    memcpy(&ctx->ctx_inside_reinit, &ctx->ctx_inside,
80002168:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000216c:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002170:	f0 c8 fe b0 	sub	r8,r8,-336
80002174:	e0 6a 00 a8 	mov	r10,168
80002178:	12 9b       	mov	r11,r9
8000217a:	10 9c       	mov	r12,r8
8000217c:	f0 1f 00 0e 	mcall	800021b4 <hmac_sha256_init+0x1ac>
           sizeof(sha256_ctx));
    memcpy(&ctx->ctx_outside_reinit, &ctx->ctx_outside,
80002180:	ee f8 ff cc 	ld.w	r8,r7[-52]
80002184:	f0 c9 ff 58 	sub	r9,r8,-168
80002188:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000218c:	f0 c8 fe 08 	sub	r8,r8,-504
80002190:	e0 6a 00 a8 	mov	r10,168
80002194:	12 9b       	mov	r11,r9
80002196:	10 9c       	mov	r12,r8
80002198:	f0 1f 00 07 	mcall	800021b4 <hmac_sha256_init+0x1ac>
           sizeof(sha256_ctx));
}
8000219c:	2f 1d       	sub	sp,-60
8000219e:	e3 cd 80 80 	ldm	sp++,r7,pc
800021a2:	00 00       	add	r0,r0
800021a4:	80 00       	ld.sh	r0,r0[0x0]
800021a6:	26 44       	sub	r4,100
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	e9 26 80 00 	ld.sb	r6,r4[-32768]
800021ae:	26 98       	sub	r8,105
800021b0:	80 00       	ld.sh	r0,r0[0x0]
800021b2:	26 f4       	sub	r4,111
800021b4:	80 00       	ld.sh	r0,r0[0x0]
800021b6:	e7 de       	*unknown*

800021b8 <hmac_sha256_update>:
           sizeof(sha256_ctx));
}

void hmac_sha256_update(hmac_sha256_ctx *ctx, const unsigned char *message,
                        unsigned int message_len)
{
800021b8:	eb cd 40 80 	pushm	r7,lr
800021bc:	1a 97       	mov	r7,sp
800021be:	20 3d       	sub	sp,12
800021c0:	ef 4c ff fc 	st.w	r7[-4],r12
800021c4:	ef 4b ff f8 	st.w	r7[-8],r11
800021c8:	ef 4a ff f4 	st.w	r7[-12],r10
    sha256_update(&ctx->ctx_inside, message, message_len);
800021cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d0:	ee fa ff f4 	ld.w	r10,r7[-12]
800021d4:	ee fb ff f8 	ld.w	r11,r7[-8]
800021d8:	10 9c       	mov	r12,r8
800021da:	f0 1f 00 03 	mcall	800021e4 <hmac_sha256_update+0x2c>
}
800021de:	2f dd       	sub	sp,-12
800021e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	26 f4       	sub	r4,111

800021e8 <hmac_sha256_final>:

void hmac_sha256_final(hmac_sha256_ctx *ctx, unsigned char *mac,
                       unsigned int mac_size)
{
800021e8:	eb cd 40 80 	pushm	r7,lr
800021ec:	1a 97       	mov	r7,sp
800021ee:	21 3d       	sub	sp,76
800021f0:	ef 4c ff bc 	st.w	r7[-68],r12
800021f4:	ef 4b ff b8 	st.w	r7[-72],r11
800021f8:	ef 4a ff b4 	st.w	r7[-76],r10
    unsigned char digest_inside[SHA256_DIGEST_SIZE];
    unsigned char mac_temp[SHA256_DIGEST_SIZE];

    sha256_final(&ctx->ctx_inside, digest_inside);
800021fc:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002200:	ee c9 00 20 	sub	r9,r7,32
80002204:	12 9b       	mov	r11,r9
80002206:	10 9c       	mov	r12,r8
80002208:	f0 1f 00 12 	mcall	80002250 <hmac_sha256_final+0x68>
    sha256_update(&ctx->ctx_outside, digest_inside, SHA256_DIGEST_SIZE);
8000220c:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002210:	f0 c8 ff 58 	sub	r8,r8,-168
80002214:	ee c9 00 20 	sub	r9,r7,32
80002218:	32 0a       	mov	r10,32
8000221a:	12 9b       	mov	r11,r9
8000221c:	10 9c       	mov	r12,r8
8000221e:	f0 1f 00 0e 	mcall	80002254 <hmac_sha256_final+0x6c>
    sha256_final(&ctx->ctx_outside, mac_temp);
80002222:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002226:	f0 c8 ff 58 	sub	r8,r8,-168
8000222a:	ee c9 00 40 	sub	r9,r7,64
8000222e:	12 9b       	mov	r11,r9
80002230:	10 9c       	mov	r12,r8
80002232:	f0 1f 00 08 	mcall	80002250 <hmac_sha256_final+0x68>
    memcpy(mac, mac_temp, mac_size);
80002236:	ee c8 00 40 	sub	r8,r7,64
8000223a:	ee fa ff b4 	ld.w	r10,r7[-76]
8000223e:	10 9b       	mov	r11,r8
80002240:	ee fc ff b8 	ld.w	r12,r7[-72]
80002244:	f0 1f 00 05 	mcall	80002258 <hmac_sha256_final+0x70>
}
80002248:	2e dd       	sub	sp,-76
8000224a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000224e:	00 00       	add	r0,r0
80002250:	80 00       	ld.sh	r0,r0[0x0]
80002252:	28 1c       	sub	r12,-127
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	26 f4       	sub	r4,111
80002258:	80 00       	ld.sh	r0,r0[0x0]
8000225a:	e7 de       	*unknown*

8000225c <hmac_sha256>:

void hmac_sha256(const unsigned char *key, unsigned int key_size,
          const unsigned char *message, unsigned int message_len,
          unsigned char *mac, unsigned mac_size)
{
8000225c:	eb cd 40 c0 	pushm	r6-r7,lr
80002260:	1a 97       	mov	r7,sp
80002262:	fa cd 03 34 	sub	sp,sp,820
80002266:	ee c6 ff f4 	sub	r6,r7,-12
8000226a:	ef 4c fc dc 	st.w	r7[-804],r12
8000226e:	ef 4b fc d8 	st.w	r7[-808],r11
80002272:	ef 4a fc d4 	st.w	r7[-812],r10
80002276:	ef 49 fc d0 	st.w	r7[-816],r9
8000227a:	ef 48 fc cc 	st.w	r7[-820],r8
    hmac_sha256_ctx ctx;

    hmac_sha256_init(&ctx, key, key_size);
8000227e:	ee c8 03 20 	sub	r8,r7,800
80002282:	ee fa fc d8 	ld.w	r10,r7[-808]
80002286:	ee fb fc dc 	ld.w	r11,r7[-804]
8000228a:	10 9c       	mov	r12,r8
8000228c:	f0 1f 00 0c 	mcall	800022bc <hmac_sha256+0x60>
    hmac_sha256_update(&ctx, message, message_len);
80002290:	ee c8 03 20 	sub	r8,r7,800
80002294:	ee fa fc d0 	ld.w	r10,r7[-816]
80002298:	ee fb fc d4 	ld.w	r11,r7[-812]
8000229c:	10 9c       	mov	r12,r8
8000229e:	f0 1f 00 09 	mcall	800022c0 <hmac_sha256+0x64>
    hmac_sha256_final(&ctx, mac, mac_size);
800022a2:	ee c8 03 20 	sub	r8,r7,800
800022a6:	6c 0a       	ld.w	r10,r6[0x0]
800022a8:	ee fb fc cc 	ld.w	r11,r7[-820]
800022ac:	10 9c       	mov	r12,r8
800022ae:	f0 1f 00 06 	mcall	800022c4 <hmac_sha256+0x68>
}
800022b2:	fe 3d fc cc 	sub	sp,-820
800022b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022ba:	00 00       	add	r0,r0
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	20 08       	sub	r8,0
800022c0:	80 00       	ld.sh	r0,r0[0x0]
800022c2:	21 b8       	sub	r8,27
800022c4:	80 00       	ld.sh	r0,r0[0x0]
800022c6:	21 e8       	sub	r8,30

800022c8 <sha256_transf>:

/* SHA-256 functions */

void sha256_transf(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int block_nb)
{
800022c8:	eb cd 40 80 	pushm	r7,lr
800022cc:	1a 97       	mov	r7,sp
800022ce:	fa cd 01 40 	sub	sp,sp,320
800022d2:	ef 4c fe c8 	st.w	r7[-312],r12
800022d6:	ef 4b fe c4 	st.w	r7[-316],r11
800022da:	ef 4a fe c0 	st.w	r7[-320],r10

#ifndef UNROLL_LOOPS
    int j;
#endif

    for (i = 0; i < (int) block_nb; i++) {
800022de:	30 08       	mov	r8,0
800022e0:	ef 48 ff f8 	st.w	r7[-8],r8
800022e4:	ca 49       	rjmp	8000262c <sha256_transf+0x364>
        sub_block = message + (i << 6);
800022e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022ea:	a7 68       	lsl	r8,0x6
800022ec:	ee f9 fe c4 	ld.w	r9,r7[-316]
800022f0:	f2 08 00 08 	add	r8,r9,r8
800022f4:	ef 48 ff f4 	st.w	r7[-12],r8

#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
800022f8:	30 08       	mov	r8,0
800022fa:	ef 48 ff fc 	st.w	r7[-4],r8
800022fe:	c3 98       	rjmp	80002370 <sha256_transf+0xa8>
            PACK32(&sub_block[j << 2], &w[j]);
80002300:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002304:	f0 09 15 02 	lsl	r9,r8,0x2
80002308:	ee c8 01 14 	sub	r8,r7,276
8000230c:	12 08       	add	r8,r9
8000230e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002312:	a3 69       	lsl	r9,0x2
80002314:	2f d9       	sub	r9,-3
80002316:	ee fa ff f4 	ld.w	r10,r7[-12]
8000231a:	f4 09 00 09 	add	r9,r10,r9
8000231e:	13 89       	ld.ub	r9,r9[0x0]
80002320:	12 9a       	mov	r10,r9
80002322:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002326:	a3 69       	lsl	r9,0x2
80002328:	2f e9       	sub	r9,-2
8000232a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000232e:	f6 09 00 09 	add	r9,r11,r9
80002332:	13 89       	ld.ub	r9,r9[0x0]
80002334:	a9 69       	lsl	r9,0x8
80002336:	12 4a       	or	r10,r9
80002338:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000233c:	a3 69       	lsl	r9,0x2
8000233e:	2f f9       	sub	r9,-1
80002340:	ee fb ff f4 	ld.w	r11,r7[-12]
80002344:	f6 09 00 09 	add	r9,r11,r9
80002348:	13 89       	ld.ub	r9,r9[0x0]
8000234a:	b1 69       	lsl	r9,0x10
8000234c:	12 4a       	or	r10,r9
8000234e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002352:	a3 69       	lsl	r9,0x2
80002354:	ee fb ff f4 	ld.w	r11,r7[-12]
80002358:	f6 09 00 09 	add	r9,r11,r9
8000235c:	13 89       	ld.ub	r9,r9[0x0]
8000235e:	b9 69       	lsl	r9,0x18
80002360:	f5 e9 10 09 	or	r9,r10,r9
80002364:	91 09       	st.w	r8[0x0],r9

    for (i = 0; i < (int) block_nb; i++) {
        sub_block = message + (i << 6);

#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
80002366:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000236a:	2f f8       	sub	r8,-1
8000236c:	ef 48 ff fc 	st.w	r7[-4],r8
80002370:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002374:	58 f8       	cp.w	r8,15
80002376:	fe 9a ff c5 	brle	80002300 <sha256_transf+0x38>
            PACK32(&sub_block[j << 2], &w[j]);
        }

        for (j = 16; j < 64; j++) {
8000237a:	31 08       	mov	r8,16
8000237c:	ef 48 ff fc 	st.w	r7[-4],r8
80002380:	c6 c8       	rjmp	80002458 <sha256_transf+0x190>
            SHA256_SCR(j);
80002382:	ee fa ff fc 	ld.w	r10,r7[-4]
80002386:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000238a:	20 28       	sub	r8,2
8000238c:	a3 68       	lsl	r8,0x2
8000238e:	ee 08 00 08 	add	r8,r7,r8
80002392:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002396:	f0 0b 16 11 	lsr	r11,r8,0x11
8000239a:	f0 09 15 0f 	lsl	r9,r8,0xf
8000239e:	16 49       	or	r9,r11
800023a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023a4:	20 28       	sub	r8,2
800023a6:	a3 68       	lsl	r8,0x2
800023a8:	ee 08 00 08 	add	r8,r7,r8
800023ac:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023b0:	f0 0b 16 13 	lsr	r11,r8,0x13
800023b4:	ad 78       	lsl	r8,0xd
800023b6:	16 48       	or	r8,r11
800023b8:	10 59       	eor	r9,r8
800023ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023be:	20 28       	sub	r8,2
800023c0:	a3 68       	lsl	r8,0x2
800023c2:	ee 08 00 08 	add	r8,r7,r8
800023c6:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023ca:	ab 88       	lsr	r8,0xa
800023cc:	10 59       	eor	r9,r8
800023ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023d2:	20 78       	sub	r8,7
800023d4:	a3 68       	lsl	r8,0x2
800023d6:	ee 08 00 08 	add	r8,r7,r8
800023da:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023de:	f2 08 00 0b 	add	r11,r9,r8
800023e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023e6:	20 f8       	sub	r8,15
800023e8:	a3 68       	lsl	r8,0x2
800023ea:	ee 08 00 08 	add	r8,r7,r8
800023ee:	f0 f8 fe ec 	ld.w	r8,r8[-276]
800023f2:	f0 0c 16 07 	lsr	r12,r8,0x7
800023f6:	f0 09 15 19 	lsl	r9,r8,0x19
800023fa:	18 49       	or	r9,r12
800023fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002400:	20 f8       	sub	r8,15
80002402:	a3 68       	lsl	r8,0x2
80002404:	ee 08 00 08 	add	r8,r7,r8
80002408:	f0 f8 fe ec 	ld.w	r8,r8[-276]
8000240c:	f0 0c 16 12 	lsr	r12,r8,0x12
80002410:	af 68       	lsl	r8,0xe
80002412:	18 48       	or	r8,r12
80002414:	10 59       	eor	r9,r8
80002416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241a:	20 f8       	sub	r8,15
8000241c:	a3 68       	lsl	r8,0x2
8000241e:	ee 08 00 08 	add	r8,r7,r8
80002422:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002426:	a3 98       	lsr	r8,0x3
80002428:	f3 e8 20 08 	eor	r8,r9,r8
8000242c:	f6 08 00 09 	add	r9,r11,r8
80002430:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002434:	21 08       	sub	r8,16
80002436:	a3 68       	lsl	r8,0x2
80002438:	ee 08 00 08 	add	r8,r7,r8
8000243c:	f0 f8 fe ec 	ld.w	r8,r8[-276]
80002440:	10 09       	add	r9,r8
80002442:	f4 08 15 02 	lsl	r8,r10,0x2
80002446:	ee 08 00 08 	add	r8,r7,r8
8000244a:	f1 49 fe ec 	st.w	r8[-276],r9
#ifndef UNROLL_LOOPS
        for (j = 0; j < 16; j++) {
            PACK32(&sub_block[j << 2], &w[j]);
        }

        for (j = 16; j < 64; j++) {
8000244e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002452:	2f f8       	sub	r8,-1
80002454:	ef 48 ff fc 	st.w	r7[-4],r8
80002458:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000245c:	e0 48 00 3f 	cp.w	r8,63
80002460:	fe 9a ff 91 	brle	80002382 <sha256_transf+0xba>
            SHA256_SCR(j);
        }

        for (j = 0; j < 8; j++) {
80002464:	30 08       	mov	r8,0
80002466:	ef 48 ff fc 	st.w	r7[-4],r8
8000246a:	c1 48       	rjmp	80002492 <sha256_transf+0x1ca>
            wv[j] = ctx->h[j];
8000246c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002470:	ee fa ff fc 	ld.w	r10,r7[-4]
80002474:	ee f9 fe c8 	ld.w	r9,r7[-312]
80002478:	2d ea       	sub	r10,-34
8000247a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000247e:	a3 68       	lsl	r8,0x2
80002480:	ee 08 00 08 	add	r8,r7,r8
80002484:	f1 49 fe cc 	st.w	r8[-308],r9

        for (j = 16; j < 64; j++) {
            SHA256_SCR(j);
        }

        for (j = 0; j < 8; j++) {
80002488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000248c:	2f f8       	sub	r8,-1
8000248e:	ef 48 ff fc 	st.w	r7[-4],r8
80002492:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002496:	58 78       	cp.w	r8,7
80002498:	fe 9a ff ea 	brle	8000246c <sha256_transf+0x1a4>
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
8000249c:	30 08       	mov	r8,0
8000249e:	ef 48 ff fc 	st.w	r7[-4],r8
800024a2:	c9 68       	rjmp	800025ce <sha256_transf+0x306>
            t1 = wv[7] + SHA256_F2(wv[4]) + CH(wv[4], wv[5], wv[6])
800024a4:	ee fa fe e8 	ld.w	r10,r7[-280]
800024a8:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024ac:	f0 0b 16 06 	lsr	r11,r8,0x6
800024b0:	f0 09 15 1a 	lsl	r9,r8,0x1a
800024b4:	16 49       	or	r9,r11
800024b6:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024ba:	f0 0b 16 0b 	lsr	r11,r8,0xb
800024be:	b5 78       	lsl	r8,0x15
800024c0:	16 48       	or	r8,r11
800024c2:	10 59       	eor	r9,r8
800024c4:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024c8:	f0 0b 16 19 	lsr	r11,r8,0x19
800024cc:	a7 78       	lsl	r8,0x7
800024ce:	16 48       	or	r8,r11
800024d0:	f3 e8 20 08 	eor	r8,r9,r8
800024d4:	f4 08 00 09 	add	r9,r10,r8
800024d8:	ee fa fe dc 	ld.w	r10,r7[-292]
800024dc:	ee f8 fe e0 	ld.w	r8,r7[-288]
800024e0:	10 6a       	and	r10,r8
800024e2:	ee f8 fe dc 	ld.w	r8,r7[-292]
800024e6:	f0 0b 11 ff 	rsub	r11,r8,-1
800024ea:	ee f8 fe e4 	ld.w	r8,r7[-284]
800024ee:	f7 e8 00 08 	and	r8,r11,r8
800024f2:	f5 e8 20 08 	eor	r8,r10,r8
                + sha256_k[j] + w[j];
800024f6:	10 09       	add	r9,r8
800024f8:	ee fa ff fc 	ld.w	r10,r7[-4]
800024fc:	4d 18       	lddpc	r8,80002640 <sha256_transf+0x378>
800024fe:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002502:	10 09       	add	r9,r8
80002504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002508:	a3 68       	lsl	r8,0x2
8000250a:	ee 08 00 08 	add	r8,r7,r8
8000250e:	f0 f8 fe ec 	ld.w	r8,r8[-276]
        for (j = 0; j < 8; j++) {
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
            t1 = wv[7] + SHA256_F2(wv[4]) + CH(wv[4], wv[5], wv[6])
80002512:	f2 08 00 08 	add	r8,r9,r8
80002516:	ef 48 ff ec 	st.w	r7[-20],r8
                + sha256_k[j] + w[j];
            t2 = SHA256_F1(wv[0]) + MAJ(wv[0], wv[1], wv[2]);
8000251a:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000251e:	f0 0a 16 02 	lsr	r10,r8,0x2
80002522:	f0 09 15 1e 	lsl	r9,r8,0x1e
80002526:	14 49       	or	r9,r10
80002528:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000252c:	f0 0a 16 0d 	lsr	r10,r8,0xd
80002530:	b3 78       	lsl	r8,0x13
80002532:	14 48       	or	r8,r10
80002534:	10 59       	eor	r9,r8
80002536:	ee f8 fe cc 	ld.w	r8,r7[-308]
8000253a:	f0 0a 16 16 	lsr	r10,r8,0x16
8000253e:	ab 68       	lsl	r8,0xa
80002540:	14 48       	or	r8,r10
80002542:	10 59       	eor	r9,r8
80002544:	ee fa fe cc 	ld.w	r10,r7[-308]
80002548:	ee f8 fe d0 	ld.w	r8,r7[-304]
8000254c:	10 6a       	and	r10,r8
8000254e:	ee fb fe cc 	ld.w	r11,r7[-308]
80002552:	ee f8 fe d4 	ld.w	r8,r7[-300]
80002556:	f7 e8 00 08 	and	r8,r11,r8
8000255a:	10 5a       	eor	r10,r8
8000255c:	ee fb fe d0 	ld.w	r11,r7[-304]
80002560:	ee f8 fe d4 	ld.w	r8,r7[-300]
80002564:	f7 e8 00 08 	and	r8,r11,r8
80002568:	f5 e8 20 08 	eor	r8,r10,r8
8000256c:	f2 08 00 08 	add	r8,r9,r8
80002570:	ef 48 ff f0 	st.w	r7[-16],r8
            wv[7] = wv[6];
80002574:	ee f8 fe e4 	ld.w	r8,r7[-284]
80002578:	ef 48 fe e8 	st.w	r7[-280],r8
            wv[6] = wv[5];
8000257c:	ee f8 fe e0 	ld.w	r8,r7[-288]
80002580:	ef 48 fe e4 	st.w	r7[-284],r8
            wv[5] = wv[4];
80002584:	ee f8 fe dc 	ld.w	r8,r7[-292]
80002588:	ef 48 fe e0 	st.w	r7[-288],r8
            wv[4] = wv[3] + t1;
8000258c:	ee f9 fe d8 	ld.w	r9,r7[-296]
80002590:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002594:	f2 08 00 08 	add	r8,r9,r8
80002598:	ef 48 fe dc 	st.w	r7[-292],r8
            wv[3] = wv[2];
8000259c:	ee f8 fe d4 	ld.w	r8,r7[-300]
800025a0:	ef 48 fe d8 	st.w	r7[-296],r8
            wv[2] = wv[1];
800025a4:	ee f8 fe d0 	ld.w	r8,r7[-304]
800025a8:	ef 48 fe d4 	st.w	r7[-300],r8
            wv[1] = wv[0];
800025ac:	ee f8 fe cc 	ld.w	r8,r7[-308]
800025b0:	ef 48 fe d0 	st.w	r7[-304],r8
            wv[0] = t1 + t2;
800025b4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800025b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800025bc:	f2 08 00 08 	add	r8,r9,r8
800025c0:	ef 48 fe cc 	st.w	r7[-308],r8

        for (j = 0; j < 8; j++) {
            wv[j] = ctx->h[j];
        }

        for (j = 0; j < 64; j++) {
800025c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025c8:	2f f8       	sub	r8,-1
800025ca:	ef 48 ff fc 	st.w	r7[-4],r8
800025ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025d2:	e0 48 00 3f 	cp.w	r8,63
800025d6:	fe 9a ff 67 	brle	800024a4 <sha256_transf+0x1dc>
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }

        for (j = 0; j < 8; j++) {
800025da:	30 08       	mov	r8,0
800025dc:	ef 48 ff fc 	st.w	r7[-4],r8
800025e0:	c1 c8       	rjmp	80002618 <sha256_transf+0x350>
            ctx->h[j] += wv[j];
800025e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800025e6:	ee fa ff fc 	ld.w	r10,r7[-4]
800025ea:	ee f8 fe c8 	ld.w	r8,r7[-312]
800025ee:	2d ea       	sub	r10,-34
800025f0:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800025f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025f8:	a3 68       	lsl	r8,0x2
800025fa:	ee 08 00 08 	add	r8,r7,r8
800025fe:	f0 f8 fe cc 	ld.w	r8,r8[-308]
80002602:	10 0a       	add	r10,r8
80002604:	ee f8 fe c8 	ld.w	r8,r7[-312]
80002608:	2d e9       	sub	r9,-34
8000260a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
            wv[2] = wv[1];
            wv[1] = wv[0];
            wv[0] = t1 + t2;
        }

        for (j = 0; j < 8; j++) {
8000260e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002612:	2f f8       	sub	r8,-1
80002614:	ef 48 ff fc 	st.w	r7[-4],r8
80002618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000261c:	58 78       	cp.w	r8,7
8000261e:	fe 9a ff e2 	brle	800025e2 <sha256_transf+0x31a>

#ifndef UNROLL_LOOPS
    int j;
#endif

    for (i = 0; i < (int) block_nb; i++) {
80002622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002626:	2f f8       	sub	r8,-1
80002628:	ef 48 ff f8 	st.w	r7[-8],r8
8000262c:	ee f9 fe c0 	ld.w	r9,r7[-320]
80002630:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002634:	10 39       	cp.w	r9,r8
80002636:	fe 99 fe 58 	brgt	800022e6 <sha256_transf+0x1e>
        ctx->h[2] += wv[2]; ctx->h[3] += wv[3];
        ctx->h[4] += wv[4]; ctx->h[5] += wv[5];
        ctx->h[6] += wv[6]; ctx->h[7] += wv[7];
#endif /* !UNROLL_LOOPS */
    }
}
8000263a:	2b 0d       	sub	sp,-320
8000263c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002640:	00 00       	add	r0,r0
80002642:	00 28       	rsub	r8,r0

80002644 <sha256>:

void sha256(const unsigned char *message, unsigned int len, unsigned char *digest)
{
80002644:	eb cd 40 80 	pushm	r7,lr
80002648:	1a 97       	mov	r7,sp
8000264a:	fa cd 00 b4 	sub	sp,sp,180
8000264e:	ef 4c ff 54 	st.w	r7[-172],r12
80002652:	ef 4b ff 50 	st.w	r7[-176],r11
80002656:	ef 4a ff 4c 	st.w	r7[-180],r10
    sha256_ctx ctx;

    sha256_init(&ctx);
8000265a:	ee c8 00 a8 	sub	r8,r7,168
8000265e:	10 9c       	mov	r12,r8
80002660:	f0 1f 00 0b 	mcall	8000268c <sha256+0x48>
    sha256_update(&ctx, message, len);
80002664:	ee c8 00 a8 	sub	r8,r7,168
80002668:	ee fa ff 50 	ld.w	r10,r7[-176]
8000266c:	ee fb ff 54 	ld.w	r11,r7[-172]
80002670:	10 9c       	mov	r12,r8
80002672:	f0 1f 00 08 	mcall	80002690 <sha256+0x4c>
    sha256_final(&ctx, digest);
80002676:	ee c8 00 a8 	sub	r8,r7,168
8000267a:	ee fb ff 4c 	ld.w	r11,r7[-180]
8000267e:	10 9c       	mov	r12,r8
80002680:	f0 1f 00 05 	mcall	80002694 <sha256+0x50>
}
80002684:	2d 3d       	sub	sp,-180
80002686:	e3 cd 80 80 	ldm	sp++,r7,pc
8000268a:	00 00       	add	r0,r0
8000268c:	80 00       	ld.sh	r0,r0[0x0]
8000268e:	26 98       	sub	r8,105
80002690:	80 00       	ld.sh	r0,r0[0x0]
80002692:	26 f4       	sub	r4,111
80002694:	80 00       	ld.sh	r0,r0[0x0]
80002696:	28 1c       	sub	r12,-127

80002698 <sha256_init>:

void sha256_init(sha256_ctx *ctx)
{
80002698:	eb cd 40 80 	pushm	r7,lr
8000269c:	1a 97       	mov	r7,sp
8000269e:	20 2d       	sub	sp,8
800026a0:	ef 4c ff f8 	st.w	r7[-8],r12
#ifndef UNROLL_LOOPS
    int i;
    for (i = 0; i < 8; i++) {
800026a4:	30 08       	mov	r8,0
800026a6:	ef 48 ff fc 	st.w	r7[-4],r8
800026aa:	c1 28       	rjmp	800026ce <sha256_init+0x36>
        ctx->h[i] = sha256_h0[i];
800026ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800026b0:	ee fa ff fc 	ld.w	r10,r7[-4]
800026b4:	48 f8       	lddpc	r8,800026f0 <sha256_init+0x58>
800026b6:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800026ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026be:	2d e9       	sub	r9,-34
800026c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void sha256_init(sha256_ctx *ctx)
{
#ifndef UNROLL_LOOPS
    int i;
    for (i = 0; i < 8; i++) {
800026c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026c8:	2f f8       	sub	r8,-1
800026ca:	ef 48 ff fc 	st.w	r7[-4],r8
800026ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026d2:	58 78       	cp.w	r8,7
800026d4:	fe 9a ff ec 	brle	800026ac <sha256_init+0x14>
    ctx->h[2] = sha256_h0[2]; ctx->h[3] = sha256_h0[3];
    ctx->h[4] = sha256_h0[4]; ctx->h[5] = sha256_h0[5];
    ctx->h[6] = sha256_h0[6]; ctx->h[7] = sha256_h0[7];
#endif /* !UNROLL_LOOPS */

    ctx->len = 0;
800026d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026dc:	30 09       	mov	r9,0
800026de:	91 19       	st.w	r8[0x4],r9
    ctx->tot_len = 0;
800026e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026e4:	30 09       	mov	r9,0
800026e6:	91 09       	st.w	r8[0x0],r9
}
800026e8:	2f ed       	sub	sp,-8
800026ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800026ee:	00 00       	add	r0,r0
800026f0:	00 00       	add	r0,r0
800026f2:	00 08       	add	r8,r0

800026f4 <sha256_update>:

void sha256_update(sha256_ctx *ctx, const unsigned char *message,
                   unsigned int len)
{
800026f4:	eb cd 40 80 	pushm	r7,lr
800026f8:	1a 97       	mov	r7,sp
800026fa:	20 8d       	sub	sp,32
800026fc:	ef 4c ff e8 	st.w	r7[-24],r12
80002700:	ef 4b ff e4 	st.w	r7[-28],r11
80002704:	ef 4a ff e0 	st.w	r7[-32],r10
    unsigned int block_nb;
    unsigned int new_len, rem_len, tmp_len;
    const unsigned char *shifted_message;

    tmp_len = SHA256_BLOCK_SIZE - ctx->len;
80002708:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000270c:	70 18       	ld.w	r8,r8[0x4]
8000270e:	f0 08 11 40 	rsub	r8,r8,64
80002712:	ef 48 ff f8 	st.w	r7[-8],r8
    rem_len = len < tmp_len ? len : tmp_len;
80002716:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000271a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000271e:	ee fa ff f8 	ld.w	r10,r7[-8]
80002722:	10 3a       	cp.w	r10,r8
80002724:	f2 08 17 80 	movls	r8,r9
80002728:	ef 48 ff f4 	st.w	r7[-12],r8

    memcpy(&ctx->block[ctx->len], message, rem_len);
8000272c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002730:	f0 c9 ff f8 	sub	r9,r8,-8
80002734:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002738:	70 18       	ld.w	r8,r8[0x4]
8000273a:	f2 08 00 08 	add	r8,r9,r8
8000273e:	ee fa ff f4 	ld.w	r10,r7[-12]
80002742:	ee fb ff e4 	ld.w	r11,r7[-28]
80002746:	10 9c       	mov	r12,r8
80002748:	f0 1f 00 33 	mcall	80002814 <sha256_update+0x120>

    if (ctx->len + len < SHA256_BLOCK_SIZE) {
8000274c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002750:	70 19       	ld.w	r9,r8[0x4]
80002752:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002756:	f2 08 00 08 	add	r8,r9,r8
8000275a:	e0 48 00 3f 	cp.w	r8,63
8000275e:	e0 8b 00 0c 	brhi	80002776 <sha256_update+0x82>
        ctx->len += len;
80002762:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002766:	70 19       	ld.w	r9,r8[0x4]
80002768:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000276c:	10 09       	add	r9,r8
8000276e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002772:	91 19       	st.w	r8[0x4],r9
        return;
80002774:	c4 c8       	rjmp	8000280c <sha256_update+0x118>
    }

    new_len = len - rem_len;
80002776:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000277a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000277e:	f2 08 01 08 	sub	r8,r9,r8
80002782:	ef 48 ff f0 	st.w	r7[-16],r8
    block_nb = new_len / SHA256_BLOCK_SIZE;
80002786:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000278a:	a7 88       	lsr	r8,0x6
8000278c:	ef 48 ff ec 	st.w	r7[-20],r8

    shifted_message = message + rem_len;
80002790:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002794:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002798:	f2 08 00 08 	add	r8,r9,r8
8000279c:	ef 48 ff fc 	st.w	r7[-4],r8

    sha256_transf(ctx, ctx->block, 1);
800027a0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027a4:	2f 88       	sub	r8,-8
800027a6:	30 1a       	mov	r10,1
800027a8:	10 9b       	mov	r11,r8
800027aa:	ee fc ff e8 	ld.w	r12,r7[-24]
800027ae:	f0 1f 00 1b 	mcall	80002818 <sha256_update+0x124>
    sha256_transf(ctx, shifted_message, block_nb);
800027b2:	ee fa ff ec 	ld.w	r10,r7[-20]
800027b6:	ee fb ff fc 	ld.w	r11,r7[-4]
800027ba:	ee fc ff e8 	ld.w	r12,r7[-24]
800027be:	f0 1f 00 17 	mcall	80002818 <sha256_update+0x124>

    rem_len = new_len % SHA256_BLOCK_SIZE;
800027c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027c6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800027ca:	ef 48 ff f4 	st.w	r7[-12],r8

    memcpy(ctx->block, &shifted_message[block_nb << 6],
800027ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800027d2:	a7 68       	lsl	r8,0x6
800027d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800027d8:	10 09       	add	r9,r8
800027da:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027de:	2f 88       	sub	r8,-8
800027e0:	ee fa ff f4 	ld.w	r10,r7[-12]
800027e4:	12 9b       	mov	r11,r9
800027e6:	10 9c       	mov	r12,r8
800027e8:	f0 1f 00 0b 	mcall	80002814 <sha256_update+0x120>
           rem_len);

    ctx->len = rem_len;
800027ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800027f4:	91 19       	st.w	r8[0x4],r9
    ctx->tot_len += (block_nb + 1) << 6;
800027f6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800027fa:	70 09       	ld.w	r9,r8[0x0]
800027fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002800:	2f f8       	sub	r8,-1
80002802:	a7 68       	lsl	r8,0x6
80002804:	10 09       	add	r9,r8
80002806:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000280a:	91 09       	st.w	r8[0x0],r9
}
8000280c:	2f 8d       	sub	sp,-32
8000280e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002812:	00 00       	add	r0,r0
80002814:	80 00       	ld.sh	r0,r0[0x0]
80002816:	e7 de 80 00 	ldswp.w	lr,r3[0]
8000281a:	22 c8       	sub	r8,44

8000281c <sha256_final>:

void sha256_final(sha256_ctx *ctx, unsigned char *digest)
{
8000281c:	eb cd 40 80 	pushm	r7,lr
80002820:	1a 97       	mov	r7,sp
80002822:	20 6d       	sub	sp,24
80002824:	ef 4c ff ec 	st.w	r7[-20],r12
80002828:	ef 4b ff e8 	st.w	r7[-24],r11
#ifndef UNROLL_LOOPS
    int i;
#endif

    block_nb = (1 + ((SHA256_BLOCK_SIZE - 9)
                     < (ctx->len % SHA256_BLOCK_SIZE)));
8000282c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002830:	70 18       	ld.w	r8,r8[0x4]
80002832:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6

#ifndef UNROLL_LOOPS
    int i;
#endif

    block_nb = (1 + ((SHA256_BLOCK_SIZE - 9)
80002836:	e0 48 00 37 	cp.w	r8,55
8000283a:	e0 88 00 04 	brls	80002842 <sha256_final+0x26>
8000283e:	30 28       	mov	r8,2
80002840:	c0 28       	rjmp	80002844 <sha256_final+0x28>
80002842:	30 18       	mov	r8,1
80002844:	ef 48 ff f0 	st.w	r7[-16],r8
                     < (ctx->len % SHA256_BLOCK_SIZE)));

    len_b = (ctx->tot_len + ctx->len) << 3;
80002848:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000284c:	70 09       	ld.w	r9,r8[0x0]
8000284e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002852:	70 18       	ld.w	r8,r8[0x4]
80002854:	f2 08 00 08 	add	r8,r9,r8
80002858:	a3 78       	lsl	r8,0x3
8000285a:	ef 48 ff f8 	st.w	r7[-8],r8
    pm_len = block_nb << 6;
8000285e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002862:	a7 68       	lsl	r8,0x6
80002864:	ef 48 ff f4 	st.w	r7[-12],r8

    memset(ctx->block + ctx->len, 0, pm_len - ctx->len);
80002868:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000286c:	70 18       	ld.w	r8,r8[0x4]
8000286e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002872:	10 19       	sub	r9,r8
80002874:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002878:	f0 ca ff f8 	sub	r10,r8,-8
8000287c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002880:	70 18       	ld.w	r8,r8[0x4]
80002882:	f4 08 00 08 	add	r8,r10,r8
80002886:	12 9a       	mov	r10,r9
80002888:	30 0b       	mov	r11,0
8000288a:	10 9c       	mov	r12,r8
8000288c:	f0 1f 00 4e 	mcall	800029c4 <sha256_final+0x1a8>
    ctx->block[ctx->len] = 0x80;
80002890:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002894:	70 18       	ld.w	r8,r8[0x4]
80002896:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000289a:	10 09       	add	r9,r8
8000289c:	38 08       	mov	r8,-128
8000289e:	f3 68 00 08 	st.b	r9[8],r8
    UNPACK32(len_b, ctx->block + pm_len - 4);
800028a2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028a6:	f0 c9 ff f8 	sub	r9,r8,-8
800028aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028ae:	20 18       	sub	r8,1
800028b0:	10 09       	add	r9,r8
800028b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028b6:	5c 58       	castu.b	r8
800028b8:	b2 88       	st.b	r9[0x0],r8
800028ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028be:	f0 c9 ff f8 	sub	r9,r8,-8
800028c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028c6:	20 28       	sub	r8,2
800028c8:	10 09       	add	r9,r8
800028ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ce:	a9 88       	lsr	r8,0x8
800028d0:	5c 58       	castu.b	r8
800028d2:	b2 88       	st.b	r9[0x0],r8
800028d4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028d8:	f0 c9 ff f8 	sub	r9,r8,-8
800028dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028e0:	20 38       	sub	r8,3
800028e2:	10 09       	add	r9,r8
800028e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028e8:	b1 88       	lsr	r8,0x10
800028ea:	5c 58       	castu.b	r8
800028ec:	b2 88       	st.b	r9[0x0],r8
800028ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
800028f2:	f0 c9 ff f8 	sub	r9,r8,-8
800028f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028fa:	20 48       	sub	r8,4
800028fc:	10 09       	add	r9,r8
800028fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002902:	b9 88       	lsr	r8,0x18
80002904:	5c 58       	castu.b	r8
80002906:	b2 88       	st.b	r9[0x0],r8

    sha256_transf(ctx, ctx->block, block_nb);
80002908:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000290c:	2f 88       	sub	r8,-8
8000290e:	ee fa ff f0 	ld.w	r10,r7[-16]
80002912:	10 9b       	mov	r11,r8
80002914:	ee fc ff ec 	ld.w	r12,r7[-20]
80002918:	f0 1f 00 2c 	mcall	800029c8 <sha256_final+0x1ac>

#ifndef UNROLL_LOOPS
    for (i = 0 ; i < 8; i++) {
8000291c:	30 08       	mov	r8,0
8000291e:	ef 48 ff fc 	st.w	r7[-4],r8
80002922:	c4 88       	rjmp	800029b2 <sha256_final+0x196>
        UNPACK32(ctx->h[i], &digest[i << 2]);
80002924:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002928:	a3 68       	lsl	r8,0x2
8000292a:	2f d8       	sub	r8,-3
8000292c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002930:	10 09       	add	r9,r8
80002932:	ee fa ff fc 	ld.w	r10,r7[-4]
80002936:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000293a:	2d ea       	sub	r10,-34
8000293c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002940:	5c 58       	castu.b	r8
80002942:	b2 88       	st.b	r9[0x0],r8
80002944:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002948:	a3 68       	lsl	r8,0x2
8000294a:	2f e8       	sub	r8,-2
8000294c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002950:	10 09       	add	r9,r8
80002952:	ee fa ff fc 	ld.w	r10,r7[-4]
80002956:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000295a:	2d ea       	sub	r10,-34
8000295c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002960:	a9 88       	lsr	r8,0x8
80002962:	5c 58       	castu.b	r8
80002964:	b2 88       	st.b	r9[0x0],r8
80002966:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000296a:	a3 68       	lsl	r8,0x2
8000296c:	2f f8       	sub	r8,-1
8000296e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002972:	10 09       	add	r9,r8
80002974:	ee fa ff fc 	ld.w	r10,r7[-4]
80002978:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000297c:	2d ea       	sub	r10,-34
8000297e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80002982:	b1 88       	lsr	r8,0x10
80002984:	5c 58       	castu.b	r8
80002986:	b2 88       	st.b	r9[0x0],r8
80002988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000298c:	a3 68       	lsl	r8,0x2
8000298e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002992:	10 09       	add	r9,r8
80002994:	ee fa ff fc 	ld.w	r10,r7[-4]
80002998:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000299c:	2d ea       	sub	r10,-34
8000299e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800029a2:	b9 88       	lsr	r8,0x18
800029a4:	5c 58       	castu.b	r8
800029a6:	b2 88       	st.b	r9[0x0],r8
    UNPACK32(len_b, ctx->block + pm_len - 4);

    sha256_transf(ctx, ctx->block, block_nb);

#ifndef UNROLL_LOOPS
    for (i = 0 ; i < 8; i++) {
800029a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029ac:	2f f8       	sub	r8,-1
800029ae:	ef 48 ff fc 	st.w	r7[-4],r8
800029b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029b6:	58 78       	cp.w	r8,7
800029b8:	fe 9a ff b6 	brle	80002924 <sha256_final+0x108>
   UNPACK32(ctx->h[4], &digest[16]);
   UNPACK32(ctx->h[5], &digest[20]);
   UNPACK32(ctx->h[6], &digest[24]);
   UNPACK32(ctx->h[7], &digest[28]);
#endif /* !UNROLL_LOOPS */
}
800029bc:	2f ad       	sub	sp,-24
800029be:	e3 cd 80 80 	ldm	sp++,r7,pc
800029c2:	00 00       	add	r0,r0
800029c4:	80 00       	ld.sh	r0,r0[0x0]
800029c6:	e9 26 80 00 	ld.sb	r6,r4[-32768]
800029ca:	22 c8       	sub	r8,44

800029cc <pbkdf2_func>:

volatile uint256_t var_Password;


void pbkdf2_func(uint8_t *password, uint8_t *derived_key)
{
800029cc:	eb cd 40 80 	pushm	r7,lr
800029d0:	1a 97       	mov	r7,sp
800029d2:	fa cd 00 98 	sub	sp,sp,152
800029d6:	ef 4c ff 6c 	st.w	r7[-148],r12
800029da:	ef 4b ff 68 	st.w	r7[-152],r11
	unsigned short int iteration_count;
	unsigned char mac[hLen];
	unsigned char Ubuffer[hLen+4] = {0};
800029de:	ee c8 00 50 	sub	r8,r7,80
800029e2:	30 0a       	mov	r10,0
800029e4:	30 0b       	mov	r11,0
800029e6:	f0 eb 00 00 	st.d	r8[0],r10
800029ea:	2f 88       	sub	r8,-8
800029ec:	30 0a       	mov	r10,0
800029ee:	30 0b       	mov	r11,0
800029f0:	f0 eb 00 00 	st.d	r8[0],r10
800029f4:	2f 88       	sub	r8,-8
800029f6:	30 0a       	mov	r10,0
800029f8:	30 0b       	mov	r11,0
800029fa:	f0 eb 00 00 	st.d	r8[0],r10
800029fe:	2f 88       	sub	r8,-8
80002a00:	30 0a       	mov	r10,0
80002a02:	30 0b       	mov	r11,0
80002a04:	f0 eb 00 00 	st.d	r8[0],r10
80002a08:	2f 88       	sub	r8,-8
80002a0a:	30 09       	mov	r9,0
80002a0c:	91 09       	st.w	r8[0x0],r9
80002a0e:	2f c8       	sub	r8,-4
	unsigned char Tbuffer[hLen] = {0};
80002a10:	ee c8 00 70 	sub	r8,r7,112
80002a14:	30 0a       	mov	r10,0
80002a16:	30 0b       	mov	r11,0
80002a18:	f0 eb 00 00 	st.d	r8[0],r10
80002a1c:	2f 88       	sub	r8,-8
80002a1e:	30 0a       	mov	r10,0
80002a20:	30 0b       	mov	r11,0
80002a22:	f0 eb 00 00 	st.d	r8[0],r10
80002a26:	2f 88       	sub	r8,-8
80002a28:	30 0a       	mov	r10,0
80002a2a:	30 0b       	mov	r11,0
80002a2c:	f0 eb 00 00 	st.d	r8[0],r10
80002a30:	2f 88       	sub	r8,-8
80002a32:	30 0a       	mov	r10,0
80002a34:	30 0b       	mov	r11,0
80002a36:	f0 eb 00 00 	st.d	r8[0],r10
80002a3a:	2f 88       	sub	r8,-8
	unsigned char Fbuffer[hLen] = {0};
80002a3c:	ee c8 00 90 	sub	r8,r7,144
80002a40:	30 0a       	mov	r10,0
80002a42:	30 0b       	mov	r11,0
80002a44:	f0 eb 00 00 	st.d	r8[0],r10
80002a48:	2f 88       	sub	r8,-8
80002a4a:	30 0a       	mov	r10,0
80002a4c:	30 0b       	mov	r11,0
80002a4e:	f0 eb 00 00 	st.d	r8[0],r10
80002a52:	2f 88       	sub	r8,-8
80002a54:	30 0a       	mov	r10,0
80002a56:	30 0b       	mov	r11,0
80002a58:	f0 eb 00 00 	st.d	r8[0],r10
80002a5c:	2f 88       	sub	r8,-8
80002a5e:	30 0a       	mov	r10,0
80002a60:	30 0b       	mov	r11,0
80002a62:	f0 eb 00 00 	st.d	r8[0],r10
80002a66:	2f 88       	sub	r8,-8
	unsigned char total_blocks = hLen / hLen, block_num = 1;
80002a68:	30 18       	mov	r8,1
80002a6a:	ef 68 ff f6 	st.b	r7[-10],r8
80002a6e:	30 18       	mov	r8,1
80002a70:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char *Salt = (unsigned char *)var_Salt.index;
80002a74:	4e 58       	lddpc	r8,80002c08 <pbkdf2_func+0x23c>
80002a76:	ef 48 ff f8 	st.w	r7[-8],r8
	
	while (block_num <= total_blocks)
80002a7a:	cb b8       	rjmp	80002bf0 <pbkdf2_func+0x224>
	{
		iteration_count = 0;
80002a7c:	30 08       	mov	r8,0
80002a7e:	ef 58 ff f4 	st.h	r7[-12],r8
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002a82:	c9 a8       	rjmp	80002bb6 <pbkdf2_func+0x1ea>
		{
			unsigned short int i;
			if (iteration_count == 0)
80002a84:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002a88:	30 08       	mov	r8,0
80002a8a:	f0 09 19 00 	cp.h	r9,r8
80002a8e:	c5 e1       	brne	80002b4a <pbkdf2_func+0x17e>
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002a90:	30 08       	mov	r8,0
80002a92:	ef 58 ff fe 	st.h	r7[-2],r8
80002a96:	c1 38       	rjmp	80002abc <pbkdf2_func+0xf0>
				{
					Ubuffer[i] = Salt[i];
80002a98:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002a9c:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002aa0:	ee fa ff f8 	ld.w	r10,r7[-8]
80002aa4:	f4 08 00 08 	add	r8,r10,r8
80002aa8:	11 88       	ld.ub	r8,r8[0x0]
80002aaa:	ee 09 00 09 	add	r9,r7,r9
80002aae:	f3 68 ff b0 	st.b	r9[-80],r8
		{
			unsigned short int i;
			if (iteration_count == 0)
			{
				unsigned short int i;
				for (i = 0; i < 32; i++)
80002ab2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002ab6:	2f f8       	sub	r8,-1
80002ab8:	ef 58 ff fe 	st.h	r7[-2],r8
80002abc:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002ac0:	31 f8       	mov	r8,31
80002ac2:	f0 09 19 00 	cp.h	r9,r8
80002ac6:	fe 98 ff e9 	brls	80002a98 <pbkdf2_func+0xcc>
				{
					Ubuffer[i] = Salt[i];
				}
				Ubuffer[i++] = (block_num >> 24) & 0xFF;
80002aca:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002ace:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002ad2:	b9 48       	asr	r8,0x18
80002ad4:	5c 58       	castu.b	r8
80002ad6:	ee 09 00 09 	add	r9,r7,r9
80002ada:	f3 68 ff b0 	st.b	r9[-80],r8
80002ade:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002ae2:	2f f8       	sub	r8,-1
80002ae4:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 16) & 0xFF;
80002ae8:	ef 19 ff fe 	ld.uh	r9,r7[-2]
80002aec:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002af0:	b1 48       	asr	r8,0x10
80002af2:	5c 58       	castu.b	r8
80002af4:	ee 09 00 09 	add	r9,r7,r9
80002af8:	f3 68 ff b0 	st.b	r9[-80],r8
80002afc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002b00:	2f f8       	sub	r8,-1
80002b02:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i++] = (block_num >> 8) & 0xFF;
80002b06:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002b0a:	ee 08 00 09 	add	r9,r7,r8
80002b0e:	30 08       	mov	r8,0
80002b10:	f3 68 ff b0 	st.b	r9[-80],r8
80002b14:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002b18:	2f f8       	sub	r8,-1
80002b1a:	ef 58 ff fe 	st.h	r7[-2],r8
				Ubuffer[i] = (block_num >> 0) & 0xFF;
80002b1e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002b22:	ee 08 00 09 	add	r9,r7,r8
80002b26:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002b2a:	f3 68 ff b0 	st.b	r9[-80],r8
				hmac_sha256(password, 32, Ubuffer, 36, mac, 32);
80002b2e:	ee c8 00 2c 	sub	r8,r7,44
80002b32:	ee ca 00 50 	sub	r10,r7,80
80002b36:	32 09       	mov	r9,32
80002b38:	1a d9       	st.w	--sp,r9
80002b3a:	32 49       	mov	r9,36
80002b3c:	32 0b       	mov	r11,32
80002b3e:	ee fc ff 6c 	ld.w	r12,r7[-148]
80002b42:	f0 1f 00 33 	mcall	80002c0c <pbkdf2_func+0x240>
80002b46:	2f fd       	sub	sp,-4
80002b48:	c0 d8       	rjmp	80002b62 <pbkdf2_func+0x196>
			}
			else
			{
				hmac_sha256((const unsigned char *)var_Password.index, 32, Ubuffer, 32, mac, 32);
80002b4a:	4b 2c       	lddpc	r12,80002c10 <pbkdf2_func+0x244>
80002b4c:	ee c8 00 2c 	sub	r8,r7,44
80002b50:	ee ca 00 50 	sub	r10,r7,80
80002b54:	32 09       	mov	r9,32
80002b56:	1a d9       	st.w	--sp,r9
80002b58:	32 09       	mov	r9,32
80002b5a:	32 0b       	mov	r11,32
80002b5c:	f0 1f 00 2c 	mcall	80002c0c <pbkdf2_func+0x240>
80002b60:	2f fd       	sub	sp,-4
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
80002b62:	ee c9 00 2c 	sub	r9,r7,44
80002b66:	ee c8 00 90 	sub	r8,r7,144
80002b6a:	30 8a       	mov	r10,8
80002b6c:	12 9b       	mov	r11,r9
80002b6e:	10 9c       	mov	r12,r8
80002b70:	f0 1f 00 29 	mcall	80002c14 <pbkdf2_func+0x248>
			
			for (i = 0; i < hLen; i++)
80002b74:	30 08       	mov	r8,0
80002b76:	ef 58 ff fc 	st.h	r7[-4],r8
80002b7a:	c1 28       	rjmp	80002b9e <pbkdf2_func+0x1d2>
			{
				Ubuffer[i] = mac[i];
80002b7c:	ef 19 ff fc 	ld.uh	r9,r7[-4]
80002b80:	ef 18 ff fc 	ld.uh	r8,r7[-4]
80002b84:	ee 08 00 08 	add	r8,r7,r8
80002b88:	f1 38 ff d4 	ld.ub	r8,r8[-44]
80002b8c:	ee 09 00 09 	add	r9,r7,r9
80002b90:	f3 68 ff b0 	st.b	r9[-80],r8
					
			}
			
			xor_func((uint32_t *)Fbuffer, (uint32_t *)mac, 8);
			
			for (i = 0; i < hLen; i++)
80002b94:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80002b98:	2f f8       	sub	r8,-1
80002b9a:	ef 58 ff fc 	st.h	r7[-4],r8
80002b9e:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80002ba2:	31 f8       	mov	r8,31
80002ba4:	f0 09 19 00 	cp.h	r9,r8
80002ba8:	fe 98 ff ea 	brls	80002b7c <pbkdf2_func+0x1b0>
			{
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
80002bac:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80002bb0:	2f f8       	sub	r8,-1
80002bb2:	ef 58 ff f4 	st.h	r7[-12],r8
	unsigned char *Salt = (unsigned char *)var_Salt.index;
	
	while (block_num <= total_blocks)
	{
		iteration_count = 0;
		while (iteration_count < TOTAL_ITERATIONS)			// TOTAL_ITERATIONS represents 'c' in PRF
80002bb6:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80002bba:	e0 68 01 f3 	mov	r8,499
80002bbe:	f0 09 19 00 	cp.h	r9,r8
80002bc2:	fe 98 ff 61 	brls	80002a84 <pbkdf2_func+0xb8>
				Ubuffer[i] = mac[i];
			}
			
			iteration_count++;
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
80002bc6:	ee c9 00 90 	sub	r9,r7,144
80002bca:	ee f8 ff 68 	ld.w	r8,r7[-152]
80002bce:	30 8a       	mov	r10,8
80002bd0:	12 9b       	mov	r11,r9
80002bd2:	10 9c       	mov	r12,r8
80002bd4:	f0 1f 00 10 	mcall	80002c14 <pbkdf2_func+0x248>
		memset(Fbuffer, 0, 32);		
80002bd8:	ee c8 00 90 	sub	r8,r7,144
80002bdc:	32 0a       	mov	r10,32
80002bde:	30 0b       	mov	r11,0
80002be0:	10 9c       	mov	r12,r8
80002be2:	f0 1f 00 0e 	mcall	80002c18 <pbkdf2_func+0x24c>
		block_num++;
80002be6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80002bea:	2f f8       	sub	r8,-1
80002bec:	ef 68 ff f7 	st.b	r7[-9],r8
	unsigned char Tbuffer[hLen] = {0};
	unsigned char Fbuffer[hLen] = {0};
	unsigned char total_blocks = hLen / hLen, block_num = 1;
	unsigned char *Salt = (unsigned char *)var_Salt.index;
	
	while (block_num <= total_blocks)
80002bf0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80002bf4:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80002bf8:	f0 09 18 00 	cp.b	r9,r8
80002bfc:	fe 98 ff 40 	brls	80002a7c <pbkdf2_func+0xb0>
		}
		xor_func((uint32_t *)derived_key, (uint32_t *)Fbuffer, 8);
		memset(Fbuffer, 0, 32);		
		block_num++;
	}
80002c00:	2d ad       	sub	sp,-152
80002c02:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c06:	00 00       	add	r0,r0
80002c08:	00 00       	add	r0,r0
80002c0a:	09 84       	ld.ub	r4,r4[0x0]
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	22 5c       	sub	r12,37
80002c10:	00 00       	add	r0,r0
80002c12:	08 64       	and	r4,r4
80002c14:	80 00       	ld.sh	r0,r0[0x0]
80002c16:	2d ac       	sub	r12,-38
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	e9 26 eb cd 	ld.sb	r6,r4[-5171]

80002c1c <encrypt_password>:
volatile uint32_t var_W_ticks = 0;
volatile uint256_t var_Salt;


uint32_t * encrypt_password(uint32_t *password)
{
80002c1c:	eb cd 40 80 	pushm	r7,lr
80002c20:	1a 97       	mov	r7,sp
80002c22:	21 1d       	sub	sp,68
80002c24:	ef 4c ff bc 	st.w	r7[-68],r12
	uint8_t temp_dk[32] = {0}, temp_dk_digest[32] = {0};
80002c28:	ee c8 00 20 	sub	r8,r7,32
80002c2c:	30 0a       	mov	r10,0
80002c2e:	30 0b       	mov	r11,0
80002c30:	f0 eb 00 00 	st.d	r8[0],r10
80002c34:	2f 88       	sub	r8,-8
80002c36:	30 0a       	mov	r10,0
80002c38:	30 0b       	mov	r11,0
80002c3a:	f0 eb 00 00 	st.d	r8[0],r10
80002c3e:	2f 88       	sub	r8,-8
80002c40:	30 0a       	mov	r10,0
80002c42:	30 0b       	mov	r11,0
80002c44:	f0 eb 00 00 	st.d	r8[0],r10
80002c48:	2f 88       	sub	r8,-8
80002c4a:	30 0a       	mov	r10,0
80002c4c:	30 0b       	mov	r11,0
80002c4e:	f0 eb 00 00 	st.d	r8[0],r10
80002c52:	2f 88       	sub	r8,-8
80002c54:	ee c8 00 40 	sub	r8,r7,64
80002c58:	30 0a       	mov	r10,0
80002c5a:	30 0b       	mov	r11,0
80002c5c:	f0 eb 00 00 	st.d	r8[0],r10
80002c60:	2f 88       	sub	r8,-8
80002c62:	30 0a       	mov	r10,0
80002c64:	30 0b       	mov	r11,0
80002c66:	f0 eb 00 00 	st.d	r8[0],r10
80002c6a:	2f 88       	sub	r8,-8
80002c6c:	30 0a       	mov	r10,0
80002c6e:	30 0b       	mov	r11,0
80002c70:	f0 eb 00 00 	st.d	r8[0],r10
80002c74:	2f 88       	sub	r8,-8
80002c76:	30 0a       	mov	r10,0
80002c78:	30 0b       	mov	r11,0
80002c7a:	f0 eb 00 00 	st.d	r8[0],r10
80002c7e:	2f 88       	sub	r8,-8
	pbkdf2_func((uint8_t *)password, temp_dk);
80002c80:	ee f8 ff bc 	ld.w	r8,r7[-68]
80002c84:	ee c9 00 20 	sub	r9,r7,32
80002c88:	12 9b       	mov	r11,r9
80002c8a:	10 9c       	mov	r12,r8
80002c8c:	f0 1f 00 0d 	mcall	80002cc0 <encrypt_password+0xa4>
	sha256(temp_dk, 32, temp_dk_digest);
80002c90:	ee c9 00 40 	sub	r9,r7,64
80002c94:	ee c8 00 20 	sub	r8,r7,32
80002c98:	12 9a       	mov	r10,r9
80002c9a:	32 0b       	mov	r11,32
80002c9c:	10 9c       	mov	r12,r8
80002c9e:	f0 1f 00 0a 	mcall	80002cc4 <encrypt_password+0xa8>
	apply_aes_encryption(&AVR32_AES, (uint32_t *)temp_dk_digest, 32, 0x00000000);
80002ca2:	ee c8 00 40 	sub	r8,r7,64
80002ca6:	30 09       	mov	r9,0
80002ca8:	32 0a       	mov	r10,32
80002caa:	10 9b       	mov	r11,r8
80002cac:	fc 7c 00 00 	mov	r12,-196608
80002cb0:	f0 1f 00 06 	mcall	80002cc8 <encrypt_password+0xac>
	return (uint32_t *)temp_dk_digest;	
80002cb4:	ee c8 00 40 	sub	r8,r7,64
}
80002cb8:	10 9c       	mov	r12,r8
80002cba:	2e fd       	sub	sp,-68
80002cbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cc0:	80 00       	ld.sh	r0,r0[0x0]
80002cc2:	29 cc       	sub	r12,-100
80002cc4:	80 00       	ld.sh	r0,r0[0x0]
80002cc6:	26 44       	sub	r4,100
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	40 40       	lddsp	r0,sp[0x10]

80002ccc <random_lcg>:


uint32_t random_lcg (void)
{
80002ccc:	eb cd 40 80 	pushm	r7,lr
80002cd0:	1a 97       	mov	r7,sp
	rseed = (rseed * 1103515245 + 12345) & RAND_MAX;
80002cd2:	48 a8       	lddpc	r8,80002cf8 <random_lcg+0x2c>
80002cd4:	70 09       	ld.w	r9,r8[0x0]
80002cd6:	e0 68 4e 6d 	mov	r8,20077
80002cda:	ea 18 41 c6 	orh	r8,0x41c6
80002cde:	f2 08 02 48 	mul	r8,r9,r8
80002ce2:	f0 c8 cf c7 	sub	r8,r8,-12345
80002ce6:	f3 d8 c0 1f 	bfextu	r9,r8,0x0,0x1f
80002cea:	48 48       	lddpc	r8,80002cf8 <random_lcg+0x2c>
80002cec:	91 09       	st.w	r8[0x0],r9
	return rseed;
80002cee:	48 38       	lddpc	r8,80002cf8 <random_lcg+0x2c>
80002cf0:	70 08       	ld.w	r8,r8[0x0]
}
80002cf2:	10 9c       	mov	r12,r8
80002cf4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cf8:	00 00       	add	r0,r0
80002cfa:	02 8c       	andn	r12,r1

80002cfc <calculate_salt>:

//void random_256 ()

void calculate_salt(void)
{
80002cfc:	eb cd 40 80 	pushm	r7,lr
80002d00:	1a 97       	mov	r7,sp
80002d02:	20 1d       	sub	sp,4
	uint32_t random_value = 0;
80002d04:	30 08       	mov	r8,0
80002d06:	ef 48 ff fc 	st.w	r7[-4],r8
	calculate_hash(pass_code, 8, var_Hkey.index); // Calculates sha256 of the keys pressed in var_W*10 msec interval and stores it in var_Hkey
80002d0a:	49 e9       	lddpc	r9,80002d80 <calculate_salt+0x84>
80002d0c:	49 e8       	lddpc	r8,80002d84 <calculate_salt+0x88>
80002d0e:	70 08       	ld.w	r8,r8[0x0]
80002d10:	12 9a       	mov	r10,r9
80002d12:	30 8b       	mov	r11,8
80002d14:	10 9c       	mov	r12,r8
80002d16:	f0 1f 00 1d 	mcall	80002d88 <calculate_salt+0x8c>
 	
	random_value = random_lcg();	
80002d1a:	f0 1f 00 1d 	mcall	80002d8c <calculate_salt+0x90>
80002d1e:	18 98       	mov	r8,r12
80002d20:	ef 48 ff fc 	st.w	r7[-4],r8
	
	calculate_hash(&random_value, 1, var_R.index);
80002d24:	49 b9       	lddpc	r9,80002d90 <calculate_salt+0x94>
80002d26:	ee c8 00 04 	sub	r8,r7,4
80002d2a:	12 9a       	mov	r10,r9
80002d2c:	30 1b       	mov	r11,1
80002d2e:	10 9c       	mov	r12,r8
80002d30:	f0 1f 00 16 	mcall	80002d88 <calculate_salt+0x8c>
	
	xor_func(var_R.index, var_Hkey.index, 8);
80002d34:	49 39       	lddpc	r9,80002d80 <calculate_salt+0x84>
80002d36:	49 78       	lddpc	r8,80002d90 <calculate_salt+0x94>
80002d38:	30 8a       	mov	r10,8
80002d3a:	12 9b       	mov	r11,r9
80002d3c:	10 9c       	mov	r12,r8
80002d3e:	f0 1f 00 16 	mcall	80002d94 <calculate_salt+0x98>
	
	calculate_hash(var_R.index, 8, var_T.index);
80002d42:	49 69       	lddpc	r9,80002d98 <calculate_salt+0x9c>
80002d44:	49 38       	lddpc	r8,80002d90 <calculate_salt+0x94>
80002d46:	12 9a       	mov	r10,r9
80002d48:	30 8b       	mov	r11,8
80002d4a:	10 9c       	mov	r12,r8
80002d4c:	f0 1f 00 0f 	mcall	80002d88 <calculate_salt+0x8c>
 	
	xor_func(var_Salt.index, var_T.index, 8);
80002d50:	49 29       	lddpc	r9,80002d98 <calculate_salt+0x9c>
80002d52:	49 38       	lddpc	r8,80002d9c <calculate_salt+0xa0>
80002d54:	30 8a       	mov	r10,8
80002d56:	12 9b       	mov	r11,r9
80002d58:	10 9c       	mov	r12,r8
80002d5a:	f0 1f 00 0f 	mcall	80002d94 <calculate_salt+0x98>
	
	if (enter_button_status == PASSCODE_FOR_SALT_ENTERED)
80002d5e:	49 18       	lddpc	r8,80002da0 <calculate_salt+0xa4>
80002d60:	11 88       	ld.ub	r8,r8[0x0]
80002d62:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002d66:	30 68       	mov	r8,6
80002d68:	f0 09 18 00 	cp.b	r9,r8
80002d6c:	c0 41       	brne	80002d74 <calculate_salt+0x78>
	{
		save_salt_to_mcu();
80002d6e:	f0 1f 00 0e 	mcall	80002da4 <calculate_salt+0xa8>
80002d72:	c0 38       	rjmp	80002d78 <calculate_salt+0x7c>
	}
	else
	{
		Start_W_timer();	
80002d74:	f0 1f 00 0d 	mcall	80002da8 <calculate_salt+0xac>
	}
	
}
80002d78:	2f fd       	sub	sp,-4
80002d7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d7e:	00 00       	add	r0,r0
80002d80:	00 00       	add	r0,r0
80002d82:	09 24       	ld.uh	r4,r4++
80002d84:	00 00       	add	r0,r0
80002d86:	09 a4       	ld.ub	r4,r4[0x2]
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	2e f4       	sub	r4,-17
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	2c cc       	sub	r12,-52
80002d90:	00 00       	add	r0,r0
80002d92:	09 64       	ld.uh	r4,--r4
80002d94:	80 00       	ld.sh	r0,r0[0x0]
80002d96:	2d ac       	sub	r12,-38
80002d98:	00 00       	add	r0,r0
80002d9a:	09 44       	ld.w	r4,--r4
80002d9c:	00 00       	add	r0,r0
80002d9e:	09 84       	ld.ub	r4,r4[0x0]
80002da0:	00 00       	add	r0,r0
80002da2:	03 da       	ld.ub	r10,r1[0x5]
80002da4:	80 00       	ld.sh	r0,r0[0x0]
80002da6:	2e 18       	sub	r8,-31
80002da8:	80 00       	ld.sh	r0,r0[0x0]
80002daa:	2e b0       	sub	r0,-21

80002dac <xor_func>:

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
80002dac:	eb cd 40 80 	pushm	r7,lr
80002db0:	1a 97       	mov	r7,sp
80002db2:	20 4d       	sub	sp,16
80002db4:	ef 4c ff f8 	st.w	r7[-8],r12
80002db8:	ef 4b ff f4 	st.w	r7[-12],r11
80002dbc:	14 98       	mov	r8,r10
80002dbe:	ef 68 ff f0 	st.b	r7[-16],r8
	unsigned char i = 0;
80002dc2:	30 08       	mov	r8,0
80002dc4:	ef 68 ff ff 	st.b	r7[-1],r8
	while (i++ < len)
80002dc8:	c1 58       	rjmp	80002df2 <xor_func+0x46>
	{
		*value1 = *value1 ^ *value2;
80002dca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dce:	70 09       	ld.w	r9,r8[0x0]
80002dd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002dd4:	70 08       	ld.w	r8,r8[0x0]
80002dd6:	10 59       	eor	r9,r8
80002dd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ddc:	91 09       	st.w	r8[0x0],r9
		value1++;	value2++;
80002dde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002de2:	2f c8       	sub	r8,-4
80002de4:	ef 48 ff f8 	st.w	r7[-8],r8
80002de8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002dec:	2f c8       	sub	r8,-4
80002dee:	ef 48 ff f4 	st.w	r7[-12],r8
}

void xor_func (uint32_t *value1, uint32_t *value2, uint8_t len)
{
	unsigned char i = 0;
	while (i++ < len)
80002df2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002df6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002dfa:	f0 09 18 00 	cp.b	r9,r8
80002dfe:	5f 38       	srlo	r8
80002e00:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002e04:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e08:	2f f8       	sub	r8,-1
80002e0a:	ef 68 ff ff 	st.b	r7[-1],r8
80002e0e:	58 09       	cp.w	r9,0
80002e10:	cd d1       	brne	80002dca <xor_func+0x1e>
	{
		*value1 = *value1 ^ *value2;
		value1++;	value2++;
	}
}
80002e12:	2f cd       	sub	sp,-16
80002e14:	e3 cd 80 80 	ldm	sp++,r7,pc

80002e18 <save_salt_to_mcu>:

void save_salt_to_mcu(void)
{
80002e18:	eb cd 40 80 	pushm	r7,lr
80002e1c:	1a 97       	mov	r7,sp
80002e1e:	20 2d       	sub	sp,8
	//volatile salt_t *salt = &SALT_STRUCT;
	uint32_t *temp_encypted_password;
	uint8_t i;
	
	temp_encypted_password = encrypt_password(temp_password1);
80002e20:	48 cc       	lddpc	r12,80002e50 <save_salt_to_mcu+0x38>
80002e22:	f0 1f 00 0d 	mcall	80002e54 <save_salt_to_mcu+0x3c>
80002e26:	18 98       	mov	r8,r12
80002e28:	ef 48 ff f8 	st.w	r7[-8],r8
	memcpy((uint8_t *)Stored_values_ram.unlock_password, (const uint8_t *)temp_encypted_password, 32);
80002e2c:	32 0a       	mov	r10,32
80002e2e:	ee fb ff f8 	ld.w	r11,r7[-8]
80002e32:	48 ac       	lddpc	r12,80002e58 <save_salt_to_mcu+0x40>
80002e34:	f0 1f 00 0a 	mcall	80002e5c <save_salt_to_mcu+0x44>
	memcpy((uint8_t *)Stored_values_ram.salt, (const uint8_t *)var_Salt.index, 32);
80002e38:	48 88       	lddpc	r8,80002e58 <save_salt_to_mcu+0x40>
80002e3a:	28 08       	sub	r8,-128
80002e3c:	32 0a       	mov	r10,32
80002e3e:	48 9b       	lddpc	r11,80002e60 <save_salt_to_mcu+0x48>
80002e40:	10 9c       	mov	r12,r8
80002e42:	f0 1f 00 07 	mcall	80002e5c <save_salt_to_mcu+0x44>
	Update_stored_values();
80002e46:	f0 1f 00 08 	mcall	80002e64 <save_salt_to_mcu+0x4c>
	
}
80002e4a:	2f ed       	sub	sp,-8
80002e4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e50:	00 00       	add	r0,r0
80002e52:	02 68       	and	r8,r1
80002e54:	80 00       	ld.sh	r0,r0[0x0]
80002e56:	2c 1c       	sub	r12,-63
80002e58:	00 00       	add	r0,r0
80002e5a:	08 84       	andn	r4,r4
80002e5c:	80 00       	ld.sh	r0,r0[0x0]
80002e5e:	e7 de 00 00 	ldins.h	lr:b,r3[0]
80002e62:	09 84       	ld.ub	r4,r4[0x0]
80002e64:	80 00       	ld.sh	r0,r0[0x0]
80002e66:	2e 68       	sub	r8,-26

80002e68 <Update_stored_values>:

void Update_stored_values(void)
{
80002e68:	eb cd 40 80 	pushm	r7,lr
80002e6c:	1a 97       	mov	r7,sp
	flashc_memcpy((void *)&Stored_values_flash, (void *)&Stored_values_ram, sizeof(Stored_values_ram), true);
80002e6e:	30 19       	mov	r9,1
80002e70:	e0 6a 00 a0 	mov	r10,160
80002e74:	48 3b       	lddpc	r11,80002e80 <Update_stored_values+0x18>
80002e76:	48 4c       	lddpc	r12,80002e84 <Update_stored_values+0x1c>
80002e78:	f0 1f 00 04 	mcall	80002e88 <Update_stored_values+0x20>
}
80002e7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e80:	00 00       	add	r0,r0
80002e82:	08 84       	andn	r4,r4
80002e84:	80 03       	ld.sh	r3,r0[0x0]
80002e86:	fe 00       	*unknown*
80002e88:	80 00       	ld.sh	r0,r0[0x0]
80002e8a:	88 24       	ld.sh	r4,r4[0x4]

80002e8c <Load_stored_values>:

void Load_stored_values(void)
{
80002e8c:	eb cd 40 80 	pushm	r7,lr
80002e90:	1a 97       	mov	r7,sp
	memcpy_code2ram((void *)&Stored_values_ram, (uint8_t *)&Stored_values_flash, sizeof(Stored_values_ram));
80002e92:	e0 6a 00 a0 	mov	r10,160
80002e96:	48 4b       	lddpc	r11,80002ea4 <Load_stored_values+0x18>
80002e98:	48 4c       	lddpc	r12,80002ea8 <Load_stored_values+0x1c>
80002e9a:	f0 1f 00 05 	mcall	80002eac <Load_stored_values+0x20>
}
80002e9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ea2:	00 00       	add	r0,r0
80002ea4:	80 03       	ld.sh	r3,r0[0x0]
80002ea6:	fe 00 00 00 	add	r0,pc,r0
80002eaa:	08 84       	andn	r4,r4
80002eac:	80 00       	ld.sh	r0,r0[0x0]
80002eae:	e7 de       	*unknown*

80002eb0 <Start_W_timer>:

void Start_W_timer(void)
{
80002eb0:	eb cd 40 80 	pushm	r7,lr
80002eb4:	1a 97       	mov	r7,sp
	var_W = random_lcg() % 500 + 50;
80002eb6:	f0 1f 00 0d 	mcall	80002ee8 <Start_W_timer+0x38>
80002eba:	18 9a       	mov	r10,r12
80002ebc:	e0 68 4d d3 	mov	r8,19923
80002ec0:	ea 18 10 62 	orh	r8,0x1062
80002ec4:	f4 08 06 48 	mulu.d	r8,r10,r8
80002ec8:	f2 08 16 05 	lsr	r8,r9,0x5
80002ecc:	e0 69 01 f4 	mov	r9,500
80002ed0:	b3 38       	mul	r8,r9
80002ed2:	f4 08 01 08 	sub	r8,r10,r8
80002ed6:	f0 c9 ff ce 	sub	r9,r8,-50
80002eda:	48 58       	lddpc	r8,80002eec <Start_W_timer+0x3c>
80002edc:	91 09       	st.w	r8[0x0],r9
	var_W_ticks = 0;	
80002ede:	48 58       	lddpc	r8,80002ef0 <Start_W_timer+0x40>
80002ee0:	30 09       	mov	r9,0
80002ee2:	91 09       	st.w	r8[0x0],r9
80002ee4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ee8:	80 00       	ld.sh	r0,r0[0x0]
80002eea:	2c cc       	sub	r12,-52
80002eec:	00 00       	add	r0,r0
80002eee:	01 28       	ld.uh	r8,r0++
80002ef0:	00 00       	add	r0,r0
80002ef2:	02 90       	mov	r0,r1

80002ef4 <calculate_hash>:
80002ef4:	eb cd 40 c0 	pushm	r6-r7,lr
80002ef8:	1a 97       	mov	r7,sp
80002efa:	20 ed       	sub	sp,56
80002efc:	ef 4c ff d0 	st.w	r7[-48],r12
80002f00:	16 98       	mov	r8,r11
80002f02:	ef 4a ff c8 	st.w	r7[-56],r10
80002f06:	ef 68 ff cc 	st.b	r7[-52],r8
80002f0a:	fe f8 03 8a 	ld.w	r8,pc[906]
80002f0e:	ef 48 ff e0 	st.w	r7[-32],r8
80002f12:	fe f8 03 86 	ld.w	r8,pc[902]
80002f16:	ef 48 ff ec 	st.w	r7[-20],r8
80002f1a:	30 08       	mov	r8,0
80002f1c:	ef 48 ff d4 	st.w	r7[-44],r8
80002f20:	c1 68       	rjmp	80002f4c <calculate_hash+0x58>
80002f22:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f26:	a3 68       	lsl	r8,0x2
80002f28:	ee f9 ff e0 	ld.w	r9,r7[-32]
80002f2c:	f2 08 00 08 	add	r8,r9,r8
80002f30:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002f34:	a3 69       	lsl	r9,0x2
80002f36:	ee fa ff d0 	ld.w	r10,r7[-48]
80002f3a:	f4 09 00 09 	add	r9,r10,r9
80002f3e:	72 09       	ld.w	r9,r9[0x0]
80002f40:	91 09       	st.w	r8[0x0],r9
80002f42:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f46:	2f f8       	sub	r8,-1
80002f48:	ef 48 ff d4 	st.w	r7[-44],r8
80002f4c:	ef 39 ff cc 	ld.ub	r9,r7[-52]
80002f50:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f54:	10 39       	cp.w	r9,r8
80002f56:	fe 99 ff e6 	brgt	80002f22 <calculate_hash+0x2e>
80002f5a:	ef 38 ff cc 	ld.ub	r8,r7[-52]
80002f5e:	a3 68       	lsl	r8,0x2
80002f60:	5c 58       	castu.b	r8
80002f62:	10 9c       	mov	r12,r8
80002f64:	f0 1f 00 ce 	mcall	8000329c <calculate_hash+0x3a8>
80002f68:	fe f8 03 38 	ld.w	r8,pc[824]
80002f6c:	ef 48 ff e4 	st.w	r7[-28],r8
80002f70:	fe f8 03 24 	ld.w	r8,pc[804]
80002f74:	ef 48 ff e8 	st.w	r7[-24],r8
80002f78:	30 08       	mov	r8,0
80002f7a:	ef 48 ff d4 	st.w	r7[-44],r8
80002f7e:	c1 68       	rjmp	80002faa <calculate_hash+0xb6>
80002f80:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f84:	a3 68       	lsl	r8,0x2
80002f86:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002f8a:	f2 08 00 08 	add	r8,r9,r8
80002f8e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002f92:	a3 69       	lsl	r9,0x2
80002f94:	ee fa ff e8 	ld.w	r10,r7[-24]
80002f98:	f4 09 00 09 	add	r9,r10,r9
80002f9c:	72 09       	ld.w	r9,r9[0x0]
80002f9e:	91 09       	st.w	r8[0x0],r9
80002fa0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fa4:	2f f8       	sub	r8,-1
80002fa6:	ef 48 ff d4 	st.w	r7[-44],r8
80002faa:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fae:	58 f8       	cp.w	r8,15
80002fb0:	fe 9a ff e8 	brle	80002f80 <calculate_hash+0x8c>
80002fb4:	31 08       	mov	r8,16
80002fb6:	ef 48 ff d4 	st.w	r7[-44],r8
80002fba:	c7 58       	rjmp	800030a4 <calculate_hash+0x1b0>
80002fbc:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fc0:	f0 c9 00 0f 	sub	r9,r8,15
80002fc4:	fe f8 02 dc 	ld.w	r8,pc[732]
80002fc8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002fcc:	30 7b       	mov	r11,7
80002fce:	10 9c       	mov	r12,r8
80002fd0:	f0 1f 00 b5 	mcall	800032a4 <calculate_hash+0x3b0>
80002fd4:	18 96       	mov	r6,r12
80002fd6:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002fda:	f0 c9 00 0f 	sub	r9,r8,15
80002fde:	fe f8 02 c2 	ld.w	r8,pc[706]
80002fe2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002fe6:	31 2b       	mov	r11,18
80002fe8:	10 9c       	mov	r12,r8
80002fea:	f0 1f 00 af 	mcall	800032a4 <calculate_hash+0x3b0>
80002fee:	18 98       	mov	r8,r12
80002ff0:	ed e8 20 09 	eor	r9,r6,r8
80002ff4:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ff8:	f0 ca 00 0f 	sub	r10,r8,15
80002ffc:	fe f8 02 a4 	ld.w	r8,pc[676]
80003000:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003004:	a3 98       	lsr	r8,0x3
80003006:	f3 e8 20 08 	eor	r8,r9,r8
8000300a:	ef 48 ff d8 	st.w	r7[-40],r8
8000300e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003012:	f0 c9 00 02 	sub	r9,r8,2
80003016:	fe f8 02 8a 	ld.w	r8,pc[650]
8000301a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000301e:	31 1b       	mov	r11,17
80003020:	10 9c       	mov	r12,r8
80003022:	f0 1f 00 a1 	mcall	800032a4 <calculate_hash+0x3b0>
80003026:	18 96       	mov	r6,r12
80003028:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000302c:	f0 c9 00 02 	sub	r9,r8,2
80003030:	fe f8 02 70 	ld.w	r8,pc[624]
80003034:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003038:	31 3b       	mov	r11,19
8000303a:	10 9c       	mov	r12,r8
8000303c:	f0 1f 00 9a 	mcall	800032a4 <calculate_hash+0x3b0>
80003040:	18 98       	mov	r8,r12
80003042:	ed e8 20 09 	eor	r9,r6,r8
80003046:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000304a:	f0 ca 00 02 	sub	r10,r8,2
8000304e:	fe f8 02 52 	ld.w	r8,pc[594]
80003052:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003056:	ab 88       	lsr	r8,0xa
80003058:	f3 e8 20 08 	eor	r8,r9,r8
8000305c:	ef 48 ff dc 	st.w	r7[-36],r8
80003060:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003064:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003068:	f0 ca 00 10 	sub	r10,r8,16
8000306c:	fe f8 02 34 	ld.w	r8,pc[564]
80003070:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80003074:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003078:	10 0a       	add	r10,r8
8000307a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000307e:	f0 cb 00 07 	sub	r11,r8,7
80003082:	fe f8 02 1e 	ld.w	r8,pc[542]
80003086:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000308a:	10 0a       	add	r10,r8
8000308c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003090:	10 0a       	add	r10,r8
80003092:	fe f8 02 0e 	ld.w	r8,pc[526]
80003096:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000309a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000309e:	2f f8       	sub	r8,-1
800030a0:	ef 48 ff d4 	st.w	r7[-44],r8
800030a4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030a8:	e0 48 00 3f 	cp.w	r8,63
800030ac:	fe 9a ff 88 	brle	80002fbc <calculate_hash+0xc8>
800030b0:	30 08       	mov	r8,0
800030b2:	ef 48 ff d4 	st.w	r7[-44],r8
800030b6:	c1 38       	rjmp	800030dc <calculate_hash+0x1e8>
800030b8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030bc:	a3 68       	lsl	r8,0x2
800030be:	ee f9 ff ec 	ld.w	r9,r7[-20]
800030c2:	f2 08 00 08 	add	r8,r9,r8
800030c6:	ee fa ff d4 	ld.w	r10,r7[-44]
800030ca:	4f 89       	lddpc	r9,800032a8 <calculate_hash+0x3b4>
800030cc:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800030d0:	91 09       	st.w	r8[0x0],r9
800030d2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030d6:	2f f8       	sub	r8,-1
800030d8:	ef 48 ff d4 	st.w	r7[-44],r8
800030dc:	ee f8 ff d4 	ld.w	r8,r7[-44]
800030e0:	58 78       	cp.w	r8,7
800030e2:	fe 9a ff eb 	brle	800030b8 <calculate_hash+0x1c4>
800030e6:	30 08       	mov	r8,0
800030e8:	ef 48 ff d4 	st.w	r7[-44],r8
800030ec:	ca 68       	rjmp	80003238 <calculate_hash+0x344>
800030ee:	4e b8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
800030f0:	70 08       	ld.w	r8,r8[0x0]
800030f2:	30 2b       	mov	r11,2
800030f4:	10 9c       	mov	r12,r8
800030f6:	f0 1f 00 6c 	mcall	800032a4 <calculate_hash+0x3b0>
800030fa:	18 96       	mov	r6,r12
800030fc:	4e 78       	lddpc	r8,80003298 <calculate_hash+0x3a4>
800030fe:	70 08       	ld.w	r8,r8[0x0]
80003100:	30 db       	mov	r11,13
80003102:	10 9c       	mov	r12,r8
80003104:	f0 1f 00 68 	mcall	800032a4 <calculate_hash+0x3b0>
80003108:	18 98       	mov	r8,r12
8000310a:	10 56       	eor	r6,r8
8000310c:	4e 38       	lddpc	r8,80003298 <calculate_hash+0x3a4>
8000310e:	70 08       	ld.w	r8,r8[0x0]
80003110:	31 6b       	mov	r11,22
80003112:	10 9c       	mov	r12,r8
80003114:	f0 1f 00 64 	mcall	800032a4 <calculate_hash+0x3b0>
80003118:	18 98       	mov	r8,r12
8000311a:	ed e8 20 08 	eor	r8,r6,r8
8000311e:	ef 48 ff d8 	st.w	r7[-40],r8
80003122:	4d e8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
80003124:	70 09       	ld.w	r9,r8[0x0]
80003126:	4d d8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
80003128:	70 18       	ld.w	r8,r8[0x4]
8000312a:	10 69       	and	r9,r8
8000312c:	4d b8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
8000312e:	70 0a       	ld.w	r10,r8[0x0]
80003130:	4d a8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
80003132:	70 28       	ld.w	r8,r8[0x8]
80003134:	f5 e8 00 08 	and	r8,r10,r8
80003138:	10 59       	eor	r9,r8
8000313a:	4d 88       	lddpc	r8,80003298 <calculate_hash+0x3a4>
8000313c:	70 1a       	ld.w	r10,r8[0x4]
8000313e:	4d 78       	lddpc	r8,80003298 <calculate_hash+0x3a4>
80003140:	70 28       	ld.w	r8,r8[0x8]
80003142:	f5 e8 00 08 	and	r8,r10,r8
80003146:	f3 e8 20 08 	eor	r8,r9,r8
8000314a:	ef 48 ff f0 	st.w	r7[-16],r8
8000314e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003152:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003156:	f2 08 00 08 	add	r8,r9,r8
8000315a:	ef 48 ff f4 	st.w	r7[-12],r8
8000315e:	4c f8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
80003160:	70 48       	ld.w	r8,r8[0x10]
80003162:	30 6b       	mov	r11,6
80003164:	10 9c       	mov	r12,r8
80003166:	f0 1f 00 50 	mcall	800032a4 <calculate_hash+0x3b0>
8000316a:	18 96       	mov	r6,r12
8000316c:	4c b8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
8000316e:	70 48       	ld.w	r8,r8[0x10]
80003170:	30 bb       	mov	r11,11
80003172:	10 9c       	mov	r12,r8
80003174:	f0 1f 00 4c 	mcall	800032a4 <calculate_hash+0x3b0>
80003178:	18 98       	mov	r8,r12
8000317a:	10 56       	eor	r6,r8
8000317c:	4c 78       	lddpc	r8,80003298 <calculate_hash+0x3a4>
8000317e:	70 48       	ld.w	r8,r8[0x10]
80003180:	31 9b       	mov	r11,25
80003182:	10 9c       	mov	r12,r8
80003184:	f0 1f 00 48 	mcall	800032a4 <calculate_hash+0x3b0>
80003188:	18 98       	mov	r8,r12
8000318a:	ed e8 20 08 	eor	r8,r6,r8
8000318e:	ef 48 ff dc 	st.w	r7[-36],r8
80003192:	4c 28       	lddpc	r8,80003298 <calculate_hash+0x3a4>
80003194:	70 49       	ld.w	r9,r8[0x10]
80003196:	4c 18       	lddpc	r8,80003298 <calculate_hash+0x3a4>
80003198:	70 58       	ld.w	r8,r8[0x14]
8000319a:	10 69       	and	r9,r8
8000319c:	4b f8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
8000319e:	70 48       	ld.w	r8,r8[0x10]
800031a0:	f0 0a 11 ff 	rsub	r10,r8,-1
800031a4:	4b d8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
800031a6:	70 68       	ld.w	r8,r8[0x18]
800031a8:	f5 e8 00 08 	and	r8,r10,r8
800031ac:	f3 e8 20 08 	eor	r8,r9,r8
800031b0:	ef 48 ff f8 	st.w	r7[-8],r8
800031b4:	4b 98       	lddpc	r8,80003298 <calculate_hash+0x3a4>
800031b6:	70 79       	ld.w	r9,r8[0x1c]
800031b8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800031bc:	10 09       	add	r9,r8
800031be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031c2:	10 09       	add	r9,r8
800031c4:	ee fa ff d4 	ld.w	r10,r7[-44]
800031c8:	4b 98       	lddpc	r8,800032ac <calculate_hash+0x3b8>
800031ca:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800031ce:	10 09       	add	r9,r8
800031d0:	ee fa ff d4 	ld.w	r10,r7[-44]
800031d4:	4b 38       	lddpc	r8,800032a0 <calculate_hash+0x3ac>
800031d6:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800031da:	f2 08 00 08 	add	r8,r9,r8
800031de:	ef 48 ff fc 	st.w	r7[-4],r8
800031e2:	4a e8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
800031e4:	70 69       	ld.w	r9,r8[0x18]
800031e6:	4a d8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
800031e8:	91 79       	st.w	r8[0x1c],r9
800031ea:	4a c8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
800031ec:	70 59       	ld.w	r9,r8[0x14]
800031ee:	4a b8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
800031f0:	91 69       	st.w	r8[0x18],r9
800031f2:	4a a8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
800031f4:	70 49       	ld.w	r9,r8[0x10]
800031f6:	4a 98       	lddpc	r8,80003298 <calculate_hash+0x3a4>
800031f8:	91 59       	st.w	r8[0x14],r9
800031fa:	4a 88       	lddpc	r8,80003298 <calculate_hash+0x3a4>
800031fc:	70 39       	ld.w	r9,r8[0xc]
800031fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003202:	10 09       	add	r9,r8
80003204:	4a 58       	lddpc	r8,80003298 <calculate_hash+0x3a4>
80003206:	91 49       	st.w	r8[0x10],r9
80003208:	4a 48       	lddpc	r8,80003298 <calculate_hash+0x3a4>
8000320a:	70 29       	ld.w	r9,r8[0x8]
8000320c:	4a 38       	lddpc	r8,80003298 <calculate_hash+0x3a4>
8000320e:	91 39       	st.w	r8[0xc],r9
80003210:	4a 28       	lddpc	r8,80003298 <calculate_hash+0x3a4>
80003212:	70 19       	ld.w	r9,r8[0x4]
80003214:	4a 18       	lddpc	r8,80003298 <calculate_hash+0x3a4>
80003216:	91 29       	st.w	r8[0x8],r9
80003218:	4a 08       	lddpc	r8,80003298 <calculate_hash+0x3a4>
8000321a:	70 09       	ld.w	r9,r8[0x0]
8000321c:	49 f8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
8000321e:	91 19       	st.w	r8[0x4],r9
80003220:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003224:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003228:	10 09       	add	r9,r8
8000322a:	49 c8       	lddpc	r8,80003298 <calculate_hash+0x3a4>
8000322c:	91 09       	st.w	r8[0x0],r9
8000322e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003232:	2f f8       	sub	r8,-1
80003234:	ef 48 ff d4 	st.w	r7[-44],r8
80003238:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000323c:	e0 48 00 3f 	cp.w	r8,63
80003240:	fe 9a ff 57 	brle	800030ee <calculate_hash+0x1fa>
80003244:	30 08       	mov	r8,0
80003246:	ef 48 ff d4 	st.w	r7[-44],r8
8000324a:	c1 d8       	rjmp	80003284 <calculate_hash+0x390>
8000324c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003250:	a3 68       	lsl	r8,0x2
80003252:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003256:	f2 08 00 08 	add	r8,r9,r8
8000325a:	ee fa ff d4 	ld.w	r10,r7[-44]
8000325e:	49 39       	lddpc	r9,800032a8 <calculate_hash+0x3b4>
80003260:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80003264:	ee f9 ff d4 	ld.w	r9,r7[-44]
80003268:	a3 69       	lsl	r9,0x2
8000326a:	ee fb ff ec 	ld.w	r11,r7[-20]
8000326e:	f6 09 00 09 	add	r9,r11,r9
80003272:	72 09       	ld.w	r9,r9[0x0]
80003274:	f4 09 00 09 	add	r9,r10,r9
80003278:	91 09       	st.w	r8[0x0],r9
8000327a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000327e:	2f f8       	sub	r8,-1
80003280:	ef 48 ff d4 	st.w	r7[-44],r8
80003284:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003288:	58 78       	cp.w	r8,7
8000328a:	fe 9a ff e1 	brle	8000324c <calculate_hash+0x358>
8000328e:	2f 2d       	sub	sp,-56
80003290:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003294:	00 00       	add	r0,r0
80003296:	02 94       	mov	r4,r1
80003298:	00 00       	add	r0,r0
8000329a:	09 a8       	ld.ub	r8,r4[0x2]
8000329c:	80 00       	ld.sh	r0,r0[0x0]
8000329e:	32 b0       	mov	r0,43
800032a0:	00 00       	add	r0,r0
800032a2:	02 d4       	st.w	--r1,r4
800032a4:	80 00       	ld.sh	r0,r0[0x0]
800032a6:	33 28       	mov	r8,50
800032a8:	80 00       	ld.sh	r0,r0[0x0]
800032aa:	ec 20 80 00 	sub	r0,819200
800032ae:	ec 40 eb cd 	cp.w	r0,846797

800032b0 <PadtheMessage>:
800032b0:	eb cd 40 80 	pushm	r7,lr
800032b4:	1a 97       	mov	r7,sp
800032b6:	20 3d       	sub	sp,12
800032b8:	18 98       	mov	r8,r12
800032ba:	ef 68 ff f4 	st.b	r7[-12],r8
800032be:	49 a8       	lddpc	r8,80003324 <PadtheMessage+0x74>
800032c0:	ef 48 ff fc 	st.w	r7[-4],r8
800032c4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800032c8:	a3 78       	lsl	r8,0x3
800032ca:	ef 58 ff fa 	st.h	r7[-6],r8
800032ce:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800032d2:	49 5a       	lddpc	r10,80003324 <PadtheMessage+0x74>
800032d4:	38 08       	mov	r8,-128
800032d6:	f4 09 0b 08 	st.b	r10[r9],r8
800032da:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800032de:	2f f8       	sub	r8,-1
800032e0:	ef 68 ff f4 	st.b	r7[-12],r8
800032e4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800032e8:	ef 68 ff f9 	st.b	r7[-7],r8
800032ec:	c0 c8       	rjmp	80003304 <PadtheMessage+0x54>
800032ee:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800032f2:	48 da       	lddpc	r10,80003324 <PadtheMessage+0x74>
800032f4:	30 08       	mov	r8,0
800032f6:	f4 09 0b 08 	st.b	r10[r9],r8
800032fa:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800032fe:	2f f8       	sub	r8,-1
80003300:	ef 68 ff f9 	st.b	r7[-7],r8
80003304:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80003308:	33 f8       	mov	r8,63
8000330a:	f0 09 18 00 	cp.b	r9,r8
8000330e:	fe 98 ff f0 	brls	800032ee <PadtheMessage+0x3e>
80003312:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003316:	2c 48       	sub	r8,-60
80003318:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8000331c:	91 09       	st.w	r8[0x0],r9
8000331e:	2f dd       	sub	sp,-12
80003320:	e3 cd 80 80 	ldm	sp++,r7,pc
80003324:	00 00       	add	r0,r0
80003326:	02 94       	mov	r4,r1

80003328 <Rotate_right>:
80003328:	eb cd 40 80 	pushm	r7,lr
8000332c:	1a 97       	mov	r7,sp
8000332e:	20 3d       	sub	sp,12
80003330:	ef 4c ff f8 	st.w	r7[-8],r12
80003334:	ef 4b ff f4 	st.w	r7[-12],r11
80003338:	30 29       	mov	r9,2
8000333a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000333e:	f2 08 09 48 	lsl	r8,r9,r8
80003342:	20 18       	sub	r8,1
80003344:	ef 48 ff fc 	st.w	r7[-4],r8
80003348:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000334c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003350:	f2 08 0a 49 	lsr	r9,r9,r8
80003354:	ee fa ff f8 	ld.w	r10,r7[-8]
80003358:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000335c:	10 6a       	and	r10,r8
8000335e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003362:	f0 08 11 20 	rsub	r8,r8,32
80003366:	f4 08 09 48 	lsl	r8,r10,r8
8000336a:	f3 e8 10 08 	or	r8,r9,r8
8000336e:	10 9c       	mov	r12,r8
80003370:	2f dd       	sub	sp,-12
80003372:	e3 cd 80 80 	ldm	sp++,r7,pc
80003376:	d7 03       	nop

80003378 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
80003378:	eb cd 40 80 	pushm	r7,lr
8000337c:	1a 97       	mov	r7,sp
8000337e:	20 1d       	sub	sp,4
80003380:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003384:	ee fb ff fc 	ld.w	r11,r7[-4]
80003388:	30 1c       	mov	r12,1
8000338a:	f0 1f 00 03 	mcall	80003394 <sysclk_enable_hsb_module+0x1c>
}
8000338e:	2f fd       	sub	sp,-4
80003390:	e3 cd 80 80 	ldm	sp++,r7,pc
80003394:	80 00       	ld.sh	r0,r0[0x0]
80003396:	bf 2c       	st.d	pc++,r12

80003398 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80003398:	eb cd 40 80 	pushm	r7,lr
8000339c:	1a 97       	mov	r7,sp
8000339e:	20 1d       	sub	sp,4
800033a0:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800033a4:	ee fb ff fc 	ld.w	r11,r7[-4]
800033a8:	30 2c       	mov	r12,2
800033aa:	f0 1f 00 03 	mcall	800033b4 <sysclk_enable_pba_module+0x1c>
}
800033ae:	2f fd       	sub	sp,-4
800033b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800033b4:	80 00       	ld.sh	r0,r0[0x0]
800033b6:	bf 2c       	st.d	pc++,r12

800033b8 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
800033b8:	eb cd 40 80 	pushm	r7,lr
800033bc:	1a 97       	mov	r7,sp
800033be:	20 1d       	sub	sp,4
800033c0:	ef 4c ff fc 	st.w	r7[-4],r12
	switch ((uintptr_t)module) {
800033c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033c8:	fe 58 14 00 	cp.w	r8,-60416
800033cc:	e0 80 00 a5 	breq	80003516 <sysclk_enable_peripheral_clock+0x15e>
800033d0:	e0 8b 00 40 	brhi	80003450 <sysclk_enable_peripheral_clock+0x98>
800033d4:	fe 48 24 00 	cp.w	r8,-121856
800033d8:	e0 80 00 d9 	breq	8000358a <sysclk_enable_peripheral_clock+0x1d2>
800033dc:	e0 8b 00 1e 	brhi	80003418 <sysclk_enable_peripheral_clock+0x60>
800033e0:	fe 48 10 00 	cp.w	r8,-126976
800033e4:	e0 80 00 b9 	breq	80003556 <sysclk_enable_peripheral_clock+0x19e>
800033e8:	e0 8b 00 0b 	brhi	800033fe <sysclk_enable_peripheral_clock+0x46>
800033ec:	fc 58 00 00 	cp.w	r8,-196608
800033f0:	e0 80 00 e0 	breq	800035b0 <sysclk_enable_peripheral_clock+0x1f8>
800033f4:	fe 48 00 00 	cp.w	r8,-131072
800033f8:	e0 80 00 b3 	breq	8000355e <sysclk_enable_peripheral_clock+0x1a6>
		break;
#endif

	default:
		Assert(false);
		return;
800033fc:	cd e8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800033fe:	fe 48 1c 00 	cp.w	r8,-123904
80003402:	e0 80 00 bc 	breq	8000357a <sysclk_enable_peripheral_clock+0x1c2>
80003406:	fe 48 20 00 	cp.w	r8,-122880
8000340a:	e0 80 00 bc 	breq	80003582 <sysclk_enable_peripheral_clock+0x1ca>
8000340e:	fe 48 14 00 	cp.w	r8,-125952
80003412:	e0 80 00 ad 	breq	8000356c <sysclk_enable_peripheral_clock+0x1b4>
		break;
#endif

	default:
		Assert(false);
		return;
80003416:	cd 18       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003418:	fe 58 00 00 	cp.w	r8,-65536
8000341c:	c5 60       	breq	800034c8 <sysclk_enable_peripheral_clock+0x110>
8000341e:	e0 8b 00 0f 	brhi	8000343c <sysclk_enable_peripheral_clock+0x84>
80003422:	fe 48 40 00 	cp.w	r8,-114688
80003426:	e0 80 00 b6 	breq	80003592 <sysclk_enable_peripheral_clock+0x1da>
8000342a:	fe 48 80 00 	cp.w	r8,-98304
8000342e:	e0 80 00 bd 	breq	800035a8 <sysclk_enable_peripheral_clock+0x1f0>
80003432:	fe 48 28 00 	cp.w	r8,-120832
80003436:	e0 80 00 b2 	breq	8000359a <sysclk_enable_peripheral_clock+0x1e2>
		break;
#endif

	default:
		Assert(false);
		return;
8000343a:	cb f8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000343c:	fe 58 0c 00 	cp.w	r8,-62464
80003440:	c4 b0       	breq	800034d6 <sysclk_enable_peripheral_clock+0x11e>
80003442:	fe 58 10 00 	cp.w	r8,-61440
80003446:	c3 d0       	breq	800034c0 <sysclk_enable_peripheral_clock+0x108>
80003448:	fe 58 08 00 	cp.w	r8,-63488
8000344c:	c3 60       	breq	800034b8 <sysclk_enable_peripheral_clock+0x100>
		break;
#endif

	default:
		Assert(false);
		return;
8000344e:	cb 58       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003450:	fe 58 30 00 	cp.w	r8,-53248
80003454:	c5 50       	breq	800034fe <sysclk_enable_peripheral_clock+0x146>
80003456:	e0 8b 00 18 	brhi	80003486 <sysclk_enable_peripheral_clock+0xce>
8000345a:	fe 58 20 00 	cp.w	r8,-57344
8000345e:	c6 80       	breq	8000352e <sysclk_enable_peripheral_clock+0x176>
80003460:	e0 8b 00 09 	brhi	80003472 <sysclk_enable_peripheral_clock+0xba>
80003464:	fe 58 18 00 	cp.w	r8,-59392
80003468:	c5 b0       	breq	8000351e <sysclk_enable_peripheral_clock+0x166>
8000346a:	fe 58 1c 00 	cp.w	r8,-58368
8000346e:	c5 c0       	breq	80003526 <sysclk_enable_peripheral_clock+0x16e>
		break;
#endif

	default:
		Assert(false);
		return;
80003470:	ca 48       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003472:	fe 58 28 00 	cp.w	r8,-55296
80003476:	c3 c0       	breq	800034ee <sysclk_enable_peripheral_clock+0x136>
80003478:	fe 58 2c 00 	cp.w	r8,-54272
8000347c:	c3 d0       	breq	800034f6 <sysclk_enable_peripheral_clock+0x13e>
8000347e:	fe 58 24 00 	cp.w	r8,-56320
80003482:	c3 20       	breq	800034e6 <sysclk_enable_peripheral_clock+0x12e>
		break;
#endif

	default:
		Assert(false);
		return;
80003484:	c9 a8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003486:	fe 58 40 00 	cp.w	r8,-49152
8000348a:	c6 20       	breq	8000354e <sysclk_enable_peripheral_clock+0x196>
8000348c:	e0 8b 00 0c 	brhi	800034a4 <sysclk_enable_peripheral_clock+0xec>
80003490:	fe 58 38 00 	cp.w	r8,-51200
80003494:	c5 50       	breq	8000353e <sysclk_enable_peripheral_clock+0x186>
80003496:	fe 58 3c 00 	cp.w	r8,-50176
8000349a:	c2 20       	breq	800034de <sysclk_enable_peripheral_clock+0x126>
8000349c:	fe 58 34 00 	cp.w	r8,-52224
800034a0:	c4 b0       	breq	80003536 <sysclk_enable_peripheral_clock+0x17e>
		break;
#endif

	default:
		Assert(false);
		return;
800034a2:	c8 b8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800034a4:	fe 58 50 00 	cp.w	r8,-45056
800034a8:	c2 f0       	breq	80003506 <sysclk_enable_peripheral_clock+0x14e>
800034aa:	fe 58 54 00 	cp.w	r8,-44032
800034ae:	c3 00       	breq	8000350e <sysclk_enable_peripheral_clock+0x156>
800034b0:	fe 58 44 00 	cp.w	r8,-48128
800034b4:	c4 90       	breq	80003546 <sysclk_enable_peripheral_clock+0x18e>
		break;
#endif

	default:
		Assert(false);
		return;
800034b6:	c8 18       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
800034b8:	30 0c       	mov	r12,0
800034ba:	f0 1f 00 42 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
800034be:	c7 d8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
800034c0:	30 1c       	mov	r12,1
800034c2:	f0 1f 00 40 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
800034c6:	c7 98       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PDCA_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
800034c8:	30 4c       	mov	r12,4
800034ca:	f0 1f 00 3f 	mcall	800035c4 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pba_module(SYSCLK_PDCA_PB);
800034ce:	30 2c       	mov	r12,2
800034d0:	f0 1f 00 3c 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
800034d4:	c7 28       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
800034d6:	30 3c       	mov	r12,3
800034d8:	f0 1f 00 3a 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
800034dc:	c6 e8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ADC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ADC);
800034de:	30 4c       	mov	r12,4
800034e0:	f0 1f 00 38 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
800034e4:	c6 a8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI0);
800034e6:	30 5c       	mov	r12,5
800034e8:	f0 1f 00 36 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
800034ec:	c6 68       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
800034ee:	30 6c       	mov	r12,6
800034f0:	f0 1f 00 34 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
800034f4:	c6 28       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
800034f6:	30 7c       	mov	r12,7
800034f8:	f0 1f 00 32 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
800034fc:	c5 e8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIM1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
800034fe:	30 8c       	mov	r12,8
80003500:	f0 1f 00 30 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
80003504:	c5 a8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
80003506:	30 9c       	mov	r12,9
80003508:	f0 1f 00 2e 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000350c:	c5 68       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TWIS1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
8000350e:	30 ac       	mov	r12,10
80003510:	f0 1f 00 2c 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
80003514:	c5 28       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
80003516:	30 bc       	mov	r12,11
80003518:	f0 1f 00 2a 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000351c:	c4 e8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART1);
8000351e:	30 cc       	mov	r12,12
80003520:	f0 1f 00 28 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
80003524:	c4 a8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
80003526:	30 dc       	mov	r12,13
80003528:	f0 1f 00 26 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000352c:	c4 68       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART3);
8000352e:	30 ec       	mov	r12,14
80003530:	f0 1f 00 24 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
80003534:	c4 28       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SSC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SSC);
80003536:	30 fc       	mov	r12,15
80003538:	f0 1f 00 22 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000353c:	c3 e8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC0);
8000353e:	31 0c       	mov	r12,16
80003540:	f0 1f 00 20 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
80003544:	c3 a8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_TC1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC1);
80003546:	31 1c       	mov	r12,17
80003548:	f0 1f 00 1e 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
8000354c:	c3 68       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ABDAC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DAC);
8000354e:	31 2c       	mov	r12,18
80003550:	f0 1f 00 1c 	mcall	800035c0 <sysclk_enable_peripheral_clock+0x208>
		break;
80003554:	c3 28       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_HMATRIX_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
80003556:	30 0c       	mov	r12,0
80003558:	f0 1f 00 1c 	mcall	800035c8 <sysclk_enable_peripheral_clock+0x210>
		break;
8000355c:	c2 e8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_USBB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000355e:	30 3c       	mov	r12,3
80003560:	f0 1f 00 19 	mcall	800035c4 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80003564:	30 1c       	mov	r12,1
80003566:	f0 1f 00 19 	mcall	800035c8 <sysclk_enable_peripheral_clock+0x210>
		break;
8000356a:	c2 78       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_FLASHC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_FLASHC_DATA);
8000356c:	30 0c       	mov	r12,0
8000356e:	f0 1f 00 16 	mcall	800035c4 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
80003572:	30 2c       	mov	r12,2
80003574:	f0 1f 00 15 	mcall	800035c8 <sysclk_enable_peripheral_clock+0x210>
		break;
80003578:	c2 08       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
8000357a:	30 3c       	mov	r12,3
8000357c:	f0 1f 00 13 	mcall	800035c8 <sysclk_enable_peripheral_clock+0x210>
		break;
80003580:	c1 c8       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_SDRAMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SDRAMC_REGS);
80003582:	30 4c       	mov	r12,4
80003584:	f0 1f 00 11 	mcall	800035c8 <sysclk_enable_peripheral_clock+0x210>
		break;
80003588:	c1 88       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_ECCHRS_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_ECC);
8000358a:	30 5c       	mov	r12,5
8000358c:	f0 1f 00 0f 	mcall	800035c8 <sysclk_enable_peripheral_clock+0x210>
		break;
80003590:	c1 48       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MCI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MCI);
80003592:	30 6c       	mov	r12,6
80003594:	f0 1f 00 0d 	mcall	800035c8 <sysclk_enable_peripheral_clock+0x210>
		break;
80003598:	c1 08       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_BUSMON_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_BUSMON_HSB);
8000359a:	30 8c       	mov	r12,8
8000359c:	f0 1f 00 0a 	mcall	800035c4 <sysclk_enable_peripheral_clock+0x20c>
		sysclk_enable_pbb_module(SYSCLK_BUSMON);
800035a0:	30 7c       	mov	r12,7
800035a2:	f0 1f 00 0a 	mcall	800035c8 <sysclk_enable_peripheral_clock+0x210>
		break;
800035a6:	c0 98       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

	case AVR32_MSI_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_MSI);
800035a8:	30 8c       	mov	r12,8
800035aa:	f0 1f 00 08 	mcall	800035c8 <sysclk_enable_peripheral_clock+0x210>
		break;
800035ae:	c0 58       	rjmp	800035b8 <sysclk_enable_peripheral_clock+0x200>

#if defined(AVR32_AES_ADDRESS)
	case AVR32_AES_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_AES);
800035b0:	30 9c       	mov	r12,9
800035b2:	f0 1f 00 06 	mcall	800035c8 <sysclk_enable_peripheral_clock+0x210>
		break;
800035b6:	d7 03       	nop

	default:
		Assert(false);
		return;
	}
}
800035b8:	2f fd       	sub	sp,-4
800035ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800035be:	00 00       	add	r0,r0
800035c0:	80 00       	ld.sh	r0,r0[0x0]
800035c2:	33 98       	mov	r8,57
800035c4:	80 00       	ld.sh	r0,r0[0x0]
800035c6:	33 78       	mov	r8,55
800035c8:	80 00       	ld.sh	r0,r0[0x0]
800035ca:	bf a0       	sbr	r0,0x1e

800035cc <tc_irq>:
 * The ISR handles RC compare interrupt and sets the update_timer flag to
 * update the timer value.
 */
__attribute__((__interrupt__))
static void tc_irq(void)
{
800035cc:	eb cd 40 80 	pushm	r7,lr
800035d0:	1a 97       	mov	r7,sp
	// Increment the ms seconds counter
	tc_tick++;
800035d2:	4a c8       	lddpc	r8,80003680 <tc_irq+0xb4>
800035d4:	70 08       	ld.w	r8,r8[0x0]
800035d6:	f0 c9 ff ff 	sub	r9,r8,-1
800035da:	4a a8       	lddpc	r8,80003680 <tc_irq+0xb4>
800035dc:	91 09       	st.w	r8[0x0],r9
	 * in the Watch Window.
	 */

	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
800035de:	30 0b       	mov	r11,0
800035e0:	fe 7c 38 00 	mov	r12,-51200
800035e4:	f0 1f 00 28 	mcall	80003684 <tc_irq+0xb8>

	if (entry_mode_status == NO_MODE_SELECTED)
800035e8:	4a 88       	lddpc	r8,80003688 <tc_irq+0xbc>
800035ea:	11 88       	ld.ub	r8,r8[0x0]
800035ec:	5c 58       	castu.b	r8
800035ee:	c1 51       	brne	80003618 <tc_irq+0x4c>
	{
		if (check_programming_mode_entry_sequence() == true)
800035f0:	f0 1f 00 27 	mcall	8000368c <tc_irq+0xc0>
800035f4:	18 98       	mov	r8,r12
800035f6:	58 08       	cp.w	r8,0
800035f8:	c0 50       	breq	80003602 <tc_irq+0x36>
		{
			entry_mode_status = PROGRAMMING_MODE;
800035fa:	4a 49       	lddpc	r9,80003688 <tc_irq+0xbc>
800035fc:	30 18       	mov	r8,1
800035fe:	b2 88       	st.b	r9[0x0],r8
80003600:	c0 c8       	rjmp	80003618 <tc_irq+0x4c>
		}
		else if (check_normal_mode_entry_sequence() == true)
80003602:	f0 1f 00 24 	mcall	80003690 <tc_irq+0xc4>
80003606:	18 98       	mov	r8,r12
80003608:	58 08       	cp.w	r8,0
8000360a:	c0 70       	breq	80003618 <tc_irq+0x4c>
		{
			entry_mode_status = NORMAL_MODE;
8000360c:	49 f9       	lddpc	r9,80003688 <tc_irq+0xbc>
8000360e:	30 28       	mov	r8,2
80003610:	b2 88       	st.b	r9[0x0],r8
			pass_code = temp_password;
80003612:	4a 18       	lddpc	r8,80003694 <tc_irq+0xc8>
80003614:	4a 19       	lddpc	r9,80003698 <tc_irq+0xcc>
80003616:	91 09       	st.w	r8[0x0],r9
		}
	}
	
	if (entry_mode_status == PROGRAMMING_MODE)
80003618:	49 c8       	lddpc	r8,80003688 <tc_irq+0xbc>
8000361a:	11 88       	ld.ub	r8,r8[0x0]
8000361c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003620:	30 18       	mov	r8,1
80003622:	f0 09 18 00 	cp.b	r9,r8
80003626:	c1 71       	brne	80003654 <tc_irq+0x88>
	{
		if (!mode_selected)
80003628:	49 d8       	lddpc	r8,8000369c <tc_irq+0xd0>
8000362a:	11 88       	ld.ub	r8,r8[0x0]
8000362c:	5c 58       	castu.b	r8
8000362e:	ec 18 00 01 	eorl	r8,0x1
80003632:	5c 58       	castu.b	r8
80003634:	c0 40       	breq	8000363c <tc_irq+0x70>
		{
			check_for_mode_selected();
80003636:	f0 1f 00 1b 	mcall	800036a0 <tc_irq+0xd4>
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
			{
				entry_mode_status = NO_MODE_SELECTED;
8000363a:	c1 98       	rjmp	8000366c <tc_irq+0xa0>
		{
			check_for_mode_selected();
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
8000363c:	f0 1f 00 1a 	mcall	800036a4 <tc_irq+0xd8>
80003640:	18 98       	mov	r8,r12
80003642:	10 99       	mov	r9,r8
80003644:	30 18       	mov	r8,1
80003646:	f0 09 18 00 	cp.b	r9,r8
8000364a:	c1 01       	brne	8000366a <tc_irq+0x9e>
			{
				entry_mode_status = NO_MODE_SELECTED;
8000364c:	48 f9       	lddpc	r9,80003688 <tc_irq+0xbc>
8000364e:	30 08       	mov	r8,0
80003650:	b2 88       	st.b	r9[0x0],r8
80003652:	c0 d8       	rjmp	8000366c <tc_irq+0xa0>
			}
		}
	}

	else if (entry_mode_status == NORMAL_MODE)
80003654:	48 d8       	lddpc	r8,80003688 <tc_irq+0xbc>
80003656:	11 88       	ld.ub	r8,r8[0x0]
80003658:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000365c:	30 28       	mov	r8,2
8000365e:	f0 09 18 00 	cp.b	r9,r8
80003662:	c0 51       	brne	8000366c <tc_irq+0xa0>
	{
		read_password();
80003664:	f0 1f 00 11 	mcall	800036a8 <tc_irq+0xdc>
80003668:	c0 28       	rjmp	8000366c <tc_irq+0xa0>
		}
		else
		{
			if (process_selected_mode() == SUCCESSFUL)
			{
				entry_mode_status = NO_MODE_SELECTED;
8000366a:	d7 03       	nop
	



	// specify that an interrupt has been raised
	update_timer = true;
8000366c:	49 09       	lddpc	r9,800036ac <tc_irq+0xe0>
8000366e:	30 18       	mov	r8,1
80003670:	b2 88       	st.b	r9[0x0],r8
	// Toggle the GPIO line
	gpio_tgl_gpio_pin(EXAMPLE_TOGGLE_PIN);
80003672:	30 3c       	mov	r12,3
80003674:	f0 1f 00 0f 	mcall	800036b0 <tc_irq+0xe4>
}
80003678:	e3 cd 40 80 	ldm	sp++,r7,lr
8000367c:	d6 03       	rete
8000367e:	00 00       	add	r0,r0
80003680:	00 00       	add	r0,r0
80003682:	03 d4       	ld.ub	r4,r1[0x5]
80003684:	80 00       	ld.sh	r0,r0[0x0]
80003686:	98 de       	ld.uh	lr,r12[0xa]
80003688:	00 00       	add	r0,r0
8000368a:	03 dc       	ld.ub	r12,r1[0x5]
8000368c:	80 00       	ld.sh	r0,r0[0x0]
8000368e:	3a b4       	mov	r4,-85
80003690:	80 00       	ld.sh	r0,r0[0x0]
80003692:	3b 40       	mov	r0,-76
80003694:	00 00       	add	r0,r0
80003696:	09 a4       	ld.ub	r4,r4[0x2]
80003698:	00 00       	add	r0,r0
8000369a:	02 48       	or	r8,r1
8000369c:	00 00       	add	r0,r0
8000369e:	03 d8       	ld.ub	r8,r1[0x5]
800036a0:	80 00       	ld.sh	r0,r0[0x0]
800036a2:	3c 5c       	mov	r12,-59
800036a4:	80 00       	ld.sh	r0,r0[0x0]
800036a6:	3c 70       	mov	r0,-57
800036a8:	80 00       	ld.sh	r0,r0[0x0]
800036aa:	3d c0       	mov	r0,-36
800036ac:	00 00       	add	r0,r0
800036ae:	01 2c       	ld.uh	r12,r0++
800036b0:	80 00       	ld.sh	r0,r0[0x0]
800036b2:	8e 9a       	ld.uh	r10,r7[0x2]

800036b4 <is_button_released>:

bool is_button_released(void)
{
800036b4:	eb cd 40 80 	pushm	r7,lr
800036b8:	1a 97       	mov	r7,sp
	if ((check_all_buttons_high() == true) && (button_released == false))
800036ba:	f0 1f 00 0b 	mcall	800036e4 <is_button_released+0x30>
800036be:	18 98       	mov	r8,r12
800036c0:	58 08       	cp.w	r8,0
800036c2:	c0 b0       	breq	800036d8 <is_button_released+0x24>
800036c4:	48 98       	lddpc	r8,800036e8 <is_button_released+0x34>
800036c6:	11 88       	ld.ub	r8,r8[0x0]
800036c8:	5c 58       	castu.b	r8
800036ca:	ec 18 00 01 	eorl	r8,0x1
800036ce:	5c 58       	castu.b	r8
800036d0:	c0 40       	breq	800036d8 <is_button_released+0x24>
	{
		button_released = true;
800036d2:	48 69       	lddpc	r9,800036e8 <is_button_released+0x34>
800036d4:	30 18       	mov	r8,1
800036d6:	b2 88       	st.b	r9[0x0],r8
	}
	return button_released;
800036d8:	48 48       	lddpc	r8,800036e8 <is_button_released+0x34>
800036da:	11 88       	ld.ub	r8,r8[0x0]
800036dc:	5c 58       	castu.b	r8
}
800036de:	10 9c       	mov	r12,r8
800036e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800036e4:	80 00       	ld.sh	r0,r0[0x0]
800036e6:	38 f4       	mov	r4,-113
800036e8:	00 00       	add	r0,r0
800036ea:	01 2d       	ld.uh	sp,r0++

800036ec <Read_button>:

void Read_button(void)
{
800036ec:	eb cd 40 80 	pushm	r7,lr
800036f0:	1a 97       	mov	r7,sp
800036f2:	20 1d       	sub	sp,4
	uint8_t button_value = 0;
800036f4:	30 08       	mov	r8,0
800036f6:	ef 68 ff ff 	st.b	r7[-1],r8
	
	button_value = button_pressed();
800036fa:	f0 1f 00 3f 	mcall	800037f4 <Read_button+0x108>
800036fe:	18 98       	mov	r8,r12
80003700:	ef 68 ff ff 	st.b	r7[-1],r8
	switch (button_value)
80003704:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003708:	58 48       	cp.w	r8,4
8000370a:	c0 50       	breq	80003714 <Read_button+0x28>
8000370c:	e0 48 00 ff 	cp.w	r8,255
80003710:	c5 10       	breq	800037b2 <Read_button+0xc6>
80003712:	c2 88       	rjmp	80003762 <Read_button+0x76>
	{
		case ENTER_BUTTON:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
80003714:	4b 98       	lddpc	r8,800037f8 <Read_button+0x10c>
80003716:	11 88       	ld.ub	r8,r8[0x0]
80003718:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000371c:	30 18       	mov	r8,1
8000371e:	f0 09 18 00 	cp.b	r9,r8
80003722:	c0 d1       	brne	8000373c <Read_button+0x50>
			{
				if (mode_selected)
80003724:	4b 68       	lddpc	r8,800037fc <Read_button+0x110>
80003726:	11 88       	ld.ub	r8,r8[0x0]
80003728:	5c 58       	castu.b	r8
8000372a:	c4 60       	breq	800037b6 <Read_button+0xca>
				{
					enter_button_status++;
8000372c:	4b 58       	lddpc	r8,80003800 <Read_button+0x114>
8000372e:	11 88       	ld.ub	r8,r8[0x0]
80003730:	5c 58       	castu.b	r8
80003732:	2f f8       	sub	r8,-1
80003734:	5c 58       	castu.b	r8
80003736:	4b 39       	lddpc	r9,80003800 <Read_button+0x114>
80003738:	b2 88       	st.b	r9[0x0],r8
			{
				normal_mode_password_entered = true;
			}

			
			break;
8000373a:	c4 38       	rjmp	800037c0 <Read_button+0xd4>
				//else
				//{
					//mode_selected = true;
				//}
			}
			else if (entry_mode_status == NORMAL_MODE && normal_mode_password_entered == false)
8000373c:	4a f8       	lddpc	r8,800037f8 <Read_button+0x10c>
8000373e:	11 88       	ld.ub	r8,r8[0x0]
80003740:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003744:	30 28       	mov	r8,2
80003746:	f0 09 18 00 	cp.b	r9,r8
8000374a:	c3 81       	brne	800037ba <Read_button+0xce>
8000374c:	4a e8       	lddpc	r8,80003804 <Read_button+0x118>
8000374e:	11 88       	ld.ub	r8,r8[0x0]
80003750:	5c 58       	castu.b	r8
80003752:	ec 18 00 01 	eorl	r8,0x1
80003756:	5c 58       	castu.b	r8
80003758:	c3 30       	breq	800037be <Read_button+0xd2>
			{
				normal_mode_password_entered = true;
8000375a:	4a b9       	lddpc	r9,80003804 <Read_button+0x118>
8000375c:	30 18       	mov	r8,1
8000375e:	b2 88       	st.b	r9[0x0],r8
			}

			
			break;
80003760:	c3 08       	rjmp	800037c0 <Read_button+0xd4>
		case NO_BUTTON:
		break;
		
		default:
		{
			if (entry_mode_status == PROGRAMMING_MODE)
80003762:	4a 68       	lddpc	r8,800037f8 <Read_button+0x10c>
80003764:	11 88       	ld.ub	r8,r8[0x0]
80003766:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000376a:	30 18       	mov	r8,1
8000376c:	f0 09 18 00 	cp.b	r9,r8
80003770:	c1 31       	brne	80003796 <Read_button+0xaa>
			{
				if (mode_selected)
80003772:	4a 38       	lddpc	r8,800037fc <Read_button+0x110>
80003774:	11 88       	ld.ub	r8,r8[0x0]
80003776:	5c 58       	castu.b	r8
80003778:	c0 70       	breq	80003786 <Read_button+0x9a>
				{
					store_passcode((uint32_t)button_value);
8000377a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000377e:	10 9c       	mov	r12,r8
80003780:	f0 1f 00 22 	mcall	80003808 <Read_button+0x11c>
				}
				else
				{
					mode_chosen = button_value;
					mode_selected = true;
80003784:	c1 e8       	rjmp	800037c0 <Read_button+0xd4>
				{
					store_passcode((uint32_t)button_value);
				}
				else
				{
					mode_chosen = button_value;
80003786:	4a 29       	lddpc	r9,8000380c <Read_button+0x120>
80003788:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000378c:	b2 88       	st.b	r9[0x0],r8
					mode_selected = true;
8000378e:	49 c9       	lddpc	r9,800037fc <Read_button+0x110>
80003790:	30 18       	mov	r8,1
80003792:	b2 88       	st.b	r9[0x0],r8
80003794:	c1 68       	rjmp	800037c0 <Read_button+0xd4>
				}
			}
			else if (entry_mode_status == NORMAL_MODE)
80003796:	49 98       	lddpc	r8,800037f8 <Read_button+0x10c>
80003798:	11 88       	ld.ub	r8,r8[0x0]
8000379a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000379e:	30 28       	mov	r8,2
800037a0:	f0 09 18 00 	cp.b	r9,r8
800037a4:	c0 e1       	brne	800037c0 <Read_button+0xd4>
			{
				store_passcode((uint32_t)button_value);
800037a6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800037aa:	10 9c       	mov	r12,r8
800037ac:	f0 1f 00 17 	mcall	80003808 <Read_button+0x11c>
800037b0:	c0 88       	rjmp	800037c0 <Read_button+0xd4>

			
			break;
		}
		case NO_BUTTON:
		break;
800037b2:	d7 03       	nop
800037b4:	c0 68       	rjmp	800037c0 <Read_button+0xd4>
			{
				normal_mode_password_entered = true;
			}

			
			break;
800037b6:	d7 03       	nop
800037b8:	c0 48       	rjmp	800037c0 <Read_button+0xd4>
800037ba:	d7 03       	nop
800037bc:	c0 28       	rjmp	800037c0 <Read_button+0xd4>
800037be:	d7 03       	nop
			}

		}
	}	

	if (enter_button_status == WAITING_FOR_PASSCODE_SALT_ENTRY)
800037c0:	49 08       	lddpc	r8,80003800 <Read_button+0x114>
800037c2:	11 88       	ld.ub	r8,r8[0x0]
800037c4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800037c8:	30 58       	mov	r8,5
800037ca:	f0 09 18 00 	cp.b	r9,r8
800037ce:	c1 01       	brne	800037ee <Read_button+0x102>
	{
		if (var_W_ticks++ > var_W)
800037d0:	49 08       	lddpc	r8,80003810 <Read_button+0x124>
800037d2:	70 08       	ld.w	r8,r8[0x0]
800037d4:	49 09       	lddpc	r9,80003814 <Read_button+0x128>
800037d6:	72 09       	ld.w	r9,r9[0x0]
800037d8:	12 38       	cp.w	r8,r9
800037da:	5f b9       	srhi	r9
800037dc:	5c 59       	castu.b	r9
800037de:	f0 ca ff ff 	sub	r10,r8,-1
800037e2:	48 c8       	lddpc	r8,80003810 <Read_button+0x124>
800037e4:	91 0a       	st.w	r8[0x0],r10
800037e6:	58 09       	cp.w	r9,0
800037e8:	c0 30       	breq	800037ee <Read_button+0x102>
		{
			calculate_salt();
800037ea:	f0 1f 00 0c 	mcall	80003818 <Read_button+0x12c>
		}
	}	
}
800037ee:	2f fd       	sub	sp,-4
800037f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800037f4:	80 00       	ld.sh	r0,r0[0x0]
800037f6:	38 1c       	mov	r12,-127
800037f8:	00 00       	add	r0,r0
800037fa:	03 dc       	ld.ub	r12,r1[0x5]
800037fc:	00 00       	add	r0,r0
800037fe:	03 d8       	ld.ub	r8,r1[0x5]
80003800:	00 00       	add	r0,r0
80003802:	03 da       	ld.ub	r10,r1[0x5]
80003804:	00 00       	add	r0,r0
80003806:	03 d9       	ld.ub	r9,r1[0x5]
80003808:	80 00       	ld.sh	r0,r0[0x0]
8000380a:	3a 2c       	mov	r12,-94
8000380c:	00 00       	add	r0,r0
8000380e:	01 2e       	ld.uh	lr,r0++
80003810:	00 00       	add	r0,r0
80003812:	02 90       	mov	r0,r1
80003814:	00 00       	add	r0,r0
80003816:	01 28       	ld.uh	r8,r0++
80003818:	80 00       	ld.sh	r0,r0[0x0]
8000381a:	2c fc       	sub	r12,-49

8000381c <button_pressed>:

uint8_t button_pressed (void)
{
8000381c:	eb cd 40 80 	pushm	r7,lr
80003820:	1a 97       	mov	r7,sp
	
	is_button_released();
80003822:	f0 1f 00 2a 	mcall	800038c8 <button_pressed+0xac>

	if (button_released)
80003826:	4a a8       	lddpc	r8,800038cc <button_pressed+0xb0>
80003828:	11 88       	ld.ub	r8,r8[0x0]
8000382a:	5c 58       	castu.b	r8
8000382c:	c4 90       	breq	800038be <button_pressed+0xa2>
	{		
		if (read_push_button(PB1, (uint8_t *)&PB1_Counter))
8000382e:	4a 9b       	lddpc	r11,800038d0 <button_pressed+0xb4>
80003830:	30 ac       	mov	r12,10
80003832:	f0 1f 00 29 	mcall	800038d4 <button_pressed+0xb8>
80003836:	18 98       	mov	r8,r12
80003838:	58 08       	cp.w	r8,0
8000383a:	c0 90       	breq	8000384c <button_pressed+0x30>
		{
			LED_On(LED0);
8000383c:	30 1c       	mov	r12,1
8000383e:	f0 1f 00 27 	mcall	800038d8 <button_pressed+0xbc>
			LED_Off(LED1 | LED2 | LED3);
80003842:	30 ec       	mov	r12,14
80003844:	f0 1f 00 26 	mcall	800038dc <button_pressed+0xc0>
			//store_passcode(0L);
			return PUSH_BUTTON1;
80003848:	30 08       	mov	r8,0
8000384a:	c3 c8       	rjmp	800038c2 <button_pressed+0xa6>
		}
		else if (read_push_button(PB2, (uint8_t *)&PB2_Counter))
8000384c:	4a 5b       	lddpc	r11,800038e0 <button_pressed+0xc4>
8000384e:	30 bc       	mov	r12,11
80003850:	f0 1f 00 21 	mcall	800038d4 <button_pressed+0xb8>
80003854:	18 98       	mov	r8,r12
80003856:	58 08       	cp.w	r8,0
80003858:	c0 90       	breq	8000386a <button_pressed+0x4e>
		{
			LED_On(LED1);
8000385a:	30 2c       	mov	r12,2
8000385c:	f0 1f 00 1f 	mcall	800038d8 <button_pressed+0xbc>
			LED_Off(LED0 | LED2 | LED3);
80003860:	30 dc       	mov	r12,13
80003862:	f0 1f 00 1f 	mcall	800038dc <button_pressed+0xc0>
			//store_passcode(1L);
			return PUSH_BUTTON2;
80003866:	30 18       	mov	r8,1
80003868:	c2 d8       	rjmp	800038c2 <button_pressed+0xa6>
		}
		else if (read_push_button(PB3, (uint8_t *)&PB3_Counter))
8000386a:	49 fb       	lddpc	r11,800038e4 <button_pressed+0xc8>
8000386c:	30 cc       	mov	r12,12
8000386e:	f0 1f 00 1a 	mcall	800038d4 <button_pressed+0xb8>
80003872:	18 98       	mov	r8,r12
80003874:	58 08       	cp.w	r8,0
80003876:	c0 90       	breq	80003888 <button_pressed+0x6c>
		{
			LED_On(LED2);
80003878:	30 4c       	mov	r12,4
8000387a:	f0 1f 00 18 	mcall	800038d8 <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED3);
8000387e:	30 bc       	mov	r12,11
80003880:	f0 1f 00 17 	mcall	800038dc <button_pressed+0xc0>
			//store_passcode(2L);
			return PUSH_BUTTON3;
80003884:	30 28       	mov	r8,2
80003886:	c1 e8       	rjmp	800038c2 <button_pressed+0xa6>
		}
		else if (read_push_button(PB4, (uint8_t *)&PB4_Counter))
80003888:	49 8b       	lddpc	r11,800038e8 <button_pressed+0xcc>
8000388a:	30 dc       	mov	r12,13
8000388c:	f0 1f 00 12 	mcall	800038d4 <button_pressed+0xb8>
80003890:	18 98       	mov	r8,r12
80003892:	58 08       	cp.w	r8,0
80003894:	c0 90       	breq	800038a6 <button_pressed+0x8a>
		{
			LED_On(LED3);
80003896:	30 8c       	mov	r12,8
80003898:	f0 1f 00 10 	mcall	800038d8 <button_pressed+0xbc>
			LED_Off(LED0 | LED1 | LED2);
8000389c:	30 7c       	mov	r12,7
8000389e:	f0 1f 00 10 	mcall	800038dc <button_pressed+0xc0>
			//store_passcode(3L);
			return PUSH_BUTTON4;
800038a2:	30 38       	mov	r8,3
800038a4:	c0 f8       	rjmp	800038c2 <button_pressed+0xa6>
		}
		else if (read_push_button(PB_ENTER, (uint8_t *)&PB5_Counter))
800038a6:	49 2b       	lddpc	r11,800038ec <button_pressed+0xd0>
800038a8:	32 ac       	mov	r12,42
800038aa:	f0 1f 00 0b 	mcall	800038d4 <button_pressed+0xb8>
800038ae:	18 98       	mov	r8,r12
800038b0:	58 08       	cp.w	r8,0
800038b2:	c0 60       	breq	800038be <button_pressed+0xa2>
		{
			device_unlocked = true;
800038b4:	48 f9       	lddpc	r9,800038f0 <button_pressed+0xd4>
800038b6:	30 18       	mov	r8,1
800038b8:	b2 88       	st.b	r9[0x0],r8
			return ENTER_BUTTON;
800038ba:	30 48       	mov	r8,4
800038bc:	c0 38       	rjmp	800038c2 <button_pressed+0xa6>
		}
	}
	return NO_BUTTON;
800038be:	e0 68 00 ff 	mov	r8,255
}
800038c2:	10 9c       	mov	r12,r8
800038c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800038c8:	80 00       	ld.sh	r0,r0[0x0]
800038ca:	36 b4       	mov	r4,107
800038cc:	00 00       	add	r0,r0
800038ce:	01 2d       	ld.uh	sp,r0++
800038d0:	00 00       	add	r0,r0
800038d2:	04 00       	add	r0,r2
800038d4:	80 00       	ld.sh	r0,r0[0x0]
800038d6:	39 74       	mov	r4,-105
800038d8:	80 00       	ld.sh	r0,r0[0x0]
800038da:	43 84       	lddsp	r4,sp[0xe0]
800038dc:	80 00       	ld.sh	r0,r0[0x0]
800038de:	42 cc       	lddsp	r12,sp[0xb0]
800038e0:	00 00       	add	r0,r0
800038e2:	04 01       	add	r1,r2
800038e4:	00 00       	add	r0,r0
800038e6:	04 02       	add	r2,r2
800038e8:	00 00       	add	r0,r0
800038ea:	04 03       	add	r3,r2
800038ec:	00 00       	add	r0,r0
800038ee:	04 04       	add	r4,r2
800038f0:	00 00       	add	r0,r0
800038f2:	02 88       	andn	r8,r1

800038f4 <check_all_buttons_high>:

bool check_all_buttons_high(void)
{
800038f4:	eb cd 40 80 	pushm	r7,lr
800038f8:	1a 97       	mov	r7,sp
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
800038fa:	30 ac       	mov	r12,10
800038fc:	f0 1f 00 1c 	mcall	8000396c <check_all_buttons_high+0x78>
80003900:	18 98       	mov	r8,r12
80003902:	58 18       	cp.w	r8,1
80003904:	c2 b1       	brne	8000395a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
80003906:	30 bc       	mov	r12,11
80003908:	f0 1f 00 19 	mcall	8000396c <check_all_buttons_high+0x78>
8000390c:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
8000390e:	58 18       	cp.w	r8,1
80003910:	c2 51       	brne	8000395a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
80003912:	30 cc       	mov	r12,12
80003914:	f0 1f 00 16 	mcall	8000396c <check_all_buttons_high+0x78>
80003918:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
8000391a:	58 18       	cp.w	r8,1
8000391c:	c1 f1       	brne	8000395a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
8000391e:	30 dc       	mov	r12,13
80003920:	f0 1f 00 13 	mcall	8000396c <check_all_buttons_high+0x78>
80003924:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003926:	58 18       	cp.w	r8,1
80003928:	c1 91       	brne	8000395a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(ENTER_BUTTON) == 1))
8000392a:	30 4c       	mov	r12,4
8000392c:	f0 1f 00 10 	mcall	8000396c <check_all_buttons_high+0x78>
80003930:	18 98       	mov	r8,r12

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003932:	58 18       	cp.w	r8,1
80003934:	c1 31       	brne	8000395a <check_all_buttons_high+0x66>
		&& (gpio_get_pin_value(PB2) == 1)
		&& (gpio_get_pin_value(PB3) == 1)
		&& (gpio_get_pin_value(PB4) == 1)
		&& (gpio_get_pin_value(ENTER_BUTTON) == 1))
	{
		if (button_released_iteration++ > 4)
80003936:	48 f8       	lddpc	r8,80003970 <check_all_buttons_high+0x7c>
80003938:	11 88       	ld.ub	r8,r8[0x0]
8000393a:	30 49       	mov	r9,4
8000393c:	f2 08 18 00 	cp.b	r8,r9
80003940:	5f b9       	srhi	r9
80003942:	5c 59       	castu.b	r9
80003944:	2f f8       	sub	r8,-1
80003946:	5c 58       	castu.b	r8
80003948:	48 aa       	lddpc	r10,80003970 <check_all_buttons_high+0x7c>
8000394a:	b4 88       	st.b	r10[0x0],r8
8000394c:	58 09       	cp.w	r9,0
8000394e:	c0 a0       	breq	80003962 <check_all_buttons_high+0x6e>
		{
			button_released_iteration = 0;
80003950:	48 89       	lddpc	r9,80003970 <check_all_buttons_high+0x7c>
80003952:	30 08       	mov	r8,0
80003954:	b2 88       	st.b	r9[0x0],r8
			return true;
80003956:	30 18       	mov	r8,1
80003958:	c0 78       	rjmp	80003966 <check_all_buttons_high+0x72>
		}
	}
	else
	{
		button_released_iteration = 0;
8000395a:	48 69       	lddpc	r9,80003970 <check_all_buttons_high+0x7c>
8000395c:	30 08       	mov	r8,0
8000395e:	b2 88       	st.b	r9[0x0],r8
80003960:	c0 28       	rjmp	80003964 <check_all_buttons_high+0x70>

bool check_all_buttons_high(void)
{
	static uint8_t button_released_iteration = 0;

	if ((gpio_get_pin_value(PB1) == 1)
80003962:	d7 03       	nop
	else
	{
		button_released_iteration = 0;
	}

	return false;
80003964:	30 08       	mov	r8,0
}
80003966:	10 9c       	mov	r12,r8
80003968:	e3 cd 80 80 	ldm	sp++,r7,pc
8000396c:	80 00       	ld.sh	r0,r0[0x0]
8000396e:	8d 90       	st.w	r6[0x24],r0
80003970:	00 00       	add	r0,r0
80003972:	04 0a       	add	r10,r2

80003974 <read_push_button>:

bool read_push_button(uint32_t pin, uint8_t *counter)
{
80003974:	eb cd 40 80 	pushm	r7,lr
80003978:	1a 97       	mov	r7,sp
8000397a:	20 3d       	sub	sp,12
8000397c:	ef 4c ff f8 	st.w	r7[-8],r12
80003980:	ef 4b ff f4 	st.w	r7[-12],r11
	bool button_status = false;
80003984:	30 08       	mov	r8,0
80003986:	ef 68 ff ff 	st.b	r7[-1],r8

	if (gpio_get_pin_value(pin) == 0)
8000398a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000398e:	f0 1f 00 18 	mcall	800039ec <read_push_button+0x78>
80003992:	18 98       	mov	r8,r12
80003994:	58 08       	cp.w	r8,0
80003996:	c1 c1       	brne	800039ce <read_push_button+0x5a>
	{
		(*counter)++;
80003998:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000399c:	11 88       	ld.ub	r8,r8[0x0]
8000399e:	2f f8       	sub	r8,-1
800039a0:	5c 58       	castu.b	r8
800039a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800039a6:	b2 88       	st.b	r9[0x0],r8
		if (*counter >= 3)
800039a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039ac:	11 89       	ld.ub	r9,r8[0x0]
800039ae:	30 28       	mov	r8,2
800039b0:	f0 09 18 00 	cp.b	r9,r8
800039b4:	e0 88 00 15 	brls	800039de <read_push_button+0x6a>
		{
			button_status = true;
800039b8:	30 18       	mov	r8,1
800039ba:	ef 68 ff ff 	st.b	r7[-1],r8
			//if (enter_pressed)
			//{
				//enter_pressed = false;	
				//Start_W_timer();
			//}
			*counter = 0;
800039be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800039c2:	30 08       	mov	r8,0
800039c4:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
800039c6:	48 b9       	lddpc	r9,800039f0 <read_push_button+0x7c>
800039c8:	30 08       	mov	r8,0
800039ca:	b2 88       	st.b	r9[0x0],r8
800039cc:	c0 a8       	rjmp	800039e0 <read_push_button+0x6c>
		}
	}
	else
	{
		button_status = false;
800039ce:	30 08       	mov	r8,0
800039d0:	ef 68 ff ff 	st.b	r7[-1],r8
		*counter = 0;
800039d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800039d8:	30 08       	mov	r8,0
800039da:	b2 88       	st.b	r9[0x0],r8
800039dc:	c0 28       	rjmp	800039e0 <read_push_button+0x6c>
			//{
				//enter_pressed = false;	
				//Start_W_timer();
			//}
			*counter = 0;
			button_released = false;
800039de:	d7 03       	nop
	else
	{
		button_status = false;
		*counter = 0;
	}
	return button_status;	
800039e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800039e4:	10 9c       	mov	r12,r8
800039e6:	2f dd       	sub	sp,-12
800039e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800039ec:	80 00       	ld.sh	r0,r0[0x0]
800039ee:	8d 90       	st.w	r6[0x24],r0
800039f0:	00 00       	add	r0,r0
800039f2:	01 2d       	ld.uh	sp,r0++

800039f4 <push_buttons_init>:

void push_buttons_init(void)
{
800039f4:	eb cd 40 80 	pushm	r7,lr
800039f8:	1a 97       	mov	r7,sp
	gpio_configure_pin(PB1,GPIO_DIR_INPUT);
800039fa:	30 0b       	mov	r11,0
800039fc:	30 ac       	mov	r12,10
800039fe:	f0 1f 00 0b 	mcall	80003a28 <push_buttons_init+0x34>
	gpio_configure_pin(PB2,GPIO_DIR_INPUT);
80003a02:	30 0b       	mov	r11,0
80003a04:	30 bc       	mov	r12,11
80003a06:	f0 1f 00 09 	mcall	80003a28 <push_buttons_init+0x34>
	gpio_configure_pin(PB3,GPIO_DIR_INPUT);
80003a0a:	30 0b       	mov	r11,0
80003a0c:	30 cc       	mov	r12,12
80003a0e:	f0 1f 00 07 	mcall	80003a28 <push_buttons_init+0x34>
	gpio_configure_pin(PB4,GPIO_DIR_INPUT);
80003a12:	30 0b       	mov	r11,0
80003a14:	30 dc       	mov	r12,13
80003a16:	f0 1f 00 05 	mcall	80003a28 <push_buttons_init+0x34>
	gpio_configure_pin(PB_ENTER,GPIO_DIR_INPUT);
80003a1a:	30 0b       	mov	r11,0
80003a1c:	32 ac       	mov	r12,42
80003a1e:	f0 1f 00 03 	mcall	80003a28 <push_buttons_init+0x34>
}
80003a22:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a26:	00 00       	add	r0,r0
80003a28:	80 00       	ld.sh	r0,r0[0x0]
80003a2a:	8b e2       	st.w	r5[0x38],r2

80003a2c <store_passcode>:

void store_passcode(uint32_t value)
{
80003a2c:	eb cd 40 80 	pushm	r7,lr
80003a30:	1a 97       	mov	r7,sp
80003a32:	20 2d       	sub	sp,8
80003a34:	ef 4c ff f8 	st.w	r7[-8],r12
	unsigned char index = 0;
80003a38:	30 08       	mov	r8,0
80003a3a:	ef 68 ff ff 	st.b	r7[-1],r8
	index = passcode_byte_index >> 4;
80003a3e:	49 c8       	lddpc	r8,80003aac <store_passcode+0x80>
80003a40:	11 88       	ld.ub	r8,r8[0x0]
80003a42:	5c 58       	castu.b	r8
80003a44:	a5 88       	lsr	r8,0x4
80003a46:	ef 68 ff ff 	st.b	r7[-1],r8
	pass_code[index] = pass_code[index] | (value << ((passcode_byte_index & 0x0000000F) << 1));
80003a4a:	49 a8       	lddpc	r8,80003ab0 <store_passcode+0x84>
80003a4c:	70 09       	ld.w	r9,r8[0x0]
80003a4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a52:	a3 68       	lsl	r8,0x2
80003a54:	10 09       	add	r9,r8
80003a56:	49 78       	lddpc	r8,80003ab0 <store_passcode+0x84>
80003a58:	70 0a       	ld.w	r10,r8[0x0]
80003a5a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a5e:	a3 68       	lsl	r8,0x2
80003a60:	f4 08 00 08 	add	r8,r10,r8
80003a64:	70 0a       	ld.w	r10,r8[0x0]
80003a66:	49 28       	lddpc	r8,80003aac <store_passcode+0x80>
80003a68:	11 88       	ld.ub	r8,r8[0x0]
80003a6a:	5c 58       	castu.b	r8
80003a6c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003a70:	a1 78       	lsl	r8,0x1
80003a72:	ee fb ff f8 	ld.w	r11,r7[-8]
80003a76:	f6 08 09 48 	lsl	r8,r11,r8
80003a7a:	f5 e8 10 08 	or	r8,r10,r8
80003a7e:	93 08       	st.w	r9[0x0],r8
	if (++passcode_byte_index >= 128)
80003a80:	48 b8       	lddpc	r8,80003aac <store_passcode+0x80>
80003a82:	11 88       	ld.ub	r8,r8[0x0]
80003a84:	5c 58       	castu.b	r8
80003a86:	2f f8       	sub	r8,-1
80003a88:	5c 58       	castu.b	r8
80003a8a:	48 99       	lddpc	r9,80003aac <store_passcode+0x80>
80003a8c:	b2 88       	st.b	r9[0x0],r8
80003a8e:	48 88       	lddpc	r8,80003aac <store_passcode+0x80>
80003a90:	11 88       	ld.ub	r8,r8[0x0]
80003a92:	5c 58       	castu.b	r8
80003a94:	10 99       	mov	r9,r8
80003a96:	30 08       	mov	r8,0
80003a98:	f0 09 18 00 	cp.b	r9,r8
80003a9c:	c0 44       	brge	80003aa4 <store_passcode+0x78>
	{
		passcode_byte_index = 0;
80003a9e:	48 49       	lddpc	r9,80003aac <store_passcode+0x80>
80003aa0:	30 08       	mov	r8,0
80003aa2:	b2 88       	st.b	r9[0x0],r8
	}
	//inter_key_delay = ENABLED;
}
80003aa4:	2f ed       	sub	sp,-8
80003aa6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003aaa:	00 00       	add	r0,r0
80003aac:	00 00       	add	r0,r0
80003aae:	02 89       	andn	r9,r1
80003ab0:	00 00       	add	r0,r0
80003ab2:	09 a4       	ld.ub	r4,r4[0x2]

80003ab4 <check_programming_mode_entry_sequence>:

bool check_programming_mode_entry_sequence(void)
{
80003ab4:	eb cd 40 80 	pushm	r7,lr
80003ab8:	1a 97       	mov	r7,sp
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
		&& gpio_get_pin_value(PB3) == 0
80003aba:	30 ac       	mov	r12,10
80003abc:	f0 1f 00 1e 	mcall	80003b34 <check_programming_mode_entry_sequence+0x80>
80003ac0:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003ac2:	58 08       	cp.w	r8,0
80003ac4:	c2 e1       	brne	80003b20 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
80003ac6:	30 cc       	mov	r12,12
80003ac8:	f0 1f 00 1b 	mcall	80003b34 <check_programming_mode_entry_sequence+0x80>
80003acc:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003ace:	58 08       	cp.w	r8,0
80003ad0:	c2 81       	brne	80003b20 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
80003ad2:	30 dc       	mov	r12,13
80003ad4:	f0 1f 00 18 	mcall	80003b34 <check_programming_mode_entry_sequence+0x80>
80003ad8:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003ada:	58 08       	cp.w	r8,0
80003adc:	c2 21       	brne	80003b20 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003ade:	30 bc       	mov	r12,11
80003ae0:	f0 1f 00 15 	mcall	80003b34 <check_programming_mode_entry_sequence+0x80>
80003ae4:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003ae6:	58 18       	cp.w	r8,1
80003ae8:	c1 c1       	brne	80003b20 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
80003aea:	30 4c       	mov	r12,4
80003aec:	f0 1f 00 12 	mcall	80003b34 <check_programming_mode_entry_sequence+0x80>
80003af0:	18 98       	mov	r8,r12
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003af2:	58 18       	cp.w	r8,1
80003af4:	c1 61       	brne	80003b20 <check_programming_mode_entry_sequence+0x6c>
		&& gpio_get_pin_value(PB3) == 0
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(ENTER_BUTTON) == 1)
	{
		if (programming_mode_sequence_counter++ >= 100)
80003af6:	49 18       	lddpc	r8,80003b38 <check_programming_mode_entry_sequence+0x84>
80003af8:	90 08       	ld.sh	r8,r8[0x0]
80003afa:	36 39       	mov	r9,99
80003afc:	f2 08 19 00 	cp.h	r8,r9
80003b00:	5f b9       	srhi	r9
80003b02:	5c 59       	castu.b	r9
80003b04:	2f f8       	sub	r8,-1
80003b06:	5c 88       	casts.h	r8
80003b08:	48 ca       	lddpc	r10,80003b38 <check_programming_mode_entry_sequence+0x84>
80003b0a:	b4 08       	st.h	r10[0x0],r8
80003b0c:	58 09       	cp.w	r9,0
80003b0e:	c0 d0       	breq	80003b28 <check_programming_mode_entry_sequence+0x74>
		{
			programming_mode_sequence_counter = 0;
80003b10:	48 a9       	lddpc	r9,80003b38 <check_programming_mode_entry_sequence+0x84>
80003b12:	30 08       	mov	r8,0
80003b14:	b2 08       	st.h	r9[0x0],r8
			button_released = false;
80003b16:	48 a9       	lddpc	r9,80003b3c <check_programming_mode_entry_sequence+0x88>
80003b18:	30 08       	mov	r8,0
80003b1a:	b2 88       	st.b	r9[0x0],r8
			return true;
80003b1c:	30 18       	mov	r8,1
80003b1e:	c0 78       	rjmp	80003b2c <check_programming_mode_entry_sequence+0x78>
		}
	}
	else
	{
		programming_mode_sequence_counter = 0;
80003b20:	48 69       	lddpc	r9,80003b38 <check_programming_mode_entry_sequence+0x84>
80003b22:	30 08       	mov	r8,0
80003b24:	b2 08       	st.h	r9[0x0],r8
80003b26:	c0 28       	rjmp	80003b2a <check_programming_mode_entry_sequence+0x76>
}

bool check_programming_mode_entry_sequence(void)
{
	static uint16_t programming_mode_sequence_counter = 0;
	if (gpio_get_pin_value(PB1) == 0
80003b28:	d7 03       	nop
	}
	else
	{
		programming_mode_sequence_counter = 0;
	}
	return false;
80003b2a:	30 08       	mov	r8,0
}
80003b2c:	10 9c       	mov	r12,r8
80003b2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b32:	00 00       	add	r0,r0
80003b34:	80 00       	ld.sh	r0,r0[0x0]
80003b36:	8d 90       	st.w	r6[0x24],r0
80003b38:	00 00       	add	r0,r0
80003b3a:	04 08       	add	r8,r2
80003b3c:	00 00       	add	r0,r0
80003b3e:	01 2d       	ld.uh	sp,r0++

80003b40 <check_normal_mode_entry_sequence>:

bool check_normal_mode_entry_sequence(void)
{
80003b40:	eb cd 40 80 	pushm	r7,lr
80003b44:	1a 97       	mov	r7,sp
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
		&& gpio_get_pin_value(PB4) == 0
80003b46:	30 4c       	mov	r12,4
80003b48:	f0 1f 00 40 	mcall	80003c48 <check_normal_mode_entry_sequence+0x108>
80003b4c:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b4e:	58 08       	cp.w	r8,0
80003b50:	c3 41       	brne	80003bb8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
80003b52:	30 dc       	mov	r12,13
80003b54:	f0 1f 00 3d 	mcall	80003c48 <check_normal_mode_entry_sequence+0x108>
80003b58:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b5a:	58 08       	cp.w	r8,0
80003b5c:	c2 e1       	brne	80003bb8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
80003b5e:	30 ac       	mov	r12,10
80003b60:	f0 1f 00 3a 	mcall	80003c48 <check_normal_mode_entry_sequence+0x108>
80003b64:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b66:	58 18       	cp.w	r8,1
80003b68:	c2 81       	brne	80003bb8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003b6a:	30 bc       	mov	r12,11
80003b6c:	f0 1f 00 37 	mcall	80003c48 <check_normal_mode_entry_sequence+0x108>
80003b70:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b72:	58 18       	cp.w	r8,1
80003b74:	c2 21       	brne	80003bb8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
80003b76:	30 cc       	mov	r12,12
80003b78:	f0 1f 00 34 	mcall	80003c48 <check_normal_mode_entry_sequence+0x108>
80003b7c:	18 98       	mov	r8,r12
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003b7e:	58 18       	cp.w	r8,1
80003b80:	c1 c1       	brne	80003bb8 <check_normal_mode_entry_sequence+0x78>
		&& gpio_get_pin_value(PB4) == 0
		&& gpio_get_pin_value(PB1) == 1
		&& gpio_get_pin_value(PB2) == 1
		&& gpio_get_pin_value(PB3) == 1)
	{
		normal_mode_unlock_device_sequence_counter = 0;
80003b82:	4b 39       	lddpc	r9,80003c4c <check_normal_mode_entry_sequence+0x10c>
80003b84:	30 08       	mov	r8,0
80003b86:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_device_id_sequence_counter++ >= 200)
80003b88:	4b 28       	lddpc	r8,80003c50 <check_normal_mode_entry_sequence+0x110>
80003b8a:	11 88       	ld.ub	r8,r8[0x0]
80003b8c:	3c 79       	mov	r9,-57
80003b8e:	f2 08 18 00 	cp.b	r8,r9
80003b92:	5f b9       	srhi	r9
80003b94:	5c 59       	castu.b	r9
80003b96:	2f f8       	sub	r8,-1
80003b98:	5c 58       	castu.b	r8
80003b9a:	4a ea       	lddpc	r10,80003c50 <check_normal_mode_entry_sequence+0x110>
80003b9c:	b4 88       	st.b	r10[0x0],r8
80003b9e:	58 09       	cp.w	r9,0
80003ba0:	c4 c0       	breq	80003c38 <check_normal_mode_entry_sequence+0xf8>
		{
			normal_mode_device_id_sequence_counter = 0;
80003ba2:	4a c9       	lddpc	r9,80003c50 <check_normal_mode_entry_sequence+0x110>
80003ba4:	30 08       	mov	r8,0
80003ba6:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003ba8:	4a b9       	lddpc	r9,80003c54 <check_normal_mode_entry_sequence+0x114>
80003baa:	30 08       	mov	r8,0
80003bac:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = DEVICE_ID;
80003bae:	4a b9       	lddpc	r9,80003c58 <check_normal_mode_entry_sequence+0x118>
80003bb0:	30 38       	mov	r8,3
80003bb2:	b2 88       	st.b	r9[0x0],r8
			return true;
80003bb4:	30 18       	mov	r8,1
80003bb6:	c4 58       	rjmp	80003c40 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
			&& gpio_get_pin_value(PB2) == 0
80003bb8:	30 4c       	mov	r12,4
80003bba:	f0 1f 00 24 	mcall	80003c48 <check_normal_mode_entry_sequence+0x108>
80003bbe:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003bc0:	58 08       	cp.w	r8,0
80003bc2:	c3 41       	brne	80003c2a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
80003bc4:	30 bc       	mov	r12,11
80003bc6:	f0 1f 00 21 	mcall	80003c48 <check_normal_mode_entry_sequence+0x108>
80003bca:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003bcc:	58 08       	cp.w	r8,0
80003bce:	c2 e1       	brne	80003c2a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
80003bd0:	30 ac       	mov	r12,10
80003bd2:	f0 1f 00 1e 	mcall	80003c48 <check_normal_mode_entry_sequence+0x108>
80003bd6:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003bd8:	58 18       	cp.w	r8,1
80003bda:	c2 81       	brne	80003c2a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003bdc:	30 cc       	mov	r12,12
80003bde:	f0 1f 00 1b 	mcall	80003c48 <check_normal_mode_entry_sequence+0x108>
80003be2:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003be4:	58 18       	cp.w	r8,1
80003be6:	c2 21       	brne	80003c2a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
80003be8:	30 dc       	mov	r12,13
80003bea:	f0 1f 00 18 	mcall	80003c48 <check_normal_mode_entry_sequence+0x108>
80003bee:	18 98       	mov	r8,r12
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003bf0:	58 18       	cp.w	r8,1
80003bf2:	c1 c1       	brne	80003c2a <check_normal_mode_entry_sequence+0xea>
			&& gpio_get_pin_value(PB2) == 0
			&& gpio_get_pin_value(PB1) == 1
			&& gpio_get_pin_value(PB3) == 1
			&& gpio_get_pin_value(PB4) == 1)
	{
		normal_mode_device_id_sequence_counter = 0;
80003bf4:	49 79       	lddpc	r9,80003c50 <check_normal_mode_entry_sequence+0x110>
80003bf6:	30 08       	mov	r8,0
80003bf8:	b2 88       	st.b	r9[0x0],r8
		if (normal_mode_unlock_device_sequence_counter++ >= 200)
80003bfa:	49 58       	lddpc	r8,80003c4c <check_normal_mode_entry_sequence+0x10c>
80003bfc:	11 88       	ld.ub	r8,r8[0x0]
80003bfe:	3c 79       	mov	r9,-57
80003c00:	f2 08 18 00 	cp.b	r8,r9
80003c04:	5f b9       	srhi	r9
80003c06:	5c 59       	castu.b	r9
80003c08:	2f f8       	sub	r8,-1
80003c0a:	5c 58       	castu.b	r8
80003c0c:	49 0a       	lddpc	r10,80003c4c <check_normal_mode_entry_sequence+0x10c>
80003c0e:	b4 88       	st.b	r10[0x0],r8
80003c10:	58 09       	cp.w	r9,0
80003c12:	c1 50       	breq	80003c3c <check_normal_mode_entry_sequence+0xfc>
		{
			normal_mode_unlock_device_sequence_counter = 0;
80003c14:	48 e9       	lddpc	r9,80003c4c <check_normal_mode_entry_sequence+0x10c>
80003c16:	30 08       	mov	r8,0
80003c18:	b2 88       	st.b	r9[0x0],r8
			button_released = false;
80003c1a:	48 f9       	lddpc	r9,80003c54 <check_normal_mode_entry_sequence+0x114>
80003c1c:	30 08       	mov	r8,0
80003c1e:	b2 88       	st.b	r9[0x0],r8
			normal_mode_chosen = UNLOCK_CRYPTX2;
80003c20:	48 e9       	lddpc	r9,80003c58 <check_normal_mode_entry_sequence+0x118>
80003c22:	30 48       	mov	r8,4
80003c24:	b2 88       	st.b	r9[0x0],r8
			return true;
80003c26:	30 18       	mov	r8,1
80003c28:	c0 c8       	rjmp	80003c40 <check_normal_mode_entry_sequence+0x100>
		}
	}
	else
	{
		normal_mode_device_id_sequence_counter = 0;
80003c2a:	48 a9       	lddpc	r9,80003c50 <check_normal_mode_entry_sequence+0x110>
80003c2c:	30 08       	mov	r8,0
80003c2e:	b2 88       	st.b	r9[0x0],r8
		normal_mode_unlock_device_sequence_counter = 0;
80003c30:	48 79       	lddpc	r9,80003c4c <check_normal_mode_entry_sequence+0x10c>
80003c32:	30 08       	mov	r8,0
80003c34:	b2 88       	st.b	r9[0x0],r8
80003c36:	c0 48       	rjmp	80003c3e <check_normal_mode_entry_sequence+0xfe>
bool check_normal_mode_entry_sequence(void)
{
	static uint8_t normal_mode_device_id_sequence_counter = 0;
	static uint8_t normal_mode_unlock_device_sequence_counter = 0;
	
	if (gpio_get_pin_value(ENTER_BUTTON) == 0 
80003c38:	d7 03       	nop
80003c3a:	c0 28       	rjmp	80003c3e <check_normal_mode_entry_sequence+0xfe>
			button_released = false;
			normal_mode_chosen = DEVICE_ID;
			return true;
		}
	}
	else if (gpio_get_pin_value(ENTER_BUTTON) == 0
80003c3c:	d7 03       	nop
	else
	{
		normal_mode_device_id_sequence_counter = 0;
		normal_mode_unlock_device_sequence_counter = 0;
	}
	return false;
80003c3e:	30 08       	mov	r8,0
}
80003c40:	10 9c       	mov	r12,r8
80003c42:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c46:	00 00       	add	r0,r0
80003c48:	80 00       	ld.sh	r0,r0[0x0]
80003c4a:	8d 90       	st.w	r6[0x24],r0
80003c4c:	00 00       	add	r0,r0
80003c4e:	04 05       	add	r5,r2
80003c50:	00 00       	add	r0,r0
80003c52:	04 06       	add	r6,r2
80003c54:	00 00       	add	r0,r0
80003c56:	01 2d       	ld.uh	sp,r0++
80003c58:	00 00       	add	r0,r0
80003c5a:	03 db       	ld.ub	r11,r1[0x5]

80003c5c <check_for_mode_selected>:

void check_for_mode_selected(void)
{
80003c5c:	eb cd 40 80 	pushm	r7,lr
80003c60:	1a 97       	mov	r7,sp
	Read_button();
80003c62:	f0 1f 00 03 	mcall	80003c6c <check_for_mode_selected+0x10>
}
80003c66:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c6a:	00 00       	add	r0,r0
80003c6c:	80 00       	ld.sh	r0,r0[0x0]
80003c6e:	36 ec       	mov	r12,110

80003c70 <process_selected_mode>:

uint8_t process_selected_mode(void)
{
80003c70:	eb cd 40 80 	pushm	r7,lr
80003c74:	1a 97       	mov	r7,sp
80003c76:	20 1d       	sub	sp,4
	uint8_t return_value = FAILED;
80003c78:	30 08       	mov	r8,0
80003c7a:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (enter_button_status == READY_TO_TRIGGER)
80003c7e:	4b 08       	lddpc	r8,80003d3c <process_selected_mode+0xcc>
80003c80:	11 88       	ld.ub	r8,r8[0x0]
80003c82:	5c 58       	castu.b	r8
80003c84:	c0 b1       	brne	80003c9a <process_selected_mode+0x2a>
	{
		pass_code = temp_password;
80003c86:	4a f8       	lddpc	r8,80003d40 <process_selected_mode+0xd0>
80003c88:	4a f9       	lddpc	r9,80003d44 <process_selected_mode+0xd4>
80003c8a:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80003c8c:	4a f9       	lddpc	r9,80003d48 <process_selected_mode+0xd8>
80003c8e:	30 08       	mov	r8,0
80003c90:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_FIRST_PRESS;
80003c92:	4a b9       	lddpc	r9,80003d3c <process_selected_mode+0xcc>
80003c94:	30 18       	mov	r8,1
80003c96:	b2 88       	st.b	r9[0x0],r8
80003c98:	c4 98       	rjmp	80003d2a <process_selected_mode+0xba>
	}
	else if (enter_button_status == FIRST_TIME_PRESSED)
80003c9a:	4a 98       	lddpc	r8,80003d3c <process_selected_mode+0xcc>
80003c9c:	11 88       	ld.ub	r8,r8[0x0]
80003c9e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003ca2:	30 28       	mov	r8,2
80003ca4:	f0 09 18 00 	cp.b	r9,r8
80003ca8:	c0 e1       	brne	80003cc4 <process_selected_mode+0x54>
	{
		store_passcode(3L);
80003caa:	30 3c       	mov	r12,3
80003cac:	f0 1f 00 28 	mcall	80003d4c <process_selected_mode+0xdc>
		pass_code = temp_password1;
80003cb0:	4a 48       	lddpc	r8,80003d40 <process_selected_mode+0xd0>
80003cb2:	4a 89       	lddpc	r9,80003d50 <process_selected_mode+0xe0>
80003cb4:	91 09       	st.w	r8[0x0],r9
		passcode_byte_index = 0;
80003cb6:	4a 59       	lddpc	r9,80003d48 <process_selected_mode+0xd8>
80003cb8:	30 08       	mov	r8,0
80003cba:	b2 88       	st.b	r9[0x0],r8
		enter_button_status = WAITING_FOR_SECOND_PRESS;
80003cbc:	4a 09       	lddpc	r9,80003d3c <process_selected_mode+0xcc>
80003cbe:	30 38       	mov	r8,3
80003cc0:	b2 88       	st.b	r9[0x0],r8
80003cc2:	c3 48       	rjmp	80003d2a <process_selected_mode+0xba>
	}
	else if (enter_button_status == SECOND_TIME_PRESSED)
80003cc4:	49 e8       	lddpc	r8,80003d3c <process_selected_mode+0xcc>
80003cc6:	11 88       	ld.ub	r8,r8[0x0]
80003cc8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003ccc:	30 48       	mov	r8,4
80003cce:	f0 09 18 00 	cp.b	r9,r8
80003cd2:	c1 a1       	brne	80003d06 <process_selected_mode+0x96>
	{
		store_passcode(3L);
80003cd4:	30 3c       	mov	r12,3
80003cd6:	f0 1f 00 1e 	mcall	80003d4c <process_selected_mode+0xdc>
		if (compare_entered_passwords() == true)
80003cda:	f0 1f 00 1f 	mcall	80003d54 <process_selected_mode+0xe4>
80003cde:	18 98       	mov	r8,r12
80003ce0:	58 08       	cp.w	r8,0
80003ce2:	c2 30       	breq	80003d28 <process_selected_mode+0xb8>
		{
			memset((uint8_t *)temp_password, 0, 32);
80003ce4:	32 0a       	mov	r10,32
80003ce6:	30 0b       	mov	r11,0
80003ce8:	49 7c       	lddpc	r12,80003d44 <process_selected_mode+0xd4>
80003cea:	f0 1f 00 1c 	mcall	80003d58 <process_selected_mode+0xe8>
			pass_code = temp_password;
80003cee:	49 58       	lddpc	r8,80003d40 <process_selected_mode+0xd0>
80003cf0:	49 59       	lddpc	r9,80003d44 <process_selected_mode+0xd4>
80003cf2:	91 09       	st.w	r8[0x0],r9
			passcode_byte_index = 0;
80003cf4:	49 59       	lddpc	r9,80003d48 <process_selected_mode+0xd8>
80003cf6:	30 08       	mov	r8,0
80003cf8:	b2 88       	st.b	r9[0x0],r8
			enter_button_status = WAITING_FOR_PASSCODE_SALT_ENTRY;
80003cfa:	49 19       	lddpc	r9,80003d3c <process_selected_mode+0xcc>
80003cfc:	30 58       	mov	r8,5
80003cfe:	b2 88       	st.b	r9[0x0],r8
			Start_W_timer();
80003d00:	f0 1f 00 17 	mcall	80003d5c <process_selected_mode+0xec>
80003d04:	c1 38       	rjmp	80003d2a <process_selected_mode+0xba>
		}
	}
	else if (enter_button_status == PASSCODE_FOR_SALT_ENTERED)
80003d06:	48 e8       	lddpc	r8,80003d3c <process_selected_mode+0xcc>
80003d08:	11 88       	ld.ub	r8,r8[0x0]
80003d0a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003d0e:	30 68       	mov	r8,6
80003d10:	f0 09 18 00 	cp.b	r9,r8
80003d14:	c0 b1       	brne	80003d2a <process_selected_mode+0xba>
	{
		store_passcode(3L);
80003d16:	30 3c       	mov	r12,3
80003d18:	f0 1f 00 0d 	mcall	80003d4c <process_selected_mode+0xdc>
		calculate_salt();
80003d1c:	f0 1f 00 11 	mcall	80003d60 <process_selected_mode+0xf0>
		return_value = SUCCESSFUL;
80003d20:	30 18       	mov	r8,1
80003d22:	ef 68 ff ff 	st.b	r7[-1],r8
80003d26:	c0 28       	rjmp	80003d2a <process_selected_mode+0xba>
		{
			memset((uint8_t *)temp_password, 0, 32);
			pass_code = temp_password;
			passcode_byte_index = 0;
			enter_button_status = WAITING_FOR_PASSCODE_SALT_ENTRY;
			Start_W_timer();
80003d28:	d7 03       	nop
		store_passcode(3L);
		calculate_salt();
		return_value = SUCCESSFUL;
	}

	Read_button();
80003d2a:	f0 1f 00 0f 	mcall	80003d64 <process_selected_mode+0xf4>
	return return_value;
80003d2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80003d32:	10 9c       	mov	r12,r8
80003d34:	2f fd       	sub	sp,-4
80003d36:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d3a:	00 00       	add	r0,r0
80003d3c:	00 00       	add	r0,r0
80003d3e:	03 da       	ld.ub	r10,r1[0x5]
80003d40:	00 00       	add	r0,r0
80003d42:	09 a4       	ld.ub	r4,r4[0x2]
80003d44:	00 00       	add	r0,r0
80003d46:	02 48       	or	r8,r1
80003d48:	00 00       	add	r0,r0
80003d4a:	02 89       	andn	r9,r1
80003d4c:	80 00       	ld.sh	r0,r0[0x0]
80003d4e:	3a 2c       	mov	r12,-94
80003d50:	00 00       	add	r0,r0
80003d52:	02 68       	and	r8,r1
80003d54:	80 00       	ld.sh	r0,r0[0x0]
80003d56:	3d 68       	mov	r8,-42
80003d58:	80 00       	ld.sh	r0,r0[0x0]
80003d5a:	e9 26 80 00 	ld.sb	r6,r4[-32768]
80003d5e:	2e b0       	sub	r0,-21
80003d60:	80 00       	ld.sh	r0,r0[0x0]
80003d62:	2c fc       	sub	r12,-49
80003d64:	80 00       	ld.sh	r0,r0[0x0]
80003d66:	36 ec       	mov	r12,110

80003d68 <compare_entered_passwords>:

bool compare_entered_passwords(void)
{
80003d68:	eb cd 40 80 	pushm	r7,lr
80003d6c:	1a 97       	mov	r7,sp
80003d6e:	20 1d       	sub	sp,4
	uint8_t i = 0;
80003d70:	30 08       	mov	r8,0
80003d72:	ef 68 ff ff 	st.b	r7[-1],r8
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
80003d76:	c1 48       	rjmp	80003d9e <compare_entered_passwords+0x36>
	{
		if (temp_password[i] != temp_password1[i])
80003d78:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003d7c:	48 f8       	lddpc	r8,80003db8 <compare_entered_passwords+0x50>
80003d7e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003d82:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80003d86:	48 e8       	lddpc	r8,80003dbc <compare_entered_passwords+0x54>
80003d88:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003d8c:	10 39       	cp.w	r9,r8
80003d8e:	c0 30       	breq	80003d94 <compare_entered_passwords+0x2c>
		{
			return false;
80003d90:	30 08       	mov	r8,0
80003d92:	c0 e8       	rjmp	80003dae <compare_entered_passwords+0x46>
		}
		i++;
80003d94:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003d98:	2f f8       	sub	r8,-1
80003d9a:	ef 68 ff ff 	st.b	r7[-1],r8

bool compare_entered_passwords(void)
{
	uint8_t i = 0;
	//uint32_t *temp_entered_password = &password_block[PASSWORD_SIZE * mode_chosen];
	while (i < 8)
80003d9e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003da2:	30 78       	mov	r8,7
80003da4:	f0 09 18 00 	cp.b	r9,r8
80003da8:	fe 98 ff e8 	brls	80003d78 <compare_entered_passwords+0x10>
		{
			return false;
		}
		i++;
	}
	return true;
80003dac:	30 18       	mov	r8,1
}
80003dae:	10 9c       	mov	r12,r8
80003db0:	2f fd       	sub	sp,-4
80003db2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003db6:	00 00       	add	r0,r0
80003db8:	00 00       	add	r0,r0
80003dba:	02 48       	or	r8,r1
80003dbc:	00 00       	add	r0,r0
80003dbe:	02 68       	and	r8,r1

80003dc0 <read_password>:

void read_password(void)
{
80003dc0:	eb cd 40 80 	pushm	r7,lr
80003dc4:	1a 97       	mov	r7,sp
	Read_button();
80003dc6:	f0 1f 00 06 	mcall	80003ddc <read_password+0x1c>
	if (normal_mode_password_entered == true)
80003dca:	48 68       	lddpc	r8,80003de0 <read_password+0x20>
80003dcc:	11 88       	ld.ub	r8,r8[0x0]
80003dce:	5c 58       	castu.b	r8
80003dd0:	c0 30       	breq	80003dd6 <read_password+0x16>
	{
		compare_with_saved_password();
80003dd2:	f0 1f 00 05 	mcall	80003de4 <read_password+0x24>
	}
}
80003dd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003dda:	00 00       	add	r0,r0
80003ddc:	80 00       	ld.sh	r0,r0[0x0]
80003dde:	36 ec       	mov	r12,110
80003de0:	00 00       	add	r0,r0
80003de2:	03 d9       	ld.ub	r9,r1[0x5]
80003de4:	80 00       	ld.sh	r0,r0[0x0]
80003de6:	3d e8       	mov	r8,-34

80003de8 <compare_with_saved_password>:

bool compare_with_saved_password(void)
{
80003de8:	eb cd 40 80 	pushm	r7,lr
80003dec:	1a 97       	mov	r7,sp
80003dee:	20 2d       	sub	sp,8
	uint8_t i = 0; 
80003df0:	30 08       	mov	r8,0
80003df2:	ef 68 ff fb 	st.b	r7[-5],r8
	uint32_t *temp_stored_password;

	temp_stored_password = encrypt_password((uint32_t *)temp_password);
80003df6:	4b 0c       	lddpc	r12,80003eb4 <compare_with_saved_password+0xcc>
80003df8:	f0 1f 00 30 	mcall	80003eb8 <compare_with_saved_password+0xd0>
80003dfc:	18 98       	mov	r8,r12
80003dfe:	ef 48 ff fc 	st.w	r7[-4],r8

	while (i < 8)
80003e02:	c1 38       	rjmp	80003e28 <compare_with_saved_password+0x40>
	{
		temp_password[i] = temp_stored_password[i];
80003e04:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003e08:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003e0c:	a3 68       	lsl	r8,0x2
80003e0e:	ee fa ff fc 	ld.w	r10,r7[-4]
80003e12:	f4 08 00 08 	add	r8,r10,r8
80003e16:	70 0a       	ld.w	r10,r8[0x0]
80003e18:	4a 78       	lddpc	r8,80003eb4 <compare_with_saved_password+0xcc>
80003e1a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		i++;
80003e1e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003e22:	2f f8       	sub	r8,-1
80003e24:	ef 68 ff fb 	st.b	r7[-5],r8
	uint8_t i = 0; 
	uint32_t *temp_stored_password;

	temp_stored_password = encrypt_password((uint32_t *)temp_password);

	while (i < 8)
80003e28:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003e2c:	30 78       	mov	r8,7
80003e2e:	f0 09 18 00 	cp.b	r9,r8
80003e32:	fe 98 ff e9 	brls	80003e04 <compare_with_saved_password+0x1c>
	{
		temp_password[i] = temp_stored_password[i];
		i++;
	}
	if (normal_mode_chosen == DEVICE_ID)
80003e36:	4a 28       	lddpc	r8,80003ebc <compare_with_saved_password+0xd4>
80003e38:	11 88       	ld.ub	r8,r8[0x0]
80003e3a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003e3e:	30 38       	mov	r8,3
80003e40:	f0 09 18 00 	cp.b	r9,r8
80003e44:	c0 61       	brne	80003e50 <compare_with_saved_password+0x68>
	{
		temp_stored_password = (uint32_t *)Stored_values_ram.device_id_confirm;
80003e46:	49 f8       	lddpc	r8,80003ec0 <compare_with_saved_password+0xd8>
80003e48:	2a 08       	sub	r8,-96
80003e4a:	ef 48 ff fc 	st.w	r7[-4],r8
80003e4e:	c0 c8       	rjmp	80003e66 <compare_with_saved_password+0x7e>
	}
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
80003e50:	49 b8       	lddpc	r8,80003ebc <compare_with_saved_password+0xd4>
80003e52:	11 88       	ld.ub	r8,r8[0x0]
80003e54:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003e58:	30 48       	mov	r8,4
80003e5a:	f0 09 18 00 	cp.b	r9,r8
80003e5e:	c0 41       	brne	80003e66 <compare_with_saved_password+0x7e>
	{
		temp_stored_password = (uint32_t *)Stored_values_ram.unlock_password;
80003e60:	49 88       	lddpc	r8,80003ec0 <compare_with_saved_password+0xd8>
80003e62:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	i = 0;
80003e66:	30 08       	mov	r8,0
80003e68:	ef 68 ff fb 	st.b	r7[-5],r8
	while (i < 8)
80003e6c:	c1 78       	rjmp	80003e9a <compare_with_saved_password+0xb2>
	{
		if (temp_stored_password[i] != temp_password[i])
80003e6e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003e72:	a3 68       	lsl	r8,0x2
80003e74:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003e78:	f2 08 00 08 	add	r8,r9,r8
80003e7c:	70 09       	ld.w	r9,r8[0x0]
80003e7e:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80003e82:	48 d8       	lddpc	r8,80003eb4 <compare_with_saved_password+0xcc>
80003e84:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80003e88:	10 39       	cp.w	r9,r8
80003e8a:	c0 30       	breq	80003e90 <compare_with_saved_password+0xa8>
		{
			return false;
80003e8c:	30 08       	mov	r8,0
80003e8e:	c0 e8       	rjmp	80003eaa <compare_with_saved_password+0xc2>
		}
		i++;
80003e90:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80003e94:	2f f8       	sub	r8,-1
80003e96:	ef 68 ff fb 	st.b	r7[-5],r8
	else if (normal_mode_chosen == UNLOCK_CRYPTX2)
	{
		temp_stored_password = (uint32_t *)Stored_values_ram.unlock_password;
	}
	i = 0;
	while (i < 8)
80003e9a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80003e9e:	30 78       	mov	r8,7
80003ea0:	f0 09 18 00 	cp.b	r9,r8
80003ea4:	fe 98 ff e5 	brls	80003e6e <compare_with_saved_password+0x86>
		{
			return false;
		}
		i++;
	}
	return true;
80003ea8:	30 18       	mov	r8,1
}
80003eaa:	10 9c       	mov	r12,r8
80003eac:	2f ed       	sub	sp,-8
80003eae:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eb2:	00 00       	add	r0,r0
80003eb4:	00 00       	add	r0,r0
80003eb6:	02 48       	or	r8,r1
80003eb8:	80 00       	ld.sh	r0,r0[0x0]
80003eba:	2c 1c       	sub	r12,-63
80003ebc:	00 00       	add	r0,r0
80003ebe:	03 db       	ld.ub	r11,r1[0x5]
80003ec0:	00 00       	add	r0,r0
80003ec2:	08 84       	andn	r4,r4

80003ec4 <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc)
{
80003ec4:	eb cd 40 80 	pushm	r7,lr
80003ec8:	1a 97       	mov	r7,sp
80003eca:	20 2d       	sub	sp,8
80003ecc:	ef 4c ff f8 	st.w	r7[-8],r12
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80003ed0:	49 0b       	lddpc	r11,80003f10 <tc_init+0x4c>
80003ed2:	ee fc ff f8 	ld.w	r12,r7[-8]
80003ed6:	f0 1f 00 10 	mcall	80003f14 <tc_init+0x50>
	 * Set the compare triggers.
	 * We configure it to count every 10 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 10 ms, hence RC = (fPBA / 8) / 100
	 * to get an interrupt every 10 ms.
	 */
	temp_value = tc_write_rc(tc, EXAMPLE_TC_CHANNEL, 20625 /*(sysclk_get_pba_hz() / 8 / 100)*/);
80003eda:	e0 6a 50 91 	mov	r10,20625
80003ede:	30 0b       	mov	r11,0
80003ee0:	ee fc ff f8 	ld.w	r12,r7[-8]
80003ee4:	f0 1f 00 0d 	mcall	80003f18 <tc_init+0x54>
80003ee8:	18 98       	mov	r8,r12
80003eea:	5c 88       	casts.h	r8
80003eec:	5c 78       	castu.h	r8
80003eee:	ef 48 ff fc 	st.w	r7[-4],r8
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80003ef2:	48 ba       	lddpc	r10,80003f1c <tc_init+0x58>
80003ef4:	30 0b       	mov	r11,0
80003ef6:	ee fc ff f8 	ld.w	r12,r7[-8]
80003efa:	f0 1f 00 0a 	mcall	80003f20 <tc_init+0x5c>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80003efe:	30 0b       	mov	r11,0
80003f00:	ee fc ff f8 	ld.w	r12,r7[-8]
80003f04:	f0 1f 00 08 	mcall	80003f24 <tc_init+0x60>
}
80003f08:	2f ed       	sub	sp,-8
80003f0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f0e:	00 00       	add	r0,r0
80003f10:	80 00       	ld.sh	r0,r0[0x0]
80003f12:	ed 40 80 00 	st.w	r6[-32768],r0
80003f16:	97 50       	st.w	r11[0x14],r0
80003f18:	80 00       	ld.sh	r0,r0[0x0]
80003f1a:	99 18       	st.w	r12[0x4],r8
80003f1c:	80 00       	ld.sh	r0,r0[0x0]
80003f1e:	ed 48 80 00 	st.w	r6[-32768],r8
80003f22:	95 68       	st.w	r10[0x18],r8
80003f24:	80 00       	ld.sh	r0,r0[0x0]
80003f26:	98 a4       	ld.uh	r4,r12[0x4]

80003f28 <tc_task>:
 * - Register the TC interrupt
 * - Configure, enable the CPCS (RC compare match) interrupt,
 * - and start a TC channel in waveform mode
 */
void tc_task (void)
{
80003f28:	eb cd 40 80 	pushm	r7,lr
80003f2c:	1a 97       	mov	r7,sp
80003f2e:	20 1d       	sub	sp,4
	volatile avr32_tc_t *tc = EXAMPLE_TC;
80003f30:	fe 78 38 00 	mov	r8,-51200
80003f34:	ef 48 ff fc 	st.w	r7[-4],r8
	 * peripheral clocks, except for the peripheral clocks explicitly
	 * enabled in conf_clock.h.
	 */
	//sysclk_init();
	// Enable the clock to the selected example Timer/counter peripheral module.
	sysclk_enable_peripheral_clock(EXAMPLE_TC);
80003f38:	fe 7c 38 00 	mov	r12,-51200
80003f3c:	f0 1f 00 0c 	mcall	80003f6c <tc_task+0x44>
	// Disable the interrupts
	cpu_irq_disable();
80003f40:	d3 03       	ssrf	0x10
	// Initialize interrupt vectors.
	//INTC_init_interrupts();
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80003f42:	30 0a       	mov	r10,0
80003f44:	e0 6b 01 c0 	mov	r11,448
80003f48:	48 ac       	lddpc	r12,80003f70 <tc_task+0x48>
80003f4a:	f0 1f 00 0b 	mcall	80003f74 <tc_task+0x4c>
	// Enable the interrupts
	cpu_irq_enable();
80003f4e:	d5 03       	csrf	0x10
	// Initialize the timer module
	tc_init(tc);
80003f50:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f54:	f0 1f 00 09 	mcall	80003f78 <tc_task+0x50>
	// Initialize push buttons
	push_buttons_init();
80003f58:	f0 1f 00 09 	mcall	80003f7c <tc_task+0x54>

    calculate_hash((uint32_t *)CipherKey256, 8, CipherKey256_hash);
80003f5c:	48 9a       	lddpc	r10,80003f80 <tc_task+0x58>
80003f5e:	30 8b       	mov	r11,8
80003f60:	48 9c       	lddpc	r12,80003f84 <tc_task+0x5c>
80003f62:	f0 1f 00 0a 	mcall	80003f88 <tc_task+0x60>
			 //*/
			 //// Reset the timer update flag to wait till next timer interrupt
			//update_timer = false;
		//}
	//}
}
80003f66:	2f fd       	sub	sp,-4
80003f68:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f6c:	80 00       	ld.sh	r0,r0[0x0]
80003f6e:	33 b8       	mov	r8,59
80003f70:	80 00       	ld.sh	r0,r0[0x0]
80003f72:	35 cc       	mov	r12,92
80003f74:	80 00       	ld.sh	r0,r0[0x0]
80003f76:	90 28       	ld.sh	r8,r8[0x4]
80003f78:	80 00       	ld.sh	r0,r0[0x0]
80003f7a:	3e c4       	mov	r4,-20
80003f7c:	80 00       	ld.sh	r0,r0[0x0]
80003f7e:	39 f4       	mov	r4,-97
80003f80:	00 00       	add	r0,r0
80003f82:	03 e0       	ld.ub	r0,r1[0x6]
80003f84:	80 00       	ld.sh	r0,r0[0x0]
80003f86:	ec 00       	*unknown*
80003f88:	80 00       	ld.sh	r0,r0[0x0]
80003f8a:	2e f4       	sub	r4,-17

80003f8c <init_hmatrix>:


/*! \brief Initializes the HSB bus matrix.
 */
static void init_hmatrix(void)
{
80003f8c:	eb cd 40 80 	pushm	r7,lr
80003f90:	1a 97       	mov	r7,sp
80003f92:	20 1d       	sub	sp,4
  // Set flashc master type to last default to save one cycle for
  // each branch.
  avr32_hmatrix_scfg_t scfg;

  scfg = AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH];
80003f94:	fe 68 10 00 	mov	r8,-126976
80003f98:	71 08       	ld.w	r8,r8[0x40]
80003f9a:	ef 48 ff fc 	st.w	r7[-4],r8
  scfg.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_LAST_DEFAULT;
80003f9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fa2:	30 19       	mov	r9,1
80003fa4:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
80003fa8:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_FLASH] = scfg;
80003fac:	fe 68 10 00 	mov	r8,-126976
80003fb0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003fb4:	f1 49 00 40 	st.w	r8[64],r9
}
80003fb8:	2f fd       	sub	sp,-4
80003fba:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fbe:	d7 03       	nop

80003fc0 <aes_task>:
 * 8N1.
 * Then it sets up the interrupt handler and waits for a USART interrupt to
 * trigger.
 */
void aes_task (void)
{
80003fc0:	eb cd 40 80 	pushm	r7,lr
80003fc4:	1a 97       	mov	r7,sp
  init_hmatrix();
80003fc6:	f0 1f 00 03 	mcall	80003fd0 <aes_task+0x10>
}
80003fca:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fce:	00 00       	add	r0,r0
80003fd0:	80 00       	ld.sh	r0,r0[0x0]
80003fd2:	3f 8c       	mov	r12,-8

80003fd4 <aes_init>:
	0x5A43D875,	// AES-CTR IV (BYTE2)
	0x00000001	// COUNTER
};

void aes_init (unsigned char Processing_Mode)
{
80003fd4:	eb cd 40 80 	pushm	r7,lr
80003fd8:	1a 97       	mov	r7,sp
80003fda:	20 3d       	sub	sp,12
80003fdc:	18 98       	mov	r8,r12
80003fde:	ef 68 ff f4 	st.b	r7[-12],r8
	  aes_config_t    AesConf;        // AES config structure
	  // Configure the AES.
	  AesConf.ProcessingMode = Processing_Mode;   // Cipher
80003fe2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003fe6:	ef 68 ff f8 	st.b	r7[-8],r8
	  AesConf.ProcessingDelay = 0;                // No delay: best performance
80003fea:	30 08       	mov	r8,0
80003fec:	ef 68 ff f9 	st.b	r7[-7],r8
	  AesConf.StartMode = AES_START_MODE_AUTO;    // Manual mode
80003ff0:	30 18       	mov	r8,1
80003ff2:	ef 68 ff fa 	st.b	r7[-6],r8
	  AesConf.KeySize = AES_KEY_SIZE_256;         // 256bit cryptographic key
80003ff6:	30 28       	mov	r8,2
80003ff8:	ef 68 ff fb 	st.b	r7[-5],r8
	  AesConf.OpMode = AES_CBC_MODE;              // CTR cipher mode
80003ffc:	30 18       	mov	r8,1
80003ffe:	ef 68 ff fc 	st.b	r7[-4],r8
	  AesConf.LodMode = 0;                        // LODMODE == 0 : the DATRDY flag
80004002:	30 08       	mov	r8,0
80004004:	ef 68 ff fd 	st.b	r7[-3],r8
	  // is cleared when one of the output data registers is read (because we're in
	  // manual mode).
	  AesConf.CFBSize = 0;                        // Don't-care because we're using the CTR mode.
80004008:	30 08       	mov	r8,0
8000400a:	ef 68 ff fe 	st.b	r7[-2],r8
	  AesConf.CounterMeasureMask = 0;             // Disable all counter measures.
8000400e:	30 08       	mov	r8,0
80004010:	ef 68 ff ff 	st.b	r7[-1],r8
	  aes_configure(&AVR32_AES, &AesConf);
80004014:	ee c8 00 08 	sub	r8,r7,8
80004018:	10 9b       	mov	r11,r8
8000401a:	fc 7c 00 00 	mov	r12,-196608
8000401e:	f0 1f 00 06 	mcall	80004034 <aes_init+0x60>
	  aes_set_key(&AVR32_AES, CipherKey256);
80004022:	48 6b       	lddpc	r11,80004038 <aes_init+0x64>
80004024:	fc 7c 00 00 	mov	r12,-196608
80004028:	f0 1f 00 05 	mcall	8000403c <aes_init+0x68>

	  //ccountt0 = Get_system_register(AVR32_COUNT);
	  // Start encryption.
	  //aes_start(&AVR32_AES);

}
8000402c:	2f dd       	sub	sp,-12
8000402e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004032:	00 00       	add	r0,r0
80004034:	80 00       	ld.sh	r0,r0[0x0]
80004036:	7f e4       	ld.w	r4,pc[0x78]
80004038:	80 00       	ld.sh	r0,r0[0x0]
8000403a:	ec 00       	*unknown*
8000403c:	80 00       	ld.sh	r0,r0[0x0]
8000403e:	80 74       	ld.sh	r4,r0[0xe]

80004040 <apply_aes_encryption>:
uint32_t aes_out_data[128] = {0};

void apply_aes_encryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint16_t len, uint32_t sector_id)
{
80004040:	eb cd 40 80 	pushm	r7,lr
80004044:	1a 97       	mov	r7,sp
80004046:	20 6d       	sub	sp,24
80004048:	ef 4c ff f4 	st.w	r7[-12],r12
8000404c:	ef 4b ff f0 	st.w	r7[-16],r11
80004050:	14 98       	mov	r8,r10
80004052:	ef 49 ff e8 	st.w	r7[-24],r9
80004056:	ef 58 ff ec 	st.h	r7[-20],r8
	uint8_t i, loop_counter;
	uint32_t temp;
	
	temp = CipherKey256_hash[0];
8000405a:	4b 68       	lddpc	r8,80004130 <apply_aes_encryption+0xf0>
8000405c:	70 08       	ld.w	r8,r8[0x0]
8000405e:	ef 48 ff fc 	st.w	r7[-4],r8

	CipherKey256_hash[0] = CipherKey256_hash[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
80004062:	4b 48       	lddpc	r8,80004130 <apply_aes_encryption+0xf0>
80004064:	70 09       	ld.w	r9,r8[0x0]
80004066:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000406a:	10 59       	eor	r9,r8
8000406c:	4b 18       	lddpc	r8,80004130 <apply_aes_encryption+0xf0>
8000406e:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
							 
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);	
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);	
80004070:	4b 0b       	lddpc	r11,80004130 <apply_aes_encryption+0xf0>
80004072:	fc 7c 00 00 	mov	r12,-196608
80004076:	f0 1f 00 30 	mcall	80004134 <apply_aes_encryption+0xf4>
	
	CipherKey256_hash[0] = temp;
8000407a:	4a e8       	lddpc	r8,80004130 <apply_aes_encryption+0xf0>
8000407c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004080:	91 09       	st.w	r8[0x0],r9
	
	loop_counter = len >> 2;
80004082:	ef 18 ff ec 	ld.uh	r8,r7[-20]
80004086:	a3 88       	lsr	r8,0x2
80004088:	5c 88       	casts.h	r8
8000408a:	ef 68 ff fb 	st.b	r7[-5],r8
		
	for (i = 0; i < loop_counter; i+=4)
8000408e:	30 08       	mov	r8,0
80004090:	ef 68 ff fa 	st.b	r7[-6],r8
80004094:	c2 78       	rjmp	800040e2 <apply_aes_encryption+0xa2>
	{
		aes_init(AES_PMODE_CIPHER);
80004096:	30 1c       	mov	r12,1
80004098:	f0 1f 00 28 	mcall	80004138 <apply_aes_encryption+0xf8>
			
		aes_write_inputdata(aes, &aes_in_data_t[i]);
8000409c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800040a0:	a3 68       	lsl	r8,0x2
800040a2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800040a6:	f2 08 00 08 	add	r8,r9,r8
800040aa:	10 9b       	mov	r11,r8
800040ac:	ee fc ff f4 	ld.w	r12,r7[-12]
800040b0:	f0 1f 00 23 	mcall	8000413c <apply_aes_encryption+0xfc>

		while (!(aes->isr & 0x00000001));
800040b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800040b8:	70 78       	ld.w	r8,r8[0x1c]
800040ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800040be:	cf b0       	breq	800040b4 <apply_aes_encryption+0x74>

		aes_read_outputdata(aes, &aes_out_data[i]);
800040c0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800040c4:	f0 09 15 02 	lsl	r9,r8,0x2
800040c8:	49 e8       	lddpc	r8,80004140 <apply_aes_encryption+0x100>
800040ca:	f2 08 00 08 	add	r8,r9,r8
800040ce:	10 9b       	mov	r11,r8
800040d0:	ee fc ff f4 	ld.w	r12,r7[-12]
800040d4:	f0 1f 00 1c 	mcall	80004144 <apply_aes_encryption+0x104>
	
	CipherKey256_hash[0] = temp;
	
	loop_counter = len >> 2;
		
	for (i = 0; i < loop_counter; i+=4)
800040d8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800040dc:	2f c8       	sub	r8,-4
800040de:	ef 68 ff fa 	st.b	r7[-6],r8
800040e2:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800040e6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800040ea:	f0 09 18 00 	cp.b	r9,r8
800040ee:	cd 43       	brcs	80004096 <apply_aes_encryption+0x56>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
800040f0:	30 08       	mov	r8,0
800040f2:	ef 68 ff fa 	st.b	r7[-6],r8
800040f6:	c1 38       	rjmp	8000411c <apply_aes_encryption+0xdc>
	{
		aes_in_data_t[i] = aes_out_data[i];
800040f8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800040fc:	a3 68       	lsl	r8,0x2
800040fe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004102:	f2 08 00 08 	add	r8,r9,r8
80004106:	ef 3a ff fa 	ld.ub	r10,r7[-6]
8000410a:	48 e9       	lddpc	r9,80004140 <apply_aes_encryption+0x100>
8000410c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80004110:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_out_data[i]);
	}
	for (i = 0; i < loop_counter; i++)
80004112:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004116:	2f f8       	sub	r8,-1
80004118:	ef 68 ff fa 	st.b	r7[-6],r8
8000411c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004120:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004124:	f0 09 18 00 	cp.b	r9,r8
80004128:	ce 83       	brcs	800040f8 <apply_aes_encryption+0xb8>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
8000412a:	2f ad       	sub	sp,-24
8000412c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004130:	00 00       	add	r0,r0
80004132:	03 e0       	ld.ub	r0,r1[0x6]
80004134:	80 00       	ld.sh	r0,r0[0x0]
80004136:	81 02       	st.w	r0[0x0],r2
80004138:	80 00       	ld.sh	r0,r0[0x0]
8000413a:	3f d4       	mov	r4,-3
8000413c:	80 00       	ld.sh	r0,r0[0x0]
8000413e:	81 5e       	st.w	r0[0x14],lr
80004140:	00 00       	add	r0,r0
80004142:	04 0c       	add	r12,r2
80004144:	80 00       	ld.sh	r0,r0[0x0]
80004146:	81 f6       	st.w	r0[0x3c],r6

80004148 <apply_aes_decryption>:


void apply_aes_decryption (volatile avr32_aes_t *aes, uint32_t *aes_in_data_t, uint16_t len, uint32_t sector_id)
{
80004148:	eb cd 40 80 	pushm	r7,lr
8000414c:	1a 97       	mov	r7,sp
8000414e:	20 6d       	sub	sp,24
80004150:	ef 4c ff f4 	st.w	r7[-12],r12
80004154:	ef 4b ff f0 	st.w	r7[-16],r11
80004158:	14 98       	mov	r8,r10
8000415a:	ef 49 ff e8 	st.w	r7[-24],r9
8000415e:	ef 58 ff ec 	st.h	r7[-20],r8
	
	uint8_t i, loop_counter;
	uint32_t temp;

	temp = CipherKey256_hash[0];
80004162:	4b 68       	lddpc	r8,80004238 <apply_aes_decryption+0xf0>
80004164:	70 08       	ld.w	r8,r8[0x0]
80004166:	ef 48 ff fc 	st.w	r7[-4],r8

	CipherKey256_hash[0] = CipherKey256_hash[0] ^ sector_id;	// chunk variable is the SHA-2 of CipherKey256
8000416a:	4b 48       	lddpc	r8,80004238 <apply_aes_decryption+0xf0>
8000416c:	70 09       	ld.w	r9,r8[0x0]
8000416e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004172:	10 59       	eor	r9,r8
80004174:	4b 18       	lddpc	r8,80004238 <apply_aes_decryption+0xf0>
80004176:	91 09       	st.w	r8[0x0],r9
							// its least significant DWORD i.e. chunk.a is XORed with the sector address
	
	//aes_set_initvector(&AVR32_AES, (unsigned long int *)InitVectorCBC);
	aes_set_initvector(&AVR32_AES, (unsigned long int *)CipherKey256_hash);
80004178:	4b 0b       	lddpc	r11,80004238 <apply_aes_decryption+0xf0>
8000417a:	fc 7c 00 00 	mov	r12,-196608
8000417e:	f0 1f 00 30 	mcall	8000423c <apply_aes_decryption+0xf4>
	
	CipherKey256_hash[0] = temp;
80004182:	4a e8       	lddpc	r8,80004238 <apply_aes_decryption+0xf0>
80004184:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004188:	91 09       	st.w	r8[0x0],r9

	loop_counter = len >> 2;
8000418a:	ef 18 ff ec 	ld.uh	r8,r7[-20]
8000418e:	a3 88       	lsr	r8,0x2
80004190:	5c 88       	casts.h	r8
80004192:	ef 68 ff fb 	st.b	r7[-5],r8

	for (i = 0; i < loop_counter; i+=4)
80004196:	30 08       	mov	r8,0
80004198:	ef 68 ff fa 	st.b	r7[-6],r8
8000419c:	c2 78       	rjmp	800041ea <apply_aes_decryption+0xa2>
	{
		aes_init(AES_PMODE_DECIPHER);
8000419e:	30 0c       	mov	r12,0
800041a0:	f0 1f 00 28 	mcall	80004240 <apply_aes_decryption+0xf8>

		aes_write_inputdata(aes, &aes_in_data_t[i]);
800041a4:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800041a8:	a3 68       	lsl	r8,0x2
800041aa:	ee f9 ff f0 	ld.w	r9,r7[-16]
800041ae:	f2 08 00 08 	add	r8,r9,r8
800041b2:	10 9b       	mov	r11,r8
800041b4:	ee fc ff f4 	ld.w	r12,r7[-12]
800041b8:	f0 1f 00 23 	mcall	80004244 <apply_aes_decryption+0xfc>

		while (!(aes->isr & 0x00000001));
800041bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800041c0:	70 78       	ld.w	r8,r8[0x1c]
800041c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800041c6:	cf b0       	breq	800041bc <apply_aes_decryption+0x74>

		aes_read_outputdata(aes, &aes_out_data[i]);
800041c8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800041cc:	f0 09 15 02 	lsl	r9,r8,0x2
800041d0:	49 e8       	lddpc	r8,80004248 <apply_aes_decryption+0x100>
800041d2:	f2 08 00 08 	add	r8,r9,r8
800041d6:	10 9b       	mov	r11,r8
800041d8:	ee fc ff f4 	ld.w	r12,r7[-12]
800041dc:	f0 1f 00 1c 	mcall	8000424c <apply_aes_decryption+0x104>
	
	CipherKey256_hash[0] = temp;

	loop_counter = len >> 2;

	for (i = 0; i < loop_counter; i+=4)
800041e0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800041e4:	2f c8       	sub	r8,-4
800041e6:	ef 68 ff fa 	st.b	r7[-6],r8
800041ea:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800041ee:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800041f2:	f0 09 18 00 	cp.b	r9,r8
800041f6:	cd 43       	brcs	8000419e <apply_aes_decryption+0x56>

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < loop_counter; i++)
800041f8:	30 08       	mov	r8,0
800041fa:	ef 68 ff fa 	st.b	r7[-6],r8
800041fe:	c1 38       	rjmp	80004224 <apply_aes_decryption+0xdc>
	{
		aes_in_data_t[i] = aes_out_data[i];
80004200:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004204:	a3 68       	lsl	r8,0x2
80004206:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000420a:	f2 08 00 08 	add	r8,r9,r8
8000420e:	ef 3a ff fa 	ld.ub	r10,r7[-6]
80004212:	48 e9       	lddpc	r9,80004248 <apply_aes_decryption+0x100>
80004214:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80004218:	91 09       	st.w	r8[0x0],r9

		aes_read_outputdata(aes, &aes_out_data[i]);
		
		//aes_set_initvector(&AVR32_AES, &aes_in_data_t[i]);
	}
	for (i = 0; i < loop_counter; i++)
8000421a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000421e:	2f f8       	sub	r8,-1
80004220:	ef 68 ff fa 	st.b	r7[-6],r8
80004224:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80004228:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000422c:	f0 09 18 00 	cp.b	r9,r8
80004230:	ce 83       	brcs	80004200 <apply_aes_decryption+0xb8>
	{
		aes_in_data_t[i] = aes_out_data[i];
	}

}
80004232:	2f ad       	sub	sp,-24
80004234:	e3 cd 80 80 	ldm	sp++,r7,pc
80004238:	00 00       	add	r0,r0
8000423a:	03 e0       	ld.ub	r0,r1[0x6]
8000423c:	80 00       	ld.sh	r0,r0[0x0]
8000423e:	81 02       	st.w	r0[0x0],r2
80004240:	80 00       	ld.sh	r0,r0[0x0]
80004242:	3f d4       	mov	r4,-3
80004244:	80 00       	ld.sh	r0,r0[0x0]
80004246:	81 5e       	st.w	r0[0x14],lr
80004248:	00 00       	add	r0,r0
8000424a:	04 0c       	add	r12,r2
8000424c:	80 00       	ld.sh	r0,r0[0x0]
8000424e:	81 f6       	st.w	r0[0x3c],r6

80004250 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
# define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80004250:	eb cd 40 80 	pushm	r7,lr
80004254:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004256:	30 3b       	mov	r11,3
80004258:	34 3c       	mov	r12,67
8000425a:	f0 1f 00 17 	mcall	800042b4 <board_init+0x64>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000425e:	30 3b       	mov	r11,3
80004260:	36 5c       	mov	r12,101
80004262:	f0 1f 00 15 	mcall	800042b4 <board_init+0x64>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004266:	30 3b       	mov	r11,3
80004268:	36 9c       	mov	r12,105
8000426a:	f0 1f 00 13 	mcall	800042b4 <board_init+0x64>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000426e:	30 3b       	mov	r11,3
80004270:	36 6c       	mov	r12,102
80004272:	f0 1f 00 11 	mcall	800042b4 <board_init+0x64>

	gpio_configure_pin(GPIO_PUSH_BUTTON_SW2,GPIO_DIR_INPUT);
80004276:	30 0b       	mov	r11,0
80004278:	32 ac       	mov	r12,42
8000427a:	f0 1f 00 0f 	mcall	800042b4 <board_init+0x64>
# define AT45DBX_ENABLE_NPCS_PIN(NPCS, unused) \
	{AT45DBX_SPI_NPCS##NPCS##_PIN, AT45DBX_SPI_NPCS##NPCS##_FUNCTION},
	MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
# undef AT45DBX_ENABLE_NPCS_PIN
	};
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
8000427e:	30 4b       	mov	r11,4
80004280:	48 ec       	lddpc	r12,800042b8 <board_init+0x68>
80004282:	f0 1f 00 0f 	mcall	800042bc <board_init+0x6c>
		{SD_SLOT_4BITS_DATA1_PIN, SD_SLOT_4BITS_DATA1_FUNCTION},
		{SD_SLOT_4BITS_DATA2_PIN, SD_SLOT_4BITS_DATA2_FUNCTION},
		{SD_SLOT_4BITS_DATA3_PIN, SD_SLOT_4BITS_DATA3_FUNCTION}
	};
	// Configure Slot 0 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP,
80004286:	30 ab       	mov	r11,10
80004288:	48 ec       	lddpc	r12,800042c0 <board_init+0x70>
8000428a:	f0 1f 00 0d 	mcall	800042bc <board_init+0x6c>
			sizeof(SD_MMC_MCI_GPIO_MAP) / sizeof(SD_MMC_MCI_GPIO_MAP[0]));
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_CARD_DETECT);
8000428e:	32 bc       	mov	r12,43
80004290:	f0 1f 00 0d 	mcall	800042c4 <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_8BITS_WRITE_PROTECT);
80004294:	36 cc       	mov	r12,108
80004296:	f0 1f 00 0c 	mcall	800042c4 <board_init+0x74>

	// Configure Slot 1 I/Os
	gpio_enable_module(SD_MMC_MCI_GPIO_MAP_1,
8000429a:	30 6b       	mov	r11,6
8000429c:	48 bc       	lddpc	r12,800042c8 <board_init+0x78>
8000429e:	f0 1f 00 08 	mcall	800042bc <board_init+0x6c>
	sizeof(SD_MMC_MCI_GPIO_MAP_1) / sizeof(SD_MMC_MCI_GPIO_MAP_1[0]));
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_CARD_DETECT);
800042a2:	32 8c       	mov	r12,40
800042a4:	f0 1f 00 08 	mcall	800042c4 <board_init+0x74>
	gpio_enable_pin_pull_up(SD_SLOT_4BITS_WRITE_PROTECT);
800042a8:	32 6c       	mov	r12,38
800042aa:	f0 1f 00 07 	mcall	800042c4 <board_init+0x74>
		{AVR32_USART3_TXD_0_3_PIN, AVR32_USART3_TXD_0_3_FUNCTION },
	};
	gpio_enable_module(COMPORT3_GPIO_MAP,
			sizeof(COMPORT3_GPIO_MAP) / sizeof(COMPORT3_GPIO_MAP[0]));
#endif
}
800042ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800042b2:	00 00       	add	r0,r0
800042b4:	80 00       	ld.sh	r0,r0[0x0]
800042b6:	8b e2       	st.w	r5[0x38],r2
800042b8:	80 00       	ld.sh	r0,r0[0x0]
800042ba:	ed 4c 80 00 	st.w	r6[-32768],r12
800042be:	89 d4       	st.w	r4[0x34],r4
800042c0:	80 00       	ld.sh	r0,r0[0x0]
800042c2:	ed 54 80 00 	st.h	r6[-32768],r4
800042c6:	8b a8       	st.w	r5[0x28],r8
800042c8:	80 00       	ld.sh	r0,r0[0x0]
800042ca:	ed 68 eb cd 	st.b	r6[-5171],r8

800042cc <LED_Off>:
  return Tst_bits(LED_State, leds);
}


void LED_Off(U32 leds)
{
800042cc:	eb cd 40 80 	pushm	r7,lr
800042d0:	1a 97       	mov	r7,sp
800042d2:	20 4d       	sub	sp,16
800042d4:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800042d8:	4a 98       	lddpc	r8,8000437c <LED_Off+0xb0>
800042da:	21 08       	sub	r8,16
800042dc:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800042e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042e4:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800042e8:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
800042ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800042f0:	f0 09 11 ff 	rsub	r9,r8,-1
800042f4:	4a 38       	lddpc	r8,80004380 <LED_Off+0xb4>
800042f6:	70 08       	ld.w	r8,r8[0x0]
800042f8:	10 69       	and	r9,r8
800042fa:	4a 28       	lddpc	r8,80004380 <LED_Off+0xb4>
800042fc:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800042fe:	c3 78       	rjmp	8000436c <LED_Off+0xa0>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80004300:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004304:	5c 98       	brev	r8
80004306:	f0 08 12 00 	clz	r8,r8
8000430a:	5c 58       	castu.b	r8
8000430c:	2f f8       	sub	r8,-1
8000430e:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80004312:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004316:	a5 68       	lsl	r8,0x4
80004318:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000431c:	f2 08 00 08 	add	r8,r9,r8
80004320:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004324:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004328:	70 08       	ld.w	r8,r8[0x0]
8000432a:	a9 68       	lsl	r8,0x8
8000432c:	e0 28 f0 00 	sub	r8,61440
80004330:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80004334:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004338:	70 19       	ld.w	r9,r8[0x4]
8000433a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000433e:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80004342:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004346:	70 19       	ld.w	r9,r8[0x4]
80004348:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000434c:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80004350:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004354:	70 19       	ld.w	r9,r8[0x4]
80004356:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000435a:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
8000435c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004360:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004364:	f2 08 0a 48 	lsr	r8,r9,r8
80004368:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
8000436c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004370:	58 08       	cp.w	r8,0
80004372:	cc 71       	brne	80004300 <LED_Off+0x34>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80004374:	2f cd       	sub	sp,-16
80004376:	e3 cd 80 80 	ldm	sp++,r7,pc
8000437a:	00 00       	add	r0,r0
8000437c:	80 00       	ld.sh	r0,r0[0x0]
8000437e:	ed 74 00 00 	stcond	r6[0],r4
80004382:	01 30       	ld.ub	r0,r0++

80004384 <LED_On>:


void LED_On(U32 leds)
{
80004384:	eb cd 40 80 	pushm	r7,lr
80004388:	1a 97       	mov	r7,sp
8000438a:	20 4d       	sub	sp,16
8000438c:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80004390:	4a 88       	lddpc	r8,80004430 <LED_On+0xac>
80004392:	21 08       	sub	r8,16
80004394:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004398:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000439c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800043a0:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
800043a4:	4a 48       	lddpc	r8,80004434 <LED_On+0xb0>
800043a6:	70 09       	ld.w	r9,r8[0x0]
800043a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800043ac:	10 49       	or	r9,r8
800043ae:	4a 28       	lddpc	r8,80004434 <LED_On+0xb0>
800043b0:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800043b2:	c3 78       	rjmp	80004420 <LED_On+0x9c>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
800043b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800043b8:	5c 98       	brev	r8
800043ba:	f0 08 12 00 	clz	r8,r8
800043be:	5c 58       	castu.b	r8
800043c0:	2f f8       	sub	r8,-1
800043c2:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
800043c6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800043ca:	a5 68       	lsl	r8,0x4
800043cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800043d0:	f2 08 00 08 	add	r8,r9,r8
800043d4:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800043d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800043dc:	70 08       	ld.w	r8,r8[0x0]
800043de:	a9 68       	lsl	r8,0x8
800043e0:	e0 28 f0 00 	sub	r8,61440
800043e4:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800043e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800043ec:	70 19       	ld.w	r9,r8[0x4]
800043ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043f2:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800043f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800043fa:	70 19       	ld.w	r9,r8[0x4]
800043fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004400:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80004404:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004408:	70 19       	ld.w	r9,r8[0x4]
8000440a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000440e:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80004410:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004414:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004418:	f2 08 0a 48 	lsr	r8,r9,r8
8000441c:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004420:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004424:	58 08       	cp.w	r8,0
80004426:	cc 71       	brne	800043b4 <LED_On+0x30>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80004428:	2f cd       	sub	sp,-16
8000442a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000442e:	00 00       	add	r0,r0
80004430:	80 00       	ld.sh	r0,r0[0x0]
80004432:	ed 74 00 00 	stcond	r6[0],r4
80004436:	01 30       	ld.ub	r0,r0++

80004438 <et024006_Init>:
 *  @param cpu_hz CPU speed in Hz. This is needed for power up timings.
 *  @param hsb_hz HSB bus speed in Hz. This parameter is needed to set up the SMC.
 *  If SPI mode is used then this parameter is ignored.
 */
void et024006_Init( unsigned long cpu_hz, unsigned long hsb_hz )
{
80004438:	eb cd 40 80 	pushm	r7,lr
8000443c:	1a 97       	mov	r7,sp
8000443e:	20 2d       	sub	sp,8
80004440:	ef 4c ff fc 	st.w	r7[-4],r12
80004444:	ef 4b ff f8 	st.w	r7[-8],r11
  tft_data.cpu_hz = cpu_hz;
80004448:	49 08       	lddpc	r8,80004488 <et024006_Init+0x50>
8000444a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000444e:	91 09       	st.w	r8[0x0],r9
  tft_data.hsb_hz = hsb_hz;
80004450:	48 e8       	lddpc	r8,80004488 <et024006_Init+0x50>
80004452:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004456:	91 19       	st.w	r8[0x4],r9

#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_SPI)
  et024006_InitSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  smc_init(tft_data.hsb_hz);
80004458:	48 c8       	lddpc	r8,80004488 <et024006_Init+0x50>
8000445a:	70 18       	ld.w	r8,r8[0x4]
8000445c:	10 9c       	mov	r12,r8
8000445e:	f0 1f 00 0c 	mcall	8000448c <et024006_Init+0x54>
#endif
  et024006_SetupInterface();
80004462:	f0 1f 00 0c 	mcall	80004490 <et024006_Init+0x58>
  et024006_ResetDisplay();
80004466:	f0 1f 00 0c 	mcall	80004494 <et024006_Init+0x5c>
  et024006_AdjustGamma();
8000446a:	f0 1f 00 0c 	mcall	80004498 <et024006_Init+0x60>
  et024006_GeneralSettings();
8000446e:	f0 1f 00 0c 	mcall	8000449c <et024006_Init+0x64>
  et024006_InterfaceSettings();
80004472:	f0 1f 00 0c 	mcall	800044a0 <et024006_Init+0x68>
  et024006_PowerSettings();
80004476:	f0 1f 00 0c 	mcall	800044a4 <et024006_Init+0x6c>
  et024006_PowerUp();
8000447a:	f0 1f 00 0c 	mcall	800044a8 <et024006_Init+0x70>
  et024006_PowerOn();
8000447e:	f0 1f 00 0c 	mcall	800044ac <et024006_Init+0x74>
}
80004482:	2f ed       	sub	sp,-8
80004484:	e3 cd 80 80 	ldm	sp++,r7,pc
80004488:	00 00       	add	r0,r0
8000448a:	06 0c       	add	r12,r3
8000448c:	80 00       	ld.sh	r0,r0[0x0]
8000448e:	82 90       	ld.uh	r0,r1[0x2]
80004490:	80 00       	ld.sh	r0,r0[0x0]
80004492:	4c 3c       	lddpc	r12,8000459c <et024006_PrintString+0x64>
80004494:	80 00       	ld.sh	r0,r0[0x0]
80004496:	4c 68       	lddpc	r8,800045ac <et024006_PrintString+0x74>
80004498:	80 00       	ld.sh	r0,r0[0x0]
8000449a:	4f 28       	lddpc	r8,80004660 <et024006_PrintString+0x128>
8000449c:	80 00       	ld.sh	r0,r0[0x0]
8000449e:	50 b6       	stdsp	sp[0x2c],r6
800044a0:	80 00       	ld.sh	r0,r0[0x0]
800044a2:	54 52       	stdsp	sp[0x114],r2
800044a4:	80 00       	ld.sh	r0,r0[0x0]
800044a6:	52 c4       	stdsp	sp[0xb0],r4
800044a8:	80 00       	ld.sh	r0,r0[0x0]
800044aa:	54 80       	stdsp	sp[0x120],r0
800044ac:	80 00       	ld.sh	r0,r0[0x0]
800044ae:	5b b4       	cp.w	r4,-5

800044b0 <et024006_DrawFilledRect>:
  }
}


void et024006_DrawFilledRect( uint16_t x, uint16_t y, uint16_t width, uint16_t height, et024006_color_t color )
{
800044b0:	eb cd 40 80 	pushm	r7,lr
800044b4:	1a 97       	mov	r7,sp
800044b6:	20 7d       	sub	sp,28
800044b8:	ef 5c ff f4 	st.h	r7[-12],r12
800044bc:	ef 5b ff f0 	st.h	r7[-16],r11
800044c0:	ef 5a ff ec 	st.h	r7[-20],r10
800044c4:	ef 59 ff e8 	st.h	r7[-24],r9
800044c8:	ef 58 ff e4 	st.h	r7[-28],r8
  Assert( y < ET024006_HEIGHT );
  Assert( width > 0 );
  Assert( height > 0 );

  // Compute bottom right point.
  uint16_t x2 = x + width - 1;
800044cc:	ef 09 ff f4 	ld.sh	r9,r7[-12]
800044d0:	ef 08 ff ec 	ld.sh	r8,r7[-20]
800044d4:	f2 08 00 08 	add	r8,r9,r8
800044d8:	5c 88       	casts.h	r8
800044da:	20 18       	sub	r8,1
800044dc:	ef 58 ff f8 	st.h	r7[-8],r8
  uint16_t y2 = y + height - 1;
800044e0:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800044e4:	ef 08 ff e8 	ld.sh	r8,r7[-24]
800044e8:	f2 08 00 08 	add	r8,r9,r8
800044ec:	5c 88       	casts.h	r8
800044ee:	20 18       	sub	r8,1
800044f0:	ef 58 ff fa 	st.h	r7[-6],r8
  // More sanity check.
  Assert( x2 < ET024006_WIDTH );
  Assert( y2 < ET024006_HEIGHT );

  // Set up draw area and copy pixel color until area is full.
  et024006_SetLimits( x, y, x2, y2 );
800044f4:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800044f8:	ef 1a ff f8 	ld.uh	r10,r7[-8]
800044fc:	ef 1b ff f0 	ld.uh	r11,r7[-16]
80004500:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80004504:	10 9c       	mov	r12,r8
80004506:	f0 1f 00 0b 	mcall	80004530 <et024006_DrawFilledRect+0x80>
  uint32_t count = (uint32_t) width * height;
8000450a:	ef 19 ff ec 	ld.uh	r9,r7[-20]
8000450e:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80004512:	f2 08 02 48 	mul	r8,r9,r8
80004516:	ef 48 ff fc 	st.w	r7[-4],r8
  et024006_DuplicatePixel( color, count );
8000451a:	ef 18 ff e4 	ld.uh	r8,r7[-28]
8000451e:	ee fb ff fc 	ld.w	r11,r7[-4]
80004522:	10 9c       	mov	r12,r8
80004524:	f0 1f 00 04 	mcall	80004534 <et024006_DrawFilledRect+0x84>
}
80004528:	2f 9d       	sub	sp,-28
8000452a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000452e:	00 00       	add	r0,r0
80004530:	80 00       	ld.sh	r0,r0[0x0]
80004532:	49 36       	lddpc	r6,8000457c <et024006_PrintString+0x44>
80004534:	80 00       	ld.sh	r0,r0[0x0]
80004536:	4b 90       	lddpc	r0,80004618 <et024006_PrintString+0xe0>

80004538 <et024006_PrintString>:
void et024006_PrintString(char *lcd_string, const unsigned char *font_style,
                          uint16_t x,
                          uint16_t y,
                          uint16_t fcolor,
                          int bcolor)
{
80004538:	eb cd 40 c0 	pushm	r6-r7,lr
8000453c:	1a 97       	mov	r7,sp
8000453e:	20 9d       	sub	sp,36
80004540:	ee c6 ff f4 	sub	r6,r7,-12
80004544:	ef 4c ff ec 	st.w	r7[-20],r12
80004548:	ef 4b ff e8 	st.w	r7[-24],r11
8000454c:	ef 5a ff e4 	st.h	r7[-28],r10
80004550:	ef 59 ff e0 	st.h	r7[-32],r9
80004554:	ef 58 ff dc 	st.h	r7[-36],r8
  uint16_t  row, col;
  unsigned char mask = 0, xfont, yfont, font_size;
80004558:	30 08       	mov	r8,0
8000455a:	ef 68 ff f4 	st.b	r7[-12],r8
  const unsigned char *data;
  uint16_t saved_x = x;
8000455e:	ef 08 ff e4 	ld.sh	r8,r7[-28]
80004562:	ef 58 ff fc 	st.h	r7[-4],r8

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
80004566:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000456a:	11 88       	ld.ub	r8,r8[0x0]
8000456c:	58 08       	cp.w	r8,0
8000456e:	e0 80 01 a4 	breq	800048b6 <et024006_PrintString+0x37e>
    return;

  data = font_style;  // point to the start of the font table
80004572:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004576:	ef 48 ff f8 	st.w	r7[-8],r8
  xfont = *data;  // get font x width
8000457a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000457e:	11 88       	ld.ub	r8,r8[0x0]
80004580:	ef 68 ff f5 	st.b	r7[-11],r8
  data++;
80004584:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004588:	2f f8       	sub	r8,-1
8000458a:	ef 48 ff f8 	st.w	r7[-8],r8
  yfont = *data;  // get font y length
8000458e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004592:	11 88       	ld.ub	r8,r8[0x0]
80004594:	ef 68 ff f6 	st.b	r7[-10],r8
  data++;
80004598:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000459c:	2f f8       	sub	r8,-1
8000459e:	ef 48 ff f8 	st.w	r7[-8],r8
  font_size = *data;  // get data bytes per font
800045a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045a6:	11 88       	ld.ub	r8,r8[0x0]
800045a8:	ef 68 ff f7 	st.b	r7[-9],r8

  // If transparent mode
  if(bcolor == -1)
800045ac:	6c 08       	ld.w	r8,r6[0x0]
800045ae:	5b f8       	cp.w	r8,-1
800045b0:	e0 81 00 c8 	brne	80004740 <et024006_PrintString+0x208>
  {
    // set window to display size
    et024006_SetLimits( 0, 0, ET024006_WIDTH - 1, ET024006_HEIGHT - 1 );
800045b4:	e0 69 00 ef 	mov	r9,239
800045b8:	e0 6a 01 3f 	mov	r10,319
800045bc:	30 0b       	mov	r11,0
800045be:	30 0c       	mov	r12,0
800045c0:	f0 1f 00 c0 	mcall	800048c0 <et024006_PrintString+0x388>

    do
    {
      if(*lcd_string =='\n') {
800045c4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045c8:	11 89       	ld.ub	r9,r8[0x0]
800045ca:	30 a8       	mov	r8,10
800045cc:	f0 09 18 00 	cp.b	r9,r8
800045d0:	c1 31       	brne	800045f6 <et024006_PrintString+0xbe>
        x = saved_x;
800045d2:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800045d6:	ef 58 ff e4 	st.h	r7[-28],r8
        y += yfont;
800045da:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800045de:	ef 09 ff e0 	ld.sh	r9,r7[-32]
800045e2:	f2 08 00 08 	add	r8,r9,r8
800045e6:	ef 58 ff e0 	st.h	r7[-32],r8
        lcd_string++;  // next character in string
800045ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045ee:	2f f8       	sub	r8,-1
800045f0:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
800045f4:	c9 f8       	rjmp	80004732 <et024006_PrintString+0x1fa>
      } else if(*lcd_string =='\t') {
800045f6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800045fa:	11 89       	ld.ub	r9,r8[0x0]
800045fc:	30 98       	mov	r8,9
800045fe:	f0 09 18 00 	cp.b	r9,r8
80004602:	c0 f1       	brne	80004620 <et024006_PrintString+0xe8>
        x += xfont;
80004604:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004608:	ef 09 ff e4 	ld.sh	r9,r7[-28]
8000460c:	f2 08 00 08 	add	r8,r9,r8
80004610:	ef 58 ff e4 	st.h	r7[-28],r8
        lcd_string++;  // next character in string
80004614:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004618:	2f f8       	sub	r8,-1
8000461a:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
8000461e:	c8 a8       	rjmp	80004732 <et024006_PrintString+0x1fa>
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
80004620:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004624:	11 89       	ld.ub	r9,r8[0x0]
80004626:	31 f8       	mov	r8,31
80004628:	f0 09 18 00 	cp.b	r9,r8
8000462c:	e0 88 00 1d 	brls	80004666 <et024006_PrintString+0x12e>
80004630:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004634:	11 88       	ld.ub	r8,r8[0x0]
80004636:	10 99       	mov	r9,r8
80004638:	30 08       	mov	r8,0
8000463a:	f0 09 18 00 	cp.b	r9,r8
8000463e:	c1 45       	brlt	80004666 <et024006_PrintString+0x12e>
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
80004640:	ef 39 ff f7 	ld.ub	r9,r7[-9]
          (font_size * (int)(*lcd_string - 32)); // character select
80004644:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80004648:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000464c:	11 88       	ld.ub	r8,r8[0x0]
8000464e:	22 08       	sub	r8,32
80004650:	f4 08 02 48 	mul	r8,r10,r8
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
      {
        // point to character data in font table
        data =  (font_style + font_size) +  // header offset
80004654:	f2 08 00 08 	add	r8,r9,r8
80004658:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000465c:	f2 08 00 08 	add	r8,r9,r8
80004660:	ef 48 ff f8 	st.w	r7[-8],r8
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // Checks if the character can be printed
      if (*lcd_string >= 32 && *lcd_string < (32 + 96))
80004664:	c1 28       	rjmp	80004688 <et024006_PrintString+0x150>
        data =  (font_style + font_size) +  // header offset
          (font_size * (int)(*lcd_string - 32)); // character select
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;
80004666:	ef 3a ff f7 	ld.ub	r10,r7[-9]
8000466a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000466e:	12 98       	mov	r8,r9
80004670:	a1 78       	lsl	r8,0x1
80004672:	12 08       	add	r8,r9
80004674:	a5 78       	lsl	r8,0x5
80004676:	12 18       	sub	r8,r9
80004678:	f4 08 00 08 	add	r8,r10,r8
8000467c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80004680:	f2 08 00 08 	add	r8,r9,r8
80004684:	ef 48 ff f8 	st.w	r7[-8],r8

      for (row = y; row < (y + yfont); row++)
80004688:	ef 08 ff e0 	ld.sh	r8,r7[-32]
8000468c:	ef 58 ff f0 	st.h	r7[-16],r8
80004690:	c3 a8       	rjmp	80004704 <et024006_PrintString+0x1cc>
      {
        mask = 0x80;
80004692:	38 08       	mov	r8,-128
80004694:	ef 68 ff f4 	st.b	r7[-12],r8
        for (col = x; col < (x + xfont); col++)
80004698:	ef 08 ff e4 	ld.sh	r8,r7[-28]
8000469c:	ef 58 ff f2 	st.h	r7[-14],r8
800046a0:	c1 e8       	rjmp	800046dc <et024006_PrintString+0x1a4>
        {
          if (*data & mask) // if pixel data then put dot
800046a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046a6:	11 89       	ld.ub	r9,r8[0x0]
800046a8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800046ac:	f3 e8 00 08 	and	r8,r9,r8
800046b0:	5c 58       	castu.b	r8
800046b2:	c0 b0       	breq	800046c8 <et024006_PrintString+0x190>
          {
            et024006_DrawQuickPixel( col, row, fcolor );
800046b4:	ef 1a ff dc 	ld.uh	r10,r7[-36]
800046b8:	ef 19 ff f0 	ld.uh	r9,r7[-16]
800046bc:	ef 18 ff f2 	ld.uh	r8,r7[-14]
800046c0:	12 9b       	mov	r11,r9
800046c2:	10 9c       	mov	r12,r8
800046c4:	f0 1f 00 80 	mcall	800048c4 <et024006_PrintString+0x38c>
          }
          mask >>= 1;
800046c8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800046cc:	a1 98       	lsr	r8,0x1
800046ce:	ef 68 ff f4 	st.b	r7[-12],r8
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
      {
        mask = 0x80;
        for (col = x; col < (x + xfont); col++)
800046d2:	ef 08 ff f2 	ld.sh	r8,r7[-14]
800046d6:	2f f8       	sub	r8,-1
800046d8:	ef 58 ff f2 	st.h	r7[-14],r8
800046dc:	ef 19 ff f2 	ld.uh	r9,r7[-14]
800046e0:	ef 1a ff e4 	ld.uh	r10,r7[-28]
800046e4:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800046e8:	f4 08 00 08 	add	r8,r10,r8
800046ec:	10 39       	cp.w	r9,r8
800046ee:	cd a5       	brlt	800046a2 <et024006_PrintString+0x16a>
            et024006_DrawQuickPixel( col, row, fcolor );
          }
          mask >>= 1;
        }
        // Next row data
        data++;
800046f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046f4:	2f f8       	sub	r8,-1
800046f6:	ef 48 ff f8 	st.w	r7[-8],r8
      }
      // Print default character
      else
        data =  (font_style + font_size) + font_size * 95;

      for (row = y; row < (y + yfont); row++)
800046fa:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800046fe:	2f f8       	sub	r8,-1
80004700:	ef 58 ff f0 	st.h	r7[-16],r8
80004704:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80004708:	ef 1a ff e0 	ld.uh	r10,r7[-32]
8000470c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004710:	f4 08 00 08 	add	r8,r10,r8
80004714:	10 39       	cp.w	r9,r8
80004716:	cb e5       	brlt	80004692 <et024006_PrintString+0x15a>
        }
        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
80004718:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000471c:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004720:	f2 08 00 08 	add	r8,r9,r8
80004724:	ef 58 ff e4 	st.h	r7[-28],r8
      lcd_string++;  // next character in string
80004728:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000472c:	2f f8       	sub	r8,-1
8000472e:	ef 48 ff ec 	st.w	r7[-20],r8

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
80004732:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004736:	11 88       	ld.ub	r8,r8[0x0]
80004738:	58 08       	cp.w	r8,0
8000473a:	fe 91 ff 45 	brne	800045c4 <et024006_PrintString+0x8c>
8000473e:	cb d8       	rjmp	800048b8 <et024006_PrintString+0x380>
  }
  else
  {
    do
    {
      if(*lcd_string =='\n') {
80004740:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004744:	11 89       	ld.ub	r9,r8[0x0]
80004746:	30 a8       	mov	r8,10
80004748:	f0 09 18 00 	cp.b	r9,r8
8000474c:	c1 31       	brne	80004772 <et024006_PrintString+0x23a>
        x = saved_x;
8000474e:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80004752:	ef 58 ff e4 	st.h	r7[-28],r8
        y += yfont;
80004756:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000475a:	ef 09 ff e0 	ld.sh	r9,r7[-32]
8000475e:	f2 08 00 08 	add	r8,r9,r8
80004762:	ef 58 ff e0 	st.h	r7[-32],r8
        lcd_string++;  // next character in string
80004766:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000476a:	2f f8       	sub	r8,-1
8000476c:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
80004770:	c9 c8       	rjmp	800048a8 <et024006_PrintString+0x370>
      } else if(*lcd_string =='\t') {
80004772:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004776:	11 89       	ld.ub	r9,r8[0x0]
80004778:	30 98       	mov	r8,9
8000477a:	f0 09 18 00 	cp.b	r9,r8
8000477e:	c0 f1       	brne	8000479c <et024006_PrintString+0x264>
        x += xfont;
80004780:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004784:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004788:	f2 08 00 08 	add	r8,r9,r8
8000478c:	ef 58 ff e4 	st.h	r7[-28],r8
        lcd_string++;  // next character in string
80004790:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004794:	2f f8       	sub	r8,-1
80004796:	ef 48 ff ec 	st.w	r7[-20],r8
        continue;
8000479a:	c8 78       	rjmp	800048a8 <et024006_PrintString+0x370>
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
8000479c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
        (font_size * (int)(*lcd_string - 32)); // character select
800047a0:	ef 3a ff f7 	ld.ub	r10,r7[-9]
800047a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047a8:	11 88       	ld.ub	r8,r8[0x0]
800047aa:	22 08       	sub	r8,32
800047ac:	f4 08 02 48 	mul	r8,r10,r8
        x += xfont;
        lcd_string++;  // next character in string
        continue;
      }
      // point to character data in font table
      data =  (font_style + font_size) +  // header offset
800047b0:	f2 08 00 08 	add	r8,r9,r8
800047b4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800047b8:	f2 08 00 08 	add	r8,r9,r8
800047bc:	ef 48 ff f8 	st.w	r7[-8],r8
        (font_size * (int)(*lcd_string - 32)); // character select

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
800047c0:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800047c4:	ef 09 ff e0 	ld.sh	r9,r7[-32]
800047c8:	f2 08 00 08 	add	r8,r9,r8
800047cc:	5c 88       	casts.h	r8
800047ce:	20 18       	sub	r8,1
800047d0:	5c 88       	casts.h	r8
800047d2:	f9 d8 c0 10 	bfextu	r12,r8,0x0,0x10
800047d6:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800047da:	ef 09 ff e4 	ld.sh	r9,r7[-28]
800047de:	f2 08 00 08 	add	r8,r9,r8
800047e2:	5c 88       	casts.h	r8
800047e4:	20 18       	sub	r8,1
800047e6:	5c 88       	casts.h	r8
800047e8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800047ec:	ef 1b ff e0 	ld.uh	r11,r7[-32]
800047f0:	ef 18 ff e4 	ld.uh	r8,r7[-28]
800047f4:	18 99       	mov	r9,r12
800047f6:	10 9c       	mov	r12,r8
800047f8:	f0 1f 00 32 	mcall	800048c0 <et024006_PrintString+0x388>
800047fc:	32 28       	mov	r8,34
800047fe:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004802:	fc 19 c0 00 	movh	r9,0xc000
80004806:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000480a:	b2 08       	st.h	r9[0x0],r8

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
8000480c:	30 08       	mov	r8,0
8000480e:	ef 58 ff f0 	st.h	r7[-16],r8
80004812:	c3 78       	rjmp	80004880 <et024006_PrintString+0x348>
      {
        mask = 0x80;
80004814:	38 08       	mov	r8,-128
80004816:	ef 68 ff f4 	st.b	r7[-12],r8
        for (col = 0; col < xfont; col++)
8000481a:	30 08       	mov	r8,0
8000481c:	ef 58 ff f2 	st.h	r7[-14],r8
80004820:	c1 f8       	rjmp	8000485e <et024006_PrintString+0x326>
        {
          if (*data & mask) // if pixel data then put dot
80004822:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004826:	11 89       	ld.ub	r9,r8[0x0]
80004828:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000482c:	f3 e8 00 08 	and	r8,r9,r8
80004830:	5c 58       	castu.b	r8
80004832:	c0 70       	breq	80004840 <et024006_PrintString+0x308>
          {
            *ET024006_PARAM_ADDR = fcolor;
80004834:	fc 19 c0 20 	movh	r9,0xc020
80004838:	ef 08 ff dc 	ld.sh	r8,r7[-36]
8000483c:	b2 08       	st.h	r9[0x0],r8
8000483e:	c0 68       	rjmp	8000484a <et024006_PrintString+0x312>
          }
          else  // else use background color
          {
            *ET024006_PARAM_ADDR = bcolor;
80004840:	fc 19 c0 20 	movh	r9,0xc020
80004844:	6c 08       	ld.w	r8,r6[0x0]
80004846:	5c 88       	casts.h	r8
80004848:	b2 08       	st.h	r9[0x0],r8
          }
          mask >>= 1;
8000484a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000484e:	a1 98       	lsr	r8,0x1
80004850:	ef 68 ff f4 	st.b	r7[-12],r8
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
      {
        mask = 0x80;
        for (col = 0; col < xfont; col++)
80004854:	ef 08 ff f2 	ld.sh	r8,r7[-14]
80004858:	2f f8       	sub	r8,-1
8000485a:	ef 58 ff f2 	st.h	r7[-14],r8
8000485e:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004862:	ef 09 ff f2 	ld.sh	r9,r7[-14]
80004866:	f0 09 19 00 	cp.h	r9,r8
8000486a:	cd c3       	brcs	80004822 <et024006_PrintString+0x2ea>
          }
          mask >>= 1;
        }

        // Next row data
        data++;
8000486c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004870:	2f f8       	sub	r8,-1
80004872:	ef 48 ff f8 	st.w	r7[-8],r8

      // set a window for the character
      et024006_SetLimits( x, y, x + xfont - 1, y + yfont - 1 );
      et024006_SelectRegister( HIMAX_SRAMWRITE );

      for (row=0; row < yfont;row++)
80004876:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000487a:	2f f8       	sub	r8,-1
8000487c:	ef 58 ff f0 	st.h	r7[-16],r8
80004880:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004884:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80004888:	f0 09 19 00 	cp.h	r9,r8
8000488c:	cc 43       	brcs	80004814 <et024006_PrintString+0x2dc>

        // Next row data
        data++;
      }
      // move to next character start pixel
      x += xfont;
8000488e:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80004892:	ef 09 ff e4 	ld.sh	r9,r7[-28]
80004896:	f2 08 00 08 	add	r8,r9,r8
8000489a:	ef 58 ff e4 	st.h	r7[-28],r8
      lcd_string++;  // next character in string
8000489e:	ee f8 ff ec 	ld.w	r8,r7[-20]
800048a2:	2f f8       	sub	r8,-1
800048a4:	ef 48 ff ec 	st.w	r7[-20],r8

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
800048a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800048ac:	11 88       	ld.ub	r8,r8[0x0]
800048ae:	58 08       	cp.w	r8,0
800048b0:	fe 91 ff 48 	brne	80004740 <et024006_PrintString+0x208>
800048b4:	c0 28       	rjmp	800048b8 <et024006_PrintString+0x380>
  const unsigned char *data;
  uint16_t saved_x = x;

  // if string is empty there is nothing to do
  if( *lcd_string == '\0')
    return;
800048b6:	d7 03       	nop
      x += xfont;
      lcd_string++;  // next character in string

    }while(*lcd_string !='\0');  // keep spitting chars out until end of string
  }
}
800048b8:	2f 7d       	sub	sp,-36
800048ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800048be:	00 00       	add	r0,r0
800048c0:	80 00       	ld.sh	r0,r0[0x0]
800048c2:	49 36       	lddpc	r6,8000490c <et024006_SetRegister+0x44>
800048c4:	80 00       	ld.sh	r0,r0[0x0]
800048c6:	4b 40       	lddpc	r0,80004994 <et024006_SetLimits+0x5e>

800048c8 <et024006_SetRegister>:
#endif

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
800048c8:	eb cd 40 80 	pushm	r7,lr
800048cc:	1a 97       	mov	r7,sp
800048ce:	20 3d       	sub	sp,12
800048d0:	18 99       	mov	r9,r12
800048d2:	16 98       	mov	r8,r11
800048d4:	ef 69 ff f8 	st.b	r7[-8],r9
800048d8:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t value = et024006_ReadRegister( address );
800048dc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800048e0:	ef 68 ff fd 	st.b	r7[-3],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ uint8_t et024006_ReadRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800048e4:	fc 19 c0 00 	movh	r9,0xc000
800048e8:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800048ec:	b2 08       	st.h	r9[0x0],r8
  return *ET024006_PARAM_ADDR;
800048ee:	fc 18 c0 20 	movh	r8,0xc020
800048f2:	90 08       	ld.sh	r8,r8[0x0]
800048f4:	5c 88       	casts.h	r8
800048f6:	5c 58       	castu.b	r8

/* --- Shortcuts to common register operations --- */

static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
800048f8:	ef 68 ff fc 	st.b	r7[-4],r8
  value |= bitmask;
800048fc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004900:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004904:	f3 e8 10 08 	or	r8,r9,r8
80004908:	ef 68 ff fc 	st.b	r7[-4],r8
  et024006_WriteRegister( address, value );
8000490c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004910:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80004914:	ef 69 ff ff 	st.b	r7[-1],r9
80004918:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000491c:	fc 19 c0 00 	movh	r9,0xc000
80004920:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004924:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004926:	fc 19 c0 20 	movh	r9,0xc020
8000492a:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000492e:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetRegister( uint8_t address, uint8_t bitmask )
{
  uint8_t value = et024006_ReadRegister( address );
  value |= bitmask;
  et024006_WriteRegister( address, value );
}
80004930:	2f dd       	sub	sp,-12
80004932:	e3 cd 80 80 	ldm	sp++,r7,pc

80004936 <et024006_SetLimits>:
/*! \brief Sets the display limits according to the corner coordinates.
 *  Writing to the display will result in writing to the area specified through
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
80004936:	eb cd 40 80 	pushm	r7,lr
8000493a:	1a 97       	mov	r7,sp
8000493c:	20 8d       	sub	sp,32
8000493e:	12 98       	mov	r8,r9
80004940:	18 99       	mov	r9,r12
80004942:	ef 59 ff ec 	st.h	r7[-20],r9
80004946:	16 99       	mov	r9,r11
80004948:	ef 59 ff e8 	st.h	r7[-24],r9
8000494c:	14 99       	mov	r9,r10
8000494e:	ef 59 ff e4 	st.h	r7[-28],r9
80004952:	ef 58 ff e0 	st.h	r7[-32],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
80004956:	ef 18 ff ec 	ld.uh	r8,r7[-20]
8000495a:	a9 88       	lsr	r8,0x8
8000495c:	5c 88       	casts.h	r8
8000495e:	5c 58       	castu.b	r8
80004960:	30 29       	mov	r9,2
80004962:	ef 69 ff f1 	st.b	r7[-15],r9
80004966:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000496a:	fc 19 c0 00 	movh	r9,0xc000
8000496e:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80004972:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004974:	fc 19 c0 20 	movh	r9,0xc020
80004978:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000497c:	b2 08       	st.h	r9[0x0],r8
 *  this function.
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
8000497e:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80004982:	5c 58       	castu.b	r8
80004984:	30 39       	mov	r9,3
80004986:	ef 69 ff f3 	st.b	r7[-13],r9
8000498a:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000498e:	fc 19 c0 00 	movh	r9,0xc000
80004992:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80004996:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004998:	fc 19 c0 20 	movh	r9,0xc020
8000499c:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800049a0:	b2 08       	st.h	r9[0x0],r8
 */
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
800049a2:	ef 18 ff e4 	ld.uh	r8,r7[-28]
800049a6:	a9 88       	lsr	r8,0x8
800049a8:	5c 88       	casts.h	r8
800049aa:	5c 58       	castu.b	r8
800049ac:	30 49       	mov	r9,4
800049ae:	ef 69 ff f5 	st.b	r7[-11],r9
800049b2:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800049b6:	fc 19 c0 00 	movh	r9,0xc000
800049ba:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800049be:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800049c0:	fc 19 c0 20 	movh	r9,0xc020
800049c4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800049c8:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetLimits( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2 )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
800049ca:	ef 08 ff e4 	ld.sh	r8,r7[-28]
800049ce:	5c 58       	castu.b	r8
800049d0:	30 59       	mov	r9,5
800049d2:	ef 69 ff f7 	st.b	r7[-9],r9
800049d6:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800049da:	fc 19 c0 00 	movh	r9,0xc000
800049de:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800049e2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800049e4:	fc 19 c0 20 	movh	r9,0xc020
800049e8:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800049ec:	b2 08       	st.h	r9[0x0],r8
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
800049ee:	ef 18 ff e8 	ld.uh	r8,r7[-24]
800049f2:	a9 88       	lsr	r8,0x8
800049f4:	5c 88       	casts.h	r8
800049f6:	5c 58       	castu.b	r8
800049f8:	30 69       	mov	r9,6
800049fa:	ef 69 ff f9 	st.b	r7[-7],r9
800049fe:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a02:	fc 19 c0 00 	movh	r9,0xc000
80004a06:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004a0a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a0c:	fc 19 c0 20 	movh	r9,0xc020
80004a10:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004a14:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x1 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
80004a16:	ef 08 ff e8 	ld.sh	r8,r7[-24]
80004a1a:	5c 58       	castu.b	r8
80004a1c:	30 79       	mov	r9,7
80004a1e:	ef 69 ff fb 	st.b	r7[-5],r9
80004a22:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a26:	fc 19 c0 00 	movh	r9,0xc000
80004a2a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004a2e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a30:	fc 19 c0 20 	movh	r9,0xc020
80004a34:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004a38:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x1 & 0xff) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
80004a3a:	ef 18 ff e0 	ld.uh	r8,r7[-32]
80004a3e:	a9 88       	lsr	r8,0x8
80004a40:	5c 88       	casts.h	r8
80004a42:	5c 58       	castu.b	r8
80004a44:	30 89       	mov	r9,8
80004a46:	ef 69 ff fd 	st.b	r7[-3],r9
80004a4a:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a4e:	fc 19 c0 00 	movh	r9,0xc000
80004a52:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004a56:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a58:	fc 19 c0 20 	movh	r9,0xc020
80004a5c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004a60:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END2, (x2 >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
80004a62:	ef 08 ff e0 	ld.sh	r8,r7[-32]
80004a66:	5c 58       	castu.b	r8
80004a68:	30 99       	mov	r9,9
80004a6a:	ef 69 ff ff 	st.b	r7[-1],r9
80004a6e:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004a72:	fc 19 c0 00 	movh	r9,0xc000
80004a76:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004a7a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004a7c:	fc 19 c0 20 	movh	r9,0xc020
80004a80:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004a84:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_END1, (x2 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y1 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y1 & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END2, (y2 >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_END1, (y2 & 0xff) );
}
80004a86:	2f 8d       	sub	sp,-32
80004a88:	e3 cd 80 80 	ldm	sp++,r7,pc

80004a8c <et024006_SetQuickLimits>:

/*! \brief Set the starting point of the next read/write from/to RAM.
 *  This sets only the start point of the RAM window.
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
80004a8c:	eb cd 40 80 	pushm	r7,lr
80004a90:	1a 97       	mov	r7,sp
80004a92:	20 4d       	sub	sp,16
80004a94:	18 99       	mov	r9,r12
80004a96:	16 98       	mov	r8,r11
80004a98:	ef 59 ff f4 	st.h	r7[-12],r9
80004a9c:	ef 58 ff f0 	st.h	r7[-16],r8
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
80004aa0:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80004aa4:	a9 88       	lsr	r8,0x8
80004aa6:	5c 88       	casts.h	r8
80004aa8:	5c 58       	castu.b	r8
80004aaa:	30 29       	mov	r9,2
80004aac:	ef 69 ff f9 	st.b	r7[-7],r9
80004ab0:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004ab4:	fc 19 c0 00 	movh	r9,0xc000
80004ab8:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004abc:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004abe:	fc 19 c0 20 	movh	r9,0xc020
80004ac2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004ac6:	b2 08       	st.h	r9[0x0],r8
 *  This sets only the start point of the RAM window.
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
80004ac8:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80004acc:	5c 58       	castu.b	r8
80004ace:	30 39       	mov	r9,3
80004ad0:	ef 69 ff fb 	st.b	r7[-5],r9
80004ad4:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004ad8:	fc 19 c0 00 	movh	r9,0xc000
80004adc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004ae0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004ae2:	fc 19 c0 20 	movh	r9,0xc020
80004ae6:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004aea:	b2 08       	st.h	r9[0x0],r8
 */
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
80004aec:	ef 18 ff f0 	ld.uh	r8,r7[-16]
80004af0:	a9 88       	lsr	r8,0x8
80004af2:	5c 88       	casts.h	r8
80004af4:	5c 58       	castu.b	r8
80004af6:	30 69       	mov	r9,6
80004af8:	ef 69 ff fd 	st.b	r7[-3],r9
80004afc:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004b00:	fc 19 c0 00 	movh	r9,0xc000
80004b04:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004b08:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004b0a:	fc 19 c0 20 	movh	r9,0xc020
80004b0e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004b12:	b2 08       	st.h	r9[0x0],r8
static void et024006_SetQuickLimits( uint16_t x, uint16_t y )
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
80004b14:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004b18:	5c 58       	castu.b	r8
80004b1a:	30 79       	mov	r9,7
80004b1c:	ef 69 ff ff 	st.b	r7[-1],r9
80004b20:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004b24:	fc 19 c0 00 	movh	r9,0xc000
80004b28:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004b2c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004b2e:	fc 19 c0 20 	movh	r9,0xc020
80004b32:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80004b36:	b2 08       	st.h	r9[0x0],r8
{
  et024006_WriteRegister( HIMAX_COL_ADDR_START2, (x >> 8) );
  et024006_WriteRegister( HIMAX_COL_ADDR_START1, (x & 0xff) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START2, (y >> 8) );
  et024006_WriteRegister( HIMAX_ROW_ADDR_START1, (y & 0xff) );
}
80004b38:	2f cd       	sub	sp,-16
80004b3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b3e:	d7 03       	nop

80004b40 <et024006_DrawQuickPixel>:


static void et024006_DrawQuickPixel( uint16_t x, uint16_t y, et024006_color_t color )
{
80004b40:	eb cd 40 80 	pushm	r7,lr
80004b44:	1a 97       	mov	r7,sp
80004b46:	20 4d       	sub	sp,16
80004b48:	16 99       	mov	r9,r11
80004b4a:	14 98       	mov	r8,r10
80004b4c:	18 9a       	mov	r10,r12
80004b4e:	ef 5a ff f8 	st.h	r7[-8],r10
80004b52:	ef 59 ff f4 	st.h	r7[-12],r9
80004b56:	ef 58 ff f0 	st.h	r7[-16],r8
  // Sanity check on parameters.
  Assert( x < ET024006_WIDTH );
  Assert( y < ET024006_HEIGHT );

  // Set up draw area and write the two bytes of pixel data.
  et024006_SetQuickLimits( x, y );
80004b5a:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80004b5e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80004b62:	12 9b       	mov	r11,r9
80004b64:	10 9c       	mov	r12,r8
80004b66:	f0 1f 00 0a 	mcall	80004b8c <et024006_DrawQuickPixel+0x4c>
80004b6a:	32 28       	mov	r8,34
80004b6c:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004b70:	fc 19 c0 00 	movh	r9,0xc000
80004b74:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004b78:	b2 08       	st.h	r9[0x0],r8
  et024006_SendSPI( color & 0xff );
  et024006_SendSPI( color >> 8 );
  et024006_DeselectSPI();
#endif
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  *ET024006_PARAM_ADDR = color;
80004b7a:	fc 19 c0 20 	movh	r9,0xc020
80004b7e:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80004b82:	b2 08       	st.h	r9[0x0],r8
#endif

}
80004b84:	2f cd       	sub	sp,-16
80004b86:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b8a:	00 00       	add	r0,r0
80004b8c:	80 00       	ld.sh	r0,r0[0x0]
80004b8e:	4a 8c       	lddpc	r12,80004c2c <et024006_DuplicatePixel+0x9c>

80004b90 <et024006_DuplicatePixel>:


/* --- Pixel block operations --- */

static void et024006_DuplicatePixel( et024006_color_t color, uint32_t count )
{
80004b90:	eb cd 40 80 	pushm	r7,lr
80004b94:	1a 97       	mov	r7,sp
80004b96:	20 3d       	sub	sp,12
80004b98:	18 98       	mov	r8,r12
80004b9a:	ef 4b ff f4 	st.w	r7[-12],r11
80004b9e:	ef 58 ff f8 	st.h	r7[-8],r8
80004ba2:	32 28       	mov	r8,34
80004ba4:	ef 68 ff ff 	st.b	r7[-1],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_SelectRegister( uint8_t address )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004ba8:	fc 19 c0 00 	movh	r9,0xc000
80004bac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004bb0:	b2 08       	st.h	r9[0x0],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80004bb2:	c2 e8       	rjmp	80004c0e <et024006_DuplicatePixel+0x7e>
    *ET024006_PARAM_ADDR = color;
80004bb4:	fc 19 c0 20 	movh	r9,0xc020
80004bb8:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bbc:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004bbe:	fc 19 c0 20 	movh	r9,0xc020
80004bc2:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bc6:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004bc8:	fc 19 c0 20 	movh	r9,0xc020
80004bcc:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bd0:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004bd2:	fc 19 c0 20 	movh	r9,0xc020
80004bd6:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bda:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004bdc:	fc 19 c0 20 	movh	r9,0xc020
80004be0:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004be4:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004be6:	fc 19 c0 20 	movh	r9,0xc020
80004bea:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bee:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004bf0:	fc 19 c0 20 	movh	r9,0xc020
80004bf4:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004bf8:	b2 08       	st.h	r9[0x0],r8
    *ET024006_PARAM_ADDR = color;
80004bfa:	fc 19 c0 20 	movh	r9,0xc020
80004bfe:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004c02:	b2 08       	st.h	r9[0x0],r8
    count-=8;
80004c04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c08:	20 88       	sub	r8,8
80004c0a:	ef 48 ff f4 	st.w	r7[-12],r8
  Assert( count > 0 );

  et024006_SelectRegister( HIMAX_SRAMWRITE );
#if(ET024006_IFACE_MODE == ET024006_IFACE_MODE_EBI)
  //uint8_t countLowByte = count;
  while (count >= 8) {
80004c0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c12:	58 78       	cp.w	r8,7
80004c14:	fe 9b ff d0 	brhi	80004bb4 <et024006_DuplicatePixel+0x24>
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80004c18:	c0 b8       	rjmp	80004c2e <et024006_DuplicatePixel+0x9e>
    *ET024006_PARAM_ADDR = color;
80004c1a:	fc 19 c0 20 	movh	r9,0xc020
80004c1e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80004c22:	b2 08       	st.h	r9[0x0],r8
    --count;
80004c24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c28:	20 18       	sub	r8,1
80004c2a:	ef 48 ff f4 	st.w	r7[-12],r8
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    *ET024006_PARAM_ADDR = color;
    count-=8;
  }
  while (count > 0) {
80004c2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c32:	58 08       	cp.w	r8,0
80004c34:	cf 31       	brne	80004c1a <et024006_DuplicatePixel+0x8a>
    }
  }

  et024006_DeselectSPI();
#endif
}
80004c36:	2f dd       	sub	sp,-12
80004c38:	e3 cd 80 80 	ldm	sp++,r7,pc

80004c3c <et024006_SetupInterface>:
                SPI_MASTER_bm);          // in master mode
}
#endif

static void et024006_SetupInterface( void )
{
80004c3c:	eb cd 40 80 	pushm	r7,lr
80004c40:	1a 97       	mov	r7,sp

  // et024006_TE (tearing sync) signal from display is input
  // without any pull resistors
  gpio_enable_gpio_pin(ET024006DHU_TE_PIN);
80004c42:	30 0c       	mov	r12,0
80004c44:	f0 1f 00 06 	mcall	80004c5c <et024006_SetupInterface+0x20>

  // Backlight pin (PWM) for display is output
  gpio_enable_module_pin(ET024006DHU_BL_PIN, ET024006DHU_BL_FUNCTION);
80004c48:	30 2b       	mov	r11,2
80004c4a:	30 9c       	mov	r12,9
80004c4c:	f0 1f 00 05 	mcall	80004c60 <et024006_SetupInterface+0x24>
  // Turns backlight ON
  /*TODO Add backlight driver */

  // Reset pin for display is output
  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80004c50:	34 2c       	mov	r12,66
80004c52:	f0 1f 00 05 	mcall	80004c64 <et024006_SetupInterface+0x28>
}
80004c56:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c5a:	00 00       	add	r0,r0
80004c5c:	80 00       	ld.sh	r0,r0[0x0]
80004c5e:	8b 58       	st.w	r5[0x14],r8
80004c60:	80 00       	ld.sh	r0,r0[0x0]
80004c62:	8a 48       	ld.sh	r8,r5[0x8]
80004c64:	80 00       	ld.sh	r0,r0[0x0]
80004c66:	8d ca       	st.w	r6[0x30],r10

80004c68 <et024006_ResetDisplay>:

/*! \brief Does a hard reset of the display.
 */
static void et024006_ResetDisplay( void )
{
80004c68:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80004c6c:	1a 97       	mov	r7,sp
80004c6e:	21 ad       	sub	sp,104
  // clear reset line
  gpio_clr_gpio_pin(ET024006DHU_RESET_PIN);
80004c70:	34 2c       	mov	r12,66
80004c72:	f0 1f 00 aa 	mcall	80004f18 <et024006_ResetDisplay+0x2b0>
  // 50us delay
  cpu_delay_us( 50, tft_data.cpu_hz );
80004c76:	fe f8 02 a6 	ld.w	r8,pc[678]
80004c7a:	70 08       	ld.w	r8,r8[0x0]
80004c7c:	33 29       	mov	r9,50
80004c7e:	ef 49 ff c4 	st.w	r7[-60],r9
80004c82:	ef 48 ff c0 	st.w	r7[-64],r8
80004c86:	ee f8 ff c4 	ld.w	r8,r7[-60]
80004c8a:	ef 48 ff cc 	st.w	r7[-52],r8
80004c8e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004c92:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80004c96:	ee fc ff cc 	ld.w	r12,r7[-52]
80004c9a:	ef 4c ff a4 	st.w	r7[-92],r12
80004c9e:	30 0b       	mov	r11,0
80004ca0:	ef 4b ff a0 	st.w	r7[-96],r11
80004ca4:	ee f9 ff c8 	ld.w	r9,r7[-56]
80004ca8:	ef 49 ff 9c 	st.w	r7[-100],r9
80004cac:	30 08       	mov	r8,0
80004cae:	ef 48 ff 98 	st.w	r7[-104],r8
80004cb2:	ee fa ff a0 	ld.w	r10,r7[-96]
80004cb6:	ee fc ff 9c 	ld.w	r12,r7[-100]
80004cba:	b9 3a       	mul	r10,r12
80004cbc:	ee f8 ff 98 	ld.w	r8,r7[-104]
80004cc0:	ee fb ff a4 	ld.w	r11,r7[-92]
80004cc4:	b7 38       	mul	r8,r11
80004cc6:	10 0a       	add	r10,r8
80004cc8:	ee fc ff a4 	ld.w	r12,r7[-92]
80004ccc:	ee fb ff 9c 	ld.w	r11,r7[-100]
80004cd0:	f8 0b 06 48 	mulu.d	r8,r12,r11
80004cd4:	12 0a       	add	r10,r9
80004cd6:	14 99       	mov	r9,r10
80004cd8:	ee 7a 42 3f 	mov	r10,999999
80004cdc:	30 0b       	mov	r11,0
80004cde:	f0 0a 00 0a 	add	r10,r8,r10
80004ce2:	f2 0b 00 4b 	adc	r11,r9,r11
80004ce6:	ee 78 42 40 	mov	r8,1000000
80004cea:	30 09       	mov	r9,0
80004cec:	f0 1f 00 8d 	mcall	80004f20 <et024006_ResetDisplay+0x2b8>
80004cf0:	14 98       	mov	r8,r10
80004cf2:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80004cf4:	ef 48 ff d4 	st.w	r7[-44],r8
80004cf8:	ee c8 00 58 	sub	r8,r7,88
80004cfc:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004d00:	e1 b8 00 42 	mfsr	r8,0x108
80004d04:	10 99       	mov	r9,r8
80004d06:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004d0a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004d0c:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004d10:	70 09       	ld.w	r9,r8[0x0]
80004d12:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004d16:	10 09       	add	r9,r8
80004d18:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004d1c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004d1e:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004d22:	30 08       	mov	r8,0
80004d24:	f3 68 00 08 	st.b	r9[8],r8
80004d28:	ee c8 00 58 	sub	r8,r7,88
80004d2c:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004d30:	e1 b8 00 42 	mfsr	r8,0x108
80004d34:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004d38:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d3c:	f1 39 00 08 	ld.ub	r9,r8[8]
80004d40:	30 28       	mov	r8,2
80004d42:	f0 09 18 00 	cp.b	r9,r8
80004d46:	c0 31       	brne	80004d4c <et024006_ResetDisplay+0xe4>
    return false;
80004d48:	30 08       	mov	r8,0
80004d4a:	c4 38       	rjmp	80004dd0 <et024006_ResetDisplay+0x168>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004d4c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d50:	f1 39 00 08 	ld.ub	r9,r8[8]
80004d54:	30 18       	mov	r8,1
80004d56:	f0 09 18 00 	cp.b	r9,r8
80004d5a:	c0 31       	brne	80004d60 <et024006_ResetDisplay+0xf8>
    return true;
80004d5c:	30 18       	mov	r8,1
80004d5e:	c3 98       	rjmp	80004dd0 <et024006_ResetDisplay+0x168>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004d60:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d64:	70 09       	ld.w	r9,r8[0x0]
80004d66:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d6a:	70 18       	ld.w	r8,r8[0x4]
80004d6c:	10 39       	cp.w	r9,r8
80004d6e:	e0 88 00 1a 	brls	80004da2 <et024006_ResetDisplay+0x13a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004d72:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d76:	70 08       	ld.w	r8,r8[0x0]
80004d78:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004d7c:	10 39       	cp.w	r9,r8
80004d7e:	c1 02       	brcc	80004d9e <et024006_ResetDisplay+0x136>
80004d80:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004d84:	70 18       	ld.w	r8,r8[0x4]
80004d86:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004d8a:	10 39       	cp.w	r9,r8
80004d8c:	e0 88 00 09 	brls	80004d9e <et024006_ResetDisplay+0x136>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004d90:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004d94:	30 18       	mov	r8,1
80004d96:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004d9a:	30 18       	mov	r8,1
80004d9c:	c1 a8       	rjmp	80004dd0 <et024006_ResetDisplay+0x168>
    }
    return false;
80004d9e:	30 08       	mov	r8,0
80004da0:	c1 88       	rjmp	80004dd0 <et024006_ResetDisplay+0x168>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004da2:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004da6:	70 08       	ld.w	r8,r8[0x0]
80004da8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004dac:	10 39       	cp.w	r9,r8
80004dae:	c0 93       	brcs	80004dc0 <et024006_ResetDisplay+0x158>
80004db0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80004db4:	70 18       	ld.w	r8,r8[0x4]
80004db6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004dba:	10 39       	cp.w	r9,r8
80004dbc:	e0 88 00 09 	brls	80004dce <et024006_ResetDisplay+0x166>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004dc0:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004dc4:	30 18       	mov	r8,1
80004dc6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004dca:	30 18       	mov	r8,1
80004dcc:	c0 28       	rjmp	80004dd0 <et024006_ResetDisplay+0x168>
    }
    return false;
80004dce:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004dd0:	58 08       	cp.w	r8,0
80004dd2:	ca b0       	breq	80004d28 <et024006_ResetDisplay+0xc0>

  gpio_set_gpio_pin(ET024006DHU_RESET_PIN);
80004dd4:	34 2c       	mov	r12,66
80004dd6:	f0 1f 00 54 	mcall	80004f24 <et024006_ResetDisplay+0x2bc>
  // 5ms delay
  cpu_delay_ms( 5, tft_data.cpu_hz );
80004dda:	4d 18       	lddpc	r8,80004f1c <et024006_ResetDisplay+0x2b4>
80004ddc:	70 08       	ld.w	r8,r8[0x0]
80004dde:	30 59       	mov	r9,5
80004de0:	ef 49 ff e4 	st.w	r7[-28],r9
80004de4:	ef 48 ff e0 	st.w	r7[-32],r8
80004de8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004dec:	ef 48 ff ec 	st.w	r7[-20],r8
80004df0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004df4:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004df8:	ee f0 ff ec 	ld.w	r0,r7[-20]
80004dfc:	30 01       	mov	r1,0
80004dfe:	ee f2 ff e8 	ld.w	r2,r7[-24]
80004e02:	30 03       	mov	r3,0
80004e04:	e2 02 02 4a 	mul	r10,r1,r2
80004e08:	e6 00 02 48 	mul	r8,r3,r0
80004e0c:	10 0a       	add	r10,r8
80004e0e:	e0 02 06 48 	mulu.d	r8,r0,r2
80004e12:	12 0a       	add	r10,r9
80004e14:	14 99       	mov	r9,r10
80004e16:	e0 6a 03 e7 	mov	r10,999
80004e1a:	30 0b       	mov	r11,0
80004e1c:	f0 0a 00 0a 	add	r10,r8,r10
80004e20:	f2 0b 00 4b 	adc	r11,r9,r11
80004e24:	e0 68 03 e8 	mov	r8,1000
80004e28:	30 09       	mov	r9,0
80004e2a:	f0 1f 00 3e 	mcall	80004f20 <et024006_ResetDisplay+0x2b8>
80004e2e:	14 98       	mov	r8,r10
80004e30:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004e32:	ef 48 ff f4 	st.w	r7[-12],r8
80004e36:	ee c8 00 4c 	sub	r8,r7,76
80004e3a:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004e3e:	e1 b8 00 42 	mfsr	r8,0x108
80004e42:	10 99       	mov	r9,r8
80004e44:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004e48:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004e4a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004e4e:	70 09       	ld.w	r9,r8[0x0]
80004e50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e54:	10 09       	add	r9,r8
80004e56:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004e5a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004e5c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004e60:	30 08       	mov	r8,0
80004e62:	f3 68 00 08 	st.b	r9[8],r8
80004e66:	ee c8 00 4c 	sub	r8,r7,76
80004e6a:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004e6e:	e1 b8 00 42 	mfsr	r8,0x108
80004e72:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004e76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e7a:	f1 39 00 08 	ld.ub	r9,r8[8]
80004e7e:	30 28       	mov	r8,2
80004e80:	f0 09 18 00 	cp.b	r9,r8
80004e84:	c0 31       	brne	80004e8a <et024006_ResetDisplay+0x222>
    return false;
80004e86:	30 08       	mov	r8,0
80004e88:	c4 38       	rjmp	80004f0e <et024006_ResetDisplay+0x2a6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004e8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e8e:	f1 39 00 08 	ld.ub	r9,r8[8]
80004e92:	30 18       	mov	r8,1
80004e94:	f0 09 18 00 	cp.b	r9,r8
80004e98:	c0 31       	brne	80004e9e <et024006_ResetDisplay+0x236>
    return true;
80004e9a:	30 18       	mov	r8,1
80004e9c:	c3 98       	rjmp	80004f0e <et024006_ResetDisplay+0x2a6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ea2:	70 09       	ld.w	r9,r8[0x0]
80004ea4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ea8:	70 18       	ld.w	r8,r8[0x4]
80004eaa:	10 39       	cp.w	r9,r8
80004eac:	e0 88 00 1a 	brls	80004ee0 <et024006_ResetDisplay+0x278>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004eb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004eb4:	70 08       	ld.w	r8,r8[0x0]
80004eb6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004eba:	10 39       	cp.w	r9,r8
80004ebc:	c1 02       	brcc	80004edc <et024006_ResetDisplay+0x274>
80004ebe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ec2:	70 18       	ld.w	r8,r8[0x4]
80004ec4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004ec8:	10 39       	cp.w	r9,r8
80004eca:	e0 88 00 09 	brls	80004edc <et024006_ResetDisplay+0x274>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004ece:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004ed2:	30 18       	mov	r8,1
80004ed4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004ed8:	30 18       	mov	r8,1
80004eda:	c1 a8       	rjmp	80004f0e <et024006_ResetDisplay+0x2a6>
    }
    return false;
80004edc:	30 08       	mov	r8,0
80004ede:	c1 88       	rjmp	80004f0e <et024006_ResetDisplay+0x2a6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004ee0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ee4:	70 08       	ld.w	r8,r8[0x0]
80004ee6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004eea:	10 39       	cp.w	r9,r8
80004eec:	c0 93       	brcs	80004efe <et024006_ResetDisplay+0x296>
80004eee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ef2:	70 18       	ld.w	r8,r8[0x4]
80004ef4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004ef8:	10 39       	cp.w	r9,r8
80004efa:	e0 88 00 09 	brls	80004f0c <et024006_ResetDisplay+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004efe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004f02:	30 18       	mov	r8,1
80004f04:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004f08:	30 18       	mov	r8,1
80004f0a:	c0 28       	rjmp	80004f0e <et024006_ResetDisplay+0x2a6>
    }
    return false;
80004f0c:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004f0e:	58 08       	cp.w	r8,0
80004f10:	ca b0       	breq	80004e66 <et024006_ResetDisplay+0x1fe>
}
80004f12:	2e 6d       	sub	sp,-104
80004f14:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80004f18:	80 00       	ld.sh	r0,r0[0x0]
80004f1a:	8e 32       	ld.sh	r2,r7[0x6]
80004f1c:	00 00       	add	r0,r0
80004f1e:	06 0c       	add	r12,r3
80004f20:	80 00       	ld.sh	r0,r0[0x0]
80004f22:	e5 4c 80 00 	st.w	r2[-32768],r12
80004f26:	8d ca       	st.w	r6[0x30],r10

80004f28 <et024006_AdjustGamma>:
/*! \brief Display gamma setup.
 *
 * Parameters are provided by EDT for the display.
 */
static void et024006_AdjustGamma( void )
{
80004f28:	eb cd 40 80 	pushm	r7,lr
80004f2c:	1a 97       	mov	r7,sp
80004f2e:	20 6d       	sub	sp,24
80004f30:	34 68       	mov	r8,70
80004f32:	ef 68 ff e9 	st.b	r7[-23],r8
80004f36:	39 48       	mov	r8,-108
80004f38:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f3c:	fc 19 c0 00 	movh	r9,0xc000
80004f40:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80004f44:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f46:	fc 19 c0 20 	movh	r9,0xc020
80004f4a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80004f4e:	b2 08       	st.h	r9[0x0],r8
80004f50:	34 78       	mov	r8,71
80004f52:	ef 68 ff eb 	st.b	r7[-21],r8
80004f56:	34 18       	mov	r8,65
80004f58:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f5c:	fc 19 c0 00 	movh	r9,0xc000
80004f60:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80004f64:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f66:	fc 19 c0 20 	movh	r9,0xc020
80004f6a:	ef 38 ff ea 	ld.ub	r8,r7[-22]
80004f6e:	b2 08       	st.h	r9[0x0],r8
80004f70:	34 88       	mov	r8,72
80004f72:	ef 68 ff ed 	st.b	r7[-19],r8
80004f76:	30 08       	mov	r8,0
80004f78:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f7c:	fc 19 c0 00 	movh	r9,0xc000
80004f80:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004f84:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004f86:	fc 19 c0 20 	movh	r9,0xc020
80004f8a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80004f8e:	b2 08       	st.h	r9[0x0],r8
80004f90:	34 98       	mov	r8,73
80004f92:	ef 68 ff ef 	st.b	r7[-17],r8
80004f96:	33 38       	mov	r8,51
80004f98:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004f9c:	fc 19 c0 00 	movh	r9,0xc000
80004fa0:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80004fa4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004fa6:	fc 19 c0 20 	movh	r9,0xc020
80004faa:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004fae:	b2 08       	st.h	r9[0x0],r8
80004fb0:	34 a8       	mov	r8,74
80004fb2:	ef 68 ff f1 	st.b	r7[-15],r8
80004fb6:	32 58       	mov	r8,37
80004fb8:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004fbc:	fc 19 c0 00 	movh	r9,0xc000
80004fc0:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80004fc4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004fc6:	fc 19 c0 20 	movh	r9,0xc020
80004fca:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004fce:	b2 08       	st.h	r9[0x0],r8
80004fd0:	34 b8       	mov	r8,75
80004fd2:	ef 68 ff f3 	st.b	r7[-13],r8
80004fd6:	34 58       	mov	r8,69
80004fd8:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004fdc:	fc 19 c0 00 	movh	r9,0xc000
80004fe0:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80004fe4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80004fe6:	fc 19 c0 20 	movh	r9,0xc020
80004fea:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80004fee:	b2 08       	st.h	r9[0x0],r8
80004ff0:	34 c8       	mov	r8,76
80004ff2:	ef 68 ff f5 	st.b	r7[-11],r8
80004ff6:	34 48       	mov	r8,68
80004ff8:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80004ffc:	fc 19 c0 00 	movh	r9,0xc000
80005000:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005004:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005006:	fc 19 c0 20 	movh	r9,0xc020
8000500a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000500e:	b2 08       	st.h	r9[0x0],r8
80005010:	34 d8       	mov	r8,77
80005012:	ef 68 ff f7 	st.b	r7[-9],r8
80005016:	37 78       	mov	r8,119
80005018:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000501c:	fc 19 c0 00 	movh	r9,0xc000
80005020:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005024:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005026:	fc 19 c0 20 	movh	r9,0xc020
8000502a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000502e:	b2 08       	st.h	r9[0x0],r8
80005030:	34 e8       	mov	r8,78
80005032:	ef 68 ff f9 	st.b	r7[-7],r8
80005036:	31 28       	mov	r8,18
80005038:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000503c:	fc 19 c0 00 	movh	r9,0xc000
80005040:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005044:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005046:	fc 19 c0 20 	movh	r9,0xc020
8000504a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000504e:	b2 08       	st.h	r9[0x0],r8
80005050:	34 f8       	mov	r8,79
80005052:	ef 68 ff fb 	st.b	r7[-5],r8
80005056:	3c c8       	mov	r8,-52
80005058:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000505c:	fc 19 c0 00 	movh	r9,0xc000
80005060:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005064:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005066:	fc 19 c0 20 	movh	r9,0xc020
8000506a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000506e:	b2 08       	st.h	r9[0x0],r8
80005070:	35 08       	mov	r8,80
80005072:	ef 68 ff fd 	st.b	r7[-3],r8
80005076:	34 68       	mov	r8,70
80005078:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000507c:	fc 19 c0 00 	movh	r9,0xc000
80005080:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005084:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005086:	fc 19 c0 20 	movh	r9,0xc020
8000508a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000508e:	b2 08       	st.h	r9[0x0],r8
80005090:	35 18       	mov	r8,81
80005092:	ef 68 ff ff 	st.b	r7[-1],r8
80005096:	38 28       	mov	r8,-126
80005098:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000509c:	fc 19 c0 00 	movh	r9,0xc000
800050a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800050a4:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800050a6:	fc 19 c0 20 	movh	r9,0xc020
800050aa:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800050ae:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_GAMMACTRL8, 0x77 );
  et024006_WriteRegister( HIMAX_GAMMACTRL9, 0x12 );
  et024006_WriteRegister( HIMAX_GAMMACTRL10, 0xCC );
  et024006_WriteRegister( HIMAX_GAMMACTRL11, 0x46 );
  et024006_WriteRegister( HIMAX_GAMMACTRL12, 0x82 );
}
800050b0:	2f ad       	sub	sp,-24
800050b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800050b6 <et024006_GeneralSettings>:
/*! \brief General display settings.
 *
 * This are settings provided by EDT and are optimised for the display.
 */
static void et024006_GeneralSettings(void)
{
800050b6:	eb cd 40 80 	pushm	r7,lr
800050ba:	1a 97       	mov	r7,sp
800050bc:	20 8d       	sub	sp,32
800050be:	30 18       	mov	r8,1
800050c0:	ef 68 ff e1 	st.b	r7[-31],r8
800050c4:	30 68       	mov	r8,6
800050c6:	ef 68 ff e0 	st.b	r7[-32],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800050ca:	fc 19 c0 00 	movh	r9,0xc000
800050ce:	ef 38 ff e1 	ld.ub	r8,r7[-31]
800050d2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800050d4:	fc 19 c0 20 	movh	r9,0xc020
800050d8:	ef 38 ff e0 	ld.ub	r8,r7[-32]
800050dc:	b2 08       	st.h	r9[0x0],r8
800050de:	33 a8       	mov	r8,58
800050e0:	ef 68 ff e3 	st.b	r7[-29],r8
800050e4:	30 18       	mov	r8,1
800050e6:	ef 68 ff e2 	st.b	r7[-30],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800050ea:	fc 19 c0 00 	movh	r9,0xc000
800050ee:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800050f2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800050f4:	fc 19 c0 20 	movh	r9,0xc020
800050f8:	ef 38 ff e2 	ld.ub	r8,r7[-30]
800050fc:	b2 08       	st.h	r9[0x0],r8
800050fe:	33 b8       	mov	r8,59
80005100:	ef 68 ff e5 	st.b	r7[-27],r8
80005104:	30 18       	mov	r8,1
80005106:	ef 68 ff e4 	st.b	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000510a:	fc 19 c0 00 	movh	r9,0xc000
8000510e:	ef 38 ff e5 	ld.ub	r8,r7[-27]
80005112:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005114:	fc 19 c0 20 	movh	r9,0xc020
80005118:	ef 38 ff e4 	ld.ub	r8,r7[-28]
8000511c:	b2 08       	st.h	r9[0x0],r8
8000511e:	33 c8       	mov	r8,60
80005120:	ef 68 ff e7 	st.b	r7[-25],r8
80005124:	3f 08       	mov	r8,-16
80005126:	ef 68 ff e6 	st.b	r7[-26],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000512a:	fc 19 c0 00 	movh	r9,0xc000
8000512e:	ef 38 ff e7 	ld.ub	r8,r7[-25]
80005132:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005134:	fc 19 c0 20 	movh	r9,0xc020
80005138:	ef 38 ff e6 	ld.ub	r8,r7[-26]
8000513c:	b2 08       	st.h	r9[0x0],r8
8000513e:	33 d8       	mov	r8,61
80005140:	ef 68 ff e9 	st.b	r7[-23],r8
80005144:	30 08       	mov	r8,0
80005146:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000514a:	fc 19 c0 00 	movh	r9,0xc000
8000514e:	ef 38 ff e9 	ld.ub	r8,r7[-23]
80005152:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005154:	fc 19 c0 20 	movh	r9,0xc020
80005158:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000515c:	b2 08       	st.h	r9[0x0],r8
8000515e:	33 e8       	mov	r8,62
80005160:	ef 68 ff eb 	st.b	r7[-21],r8
80005164:	33 88       	mov	r8,56
80005166:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000516a:	fc 19 c0 00 	movh	r9,0xc000
8000516e:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80005172:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005174:	fc 19 c0 20 	movh	r9,0xc020
80005178:	ef 38 ff ea 	ld.ub	r8,r7[-22]
8000517c:	b2 08       	st.h	r9[0x0],r8
8000517e:	34 08       	mov	r8,64
80005180:	ef 68 ff ed 	st.b	r7[-19],r8
80005184:	30 f8       	mov	r8,15
80005186:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000518a:	fc 19 c0 00 	movh	r9,0xc000
8000518e:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005192:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005194:	fc 19 c0 20 	movh	r9,0xc020
80005198:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000519c:	b2 08       	st.h	r9[0x0],r8
8000519e:	34 18       	mov	r8,65
800051a0:	ef 68 ff ef 	st.b	r7[-17],r8
800051a4:	3f 08       	mov	r8,-16
800051a6:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051aa:	fc 19 c0 00 	movh	r9,0xc000
800051ae:	ef 38 ff ef 	ld.ub	r8,r7[-17]
800051b2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051b4:	fc 19 c0 20 	movh	r9,0xc020
800051b8:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800051bc:	b2 08       	st.h	r9[0x0],r8
800051be:	32 78       	mov	r8,39
800051c0:	ef 68 ff f1 	st.b	r7[-15],r8
800051c4:	30 28       	mov	r8,2
800051c6:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051ca:	fc 19 c0 00 	movh	r9,0xc000
800051ce:	ef 38 ff f1 	ld.ub	r8,r7[-15]
800051d2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051d4:	fc 19 c0 20 	movh	r9,0xc020
800051d8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800051dc:	b2 08       	st.h	r9[0x0],r8
800051de:	32 88       	mov	r8,40
800051e0:	ef 68 ff f3 	st.b	r7[-13],r8
800051e4:	30 28       	mov	r8,2
800051e6:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800051ea:	fc 19 c0 00 	movh	r9,0xc000
800051ee:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800051f2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800051f4:	fc 19 c0 20 	movh	r9,0xc020
800051f8:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800051fc:	b2 08       	st.h	r9[0x0],r8
800051fe:	32 98       	mov	r8,41
80005200:	ef 68 ff f5 	st.b	r7[-11],r8
80005204:	30 28       	mov	r8,2
80005206:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000520a:	fc 19 c0 00 	movh	r9,0xc000
8000520e:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005212:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005214:	fc 19 c0 20 	movh	r9,0xc020
80005218:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000521c:	b2 08       	st.h	r9[0x0],r8
8000521e:	32 a8       	mov	r8,42
80005220:	ef 68 ff f7 	st.b	r7[-9],r8
80005224:	30 28       	mov	r8,2
80005226:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000522a:	fc 19 c0 00 	movh	r9,0xc000
8000522e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005232:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005234:	fc 19 c0 20 	movh	r9,0xc020
80005238:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000523c:	b2 08       	st.h	r9[0x0],r8
8000523e:	32 c8       	mov	r8,44
80005240:	ef 68 ff f9 	st.b	r7[-7],r8
80005244:	30 28       	mov	r8,2
80005246:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000524a:	fc 19 c0 00 	movh	r9,0xc000
8000524e:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80005252:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005254:	fc 19 c0 20 	movh	r9,0xc020
80005258:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000525c:	b2 08       	st.h	r9[0x0],r8
8000525e:	32 d8       	mov	r8,45
80005260:	ef 68 ff fb 	st.b	r7[-5],r8
80005264:	30 28       	mov	r8,2
80005266:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000526a:	fc 19 c0 00 	movh	r9,0xc000
8000526e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005272:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005274:	fc 19 c0 20 	movh	r9,0xc020
80005278:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000527c:	b2 08       	st.h	r9[0x0],r8
8000527e:	31 98       	mov	r8,25
80005280:	ef 68 ff fd 	st.b	r7[-3],r8
80005284:	34 98       	mov	r8,73
80005286:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
8000528a:	fc 19 c0 00 	movh	r9,0xc000
8000528e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005292:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005294:	fc 19 c0 20 	movh	r9,0xc020
80005298:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000529c:	b2 08       	st.h	r9[0x0],r8
8000529e:	39 38       	mov	r8,-109
800052a0:	ef 68 ff ff 	st.b	r7[-1],r8
800052a4:	30 88       	mov	r8,8
800052a6:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052aa:	fc 19 c0 00 	movh	r9,0xc000
800052ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800052b2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052b4:	fc 19 c0 20 	movh	r9,0xc020
800052b8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800052bc:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL6, 0x02 );
  et024006_WriteRegister( HIMAX_DISPCTRL7, 0x02 );

  et024006_WriteRegister( HIMAX_OSCCTRL1, 0x49 );
  et024006_WriteRegister( HIMAX_OSCCTRL3, 0x08 );
}
800052be:	2f 8d       	sub	sp,-32
800052c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800052c4 <et024006_PowerSettings>:
/*! \brief Power setup.
 *
 * Sets basic DC/DC and VCOM parameters.
 */
static void et024006_PowerSettings(void)
{
800052c4:	eb cd 40 80 	pushm	r7,lr
800052c8:	1a 97       	mov	r7,sp
800052ca:	20 6d       	sub	sp,24
800052cc:	32 38       	mov	r8,35
800052ce:	ef 68 ff e9 	st.b	r7[-23],r8
800052d2:	39 58       	mov	r8,-107
800052d4:	ef 68 ff e8 	st.b	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052d8:	fc 19 c0 00 	movh	r9,0xc000
800052dc:	ef 38 ff e9 	ld.ub	r8,r7[-23]
800052e0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800052e2:	fc 19 c0 20 	movh	r9,0xc020
800052e6:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800052ea:	b2 08       	st.h	r9[0x0],r8
800052ec:	32 48       	mov	r8,36
800052ee:	ef 68 ff eb 	st.b	r7[-21],r8
800052f2:	39 58       	mov	r8,-107
800052f4:	ef 68 ff ea 	st.b	r7[-22],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800052f8:	fc 19 c0 00 	movh	r9,0xc000
800052fc:	ef 38 ff eb 	ld.ub	r8,r7[-21]
80005300:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005302:	fc 19 c0 20 	movh	r9,0xc020
80005306:	ef 38 ff ea 	ld.ub	r8,r7[-22]
8000530a:	b2 08       	st.h	r9[0x0],r8
8000530c:	32 58       	mov	r8,37
8000530e:	ef 68 ff ed 	st.b	r7[-19],r8
80005312:	3f f8       	mov	r8,-1
80005314:	ef 68 ff ec 	st.b	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005318:	fc 19 c0 00 	movh	r9,0xc000
8000531c:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005320:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005322:	fc 19 c0 20 	movh	r9,0xc020
80005326:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000532a:	b2 08       	st.h	r9[0x0],r8
8000532c:	39 08       	mov	r8,-112
8000532e:	ef 68 ff ef 	st.b	r7[-17],r8
80005332:	37 f8       	mov	r8,127
80005334:	ef 68 ff ee 	st.b	r7[-18],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005338:	fc 19 c0 00 	movh	r9,0xc000
8000533c:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80005340:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005342:	fc 19 c0 20 	movh	r9,0xc020
80005346:	ef 38 ff ee 	ld.ub	r8,r7[-18]
8000534a:	b2 08       	st.h	r9[0x0],r8
8000534c:	33 58       	mov	r8,53
8000534e:	ef 68 ff f1 	st.b	r7[-15],r8
80005352:	33 88       	mov	r8,56
80005354:	ef 68 ff f0 	st.b	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005358:	fc 19 c0 00 	movh	r9,0xc000
8000535c:	ef 38 ff f1 	ld.ub	r8,r7[-15]
80005360:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005362:	fc 19 c0 20 	movh	r9,0xc020
80005366:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000536a:	b2 08       	st.h	r9[0x0],r8
8000536c:	33 68       	mov	r8,54
8000536e:	ef 68 ff f3 	st.b	r7[-13],r8
80005372:	37 88       	mov	r8,120
80005374:	ef 68 ff f2 	st.b	r7[-14],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005378:	fc 19 c0 00 	movh	r9,0xc000
8000537c:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80005380:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005382:	fc 19 c0 20 	movh	r9,0xc020
80005386:	ef 38 ff f2 	ld.ub	r8,r7[-14]
8000538a:	b2 08       	st.h	r9[0x0],r8
8000538c:	31 d8       	mov	r8,29
8000538e:	ef 68 ff f5 	st.b	r7[-11],r8
80005392:	30 78       	mov	r8,7
80005394:	ef 68 ff f4 	st.b	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005398:	fc 19 c0 00 	movh	r9,0xc000
8000539c:	ef 38 ff f5 	ld.ub	r8,r7[-11]
800053a0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053a2:	fc 19 c0 20 	movh	r9,0xc020
800053a6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800053aa:	b2 08       	st.h	r9[0x0],r8
800053ac:	31 e8       	mov	r8,30
800053ae:	ef 68 ff f7 	st.b	r7[-9],r8
800053b2:	30 08       	mov	r8,0
800053b4:	ef 68 ff f6 	st.b	r7[-10],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053b8:	fc 19 c0 00 	movh	r9,0xc000
800053bc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800053c0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053c2:	fc 19 c0 20 	movh	r9,0xc020
800053c6:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800053ca:	b2 08       	st.h	r9[0x0],r8
800053cc:	31 f8       	mov	r8,31
800053ce:	ef 68 ff f9 	st.b	r7[-7],r8
800053d2:	30 48       	mov	r8,4
800053d4:	ef 68 ff f8 	st.b	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053d8:	fc 19 c0 00 	movh	r9,0xc000
800053dc:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800053e0:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800053e2:	fc 19 c0 20 	movh	r9,0xc020
800053e6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800053ea:	b2 08       	st.h	r9[0x0],r8
800053ec:	32 08       	mov	r8,32
800053ee:	ef 68 ff fb 	st.b	r7[-5],r8
800053f2:	34 08       	mov	r8,64
800053f4:	ef 68 ff fa 	st.b	r7[-6],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800053f8:	fc 19 c0 00 	movh	r9,0xc000
800053fc:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80005400:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005402:	fc 19 c0 20 	movh	r9,0xc020
80005406:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000540a:	b2 08       	st.h	r9[0x0],r8
8000540c:	34 48       	mov	r8,68
8000540e:	ef 68 ff fd 	st.b	r7[-3],r8
80005412:	33 88       	mov	r8,56
80005414:	ef 68 ff fc 	st.b	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005418:	fc 19 c0 00 	movh	r9,0xc000
8000541c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005420:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005422:	fc 19 c0 20 	movh	r9,0xc020
80005426:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000542a:	b2 08       	st.h	r9[0x0],r8
8000542c:	34 58       	mov	r8,69
8000542e:	ef 68 ff ff 	st.b	r7[-1],r8
80005432:	31 28       	mov	r8,18
80005434:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005438:	fc 19 c0 00 	movh	r9,0xc000
8000543c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005440:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005442:	fc 19 c0 20 	movh	r9,0xc020
80005446:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000544a:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL4, 0x00 );
  et024006_WriteRegister( HIMAX_POWERCTRL5, 0x04 );
  et024006_WriteRegister( HIMAX_POWERCTRL6, 0x40 );
  et024006_WriteRegister( HIMAX_VCOMCTRL2, 0x38 );
  et024006_WriteRegister( HIMAX_VCOMCTRL3, 0x12 );
}
8000544c:	2f ad       	sub	sp,-24
8000544e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005452 <et024006_InterfaceSettings>:
/*! \brief Sets display interface.
 *
 * Configures screen orientation and color mode.
 */
static void et024006_InterfaceSettings(void)
{
80005452:	eb cd 40 80 	pushm	r7,lr
80005456:	1a 97       	mov	r7,sp
80005458:	20 1d       	sub	sp,4
8000545a:	31 68       	mov	r8,22
8000545c:	ef 68 ff ff 	st.b	r7[-1],r8
80005460:	36 88       	mov	r8,104
80005462:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005466:	fc 19 c0 00 	movh	r9,0xc000
8000546a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000546e:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005470:	fc 19 c0 20 	movh	r9,0xc020
80005474:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005478:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_MEMACCESSCTRL,
    (1 << HIMAX_MX)
    | (1 << HIMAX_MV)
    | (1 << HIMAX_BGR) );

}
8000547a:	2f fd       	sub	sp,-4
8000547c:	e3 cd 80 80 	ldm	sp++,r7,pc

80005480 <et024006_PowerUp>:
/*! \brief Power up display.
 *
 * Turns on DC/DC converters.
 */
static void et024006_PowerUp(void)
{
80005480:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005484:	1a 97       	mov	r7,sp
80005486:	fa cd 01 24 	sub	sp,sp,292
  cpu_delay_ms( 10, tft_data.cpu_hz );
8000548a:	fe f8 07 22 	ld.w	r8,pc[1826]
8000548e:	70 09       	ld.w	r9,r8[0x0]
80005490:	30 a8       	mov	r8,10
80005492:	ef 48 ff 54 	st.w	r7[-172],r8
80005496:	ef 49 ff 50 	st.w	r7[-176],r9
8000549a:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000549e:	ef 48 ff 5c 	st.w	r7[-164],r8
800054a2:	ee f8 ff 50 	ld.w	r8,r7[-176]
800054a6:	ef 48 ff 58 	st.w	r7[-168],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800054aa:	ee f2 ff 5c 	ld.w	r2,r7[-164]
800054ae:	30 03       	mov	r3,0
800054b0:	ee fa ff 58 	ld.w	r10,r7[-168]
800054b4:	30 0b       	mov	r11,0
800054b6:	e6 0a 02 49 	mul	r9,r3,r10
800054ba:	f6 02 02 48 	mul	r8,r11,r2
800054be:	10 09       	add	r9,r8
800054c0:	e4 0a 06 4a 	mulu.d	r10,r2,r10
800054c4:	16 09       	add	r9,r11
800054c6:	12 9b       	mov	r11,r9
800054c8:	e0 68 03 e7 	mov	r8,999
800054cc:	30 09       	mov	r9,0
800054ce:	10 0a       	add	r10,r8
800054d0:	f6 09 00 4b 	adc	r11,r11,r9
800054d4:	e0 68 03 e8 	mov	r8,1000
800054d8:	30 09       	mov	r9,0
800054da:	f0 1f 01 b6 	mcall	80005bb0 <et024006_PowerUp+0x730>
800054de:	14 98       	mov	r8,r10
800054e0:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800054e2:	ef 48 ff 64 	st.w	r7[-156],r8
800054e6:	ee c8 00 ec 	sub	r8,r7,236
800054ea:	ef 48 ff 60 	st.w	r7[-160],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800054ee:	e1 b8 00 42 	mfsr	r8,0x108
800054f2:	10 99       	mov	r9,r8
800054f4:	ee f8 ff 60 	ld.w	r8,r7[-160]
800054f8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800054fa:	ee f8 ff 60 	ld.w	r8,r7[-160]
800054fe:	70 09       	ld.w	r9,r8[0x0]
80005500:	ee f8 ff 64 	ld.w	r8,r7[-156]
80005504:	10 09       	add	r9,r8
80005506:	ee f8 ff 60 	ld.w	r8,r7[-160]
8000550a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000550c:	ee f9 ff 60 	ld.w	r9,r7[-160]
80005510:	30 08       	mov	r8,0
80005512:	f3 68 00 08 	st.b	r9[8],r8
80005516:	ee c8 00 ec 	sub	r8,r7,236
8000551a:	ef 48 ff 68 	st.w	r7[-152],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000551e:	e1 b8 00 42 	mfsr	r8,0x108
80005522:	ef 48 ff 6c 	st.w	r7[-148],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005526:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000552a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000552e:	30 28       	mov	r8,2
80005530:	f0 09 18 00 	cp.b	r9,r8
80005534:	c0 31       	brne	8000553a <et024006_PowerUp+0xba>
    return false;
80005536:	30 08       	mov	r8,0
80005538:	c4 38       	rjmp	800055be <et024006_PowerUp+0x13e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000553a:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000553e:	f1 39 00 08 	ld.ub	r9,r8[8]
80005542:	30 18       	mov	r8,1
80005544:	f0 09 18 00 	cp.b	r9,r8
80005548:	c0 31       	brne	8000554e <et024006_PowerUp+0xce>
    return true;
8000554a:	30 18       	mov	r8,1
8000554c:	c3 98       	rjmp	800055be <et024006_PowerUp+0x13e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000554e:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005552:	70 09       	ld.w	r9,r8[0x0]
80005554:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005558:	70 18       	ld.w	r8,r8[0x4]
8000555a:	10 39       	cp.w	r9,r8
8000555c:	e0 88 00 1a 	brls	80005590 <et024006_PowerUp+0x110>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005560:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005564:	70 09       	ld.w	r9,r8[0x0]
80005566:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000556a:	12 38       	cp.w	r8,r9
8000556c:	c1 02       	brcc	8000558c <et024006_PowerUp+0x10c>
8000556e:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005572:	70 19       	ld.w	r9,r8[0x4]
80005574:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80005578:	12 38       	cp.w	r8,r9
8000557a:	e0 88 00 09 	brls	8000558c <et024006_PowerUp+0x10c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000557e:	ee f9 ff 68 	ld.w	r9,r7[-152]
80005582:	30 18       	mov	r8,1
80005584:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005588:	30 18       	mov	r8,1
8000558a:	c1 a8       	rjmp	800055be <et024006_PowerUp+0x13e>
    }
    return false;
8000558c:	30 08       	mov	r8,0
8000558e:	c1 88       	rjmp	800055be <et024006_PowerUp+0x13e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005590:	ee f8 ff 68 	ld.w	r8,r7[-152]
80005594:	70 09       	ld.w	r9,r8[0x0]
80005596:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000559a:	12 38       	cp.w	r8,r9
8000559c:	c0 93       	brcs	800055ae <et024006_PowerUp+0x12e>
8000559e:	ee f8 ff 68 	ld.w	r8,r7[-152]
800055a2:	70 19       	ld.w	r9,r8[0x4]
800055a4:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800055a8:	12 38       	cp.w	r8,r9
800055aa:	e0 88 00 09 	brls	800055bc <et024006_PowerUp+0x13c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800055ae:	ee f9 ff 68 	ld.w	r9,r7[-152]
800055b2:	30 18       	mov	r8,1
800055b4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800055b8:	30 18       	mov	r8,1
800055ba:	c0 28       	rjmp	800055be <et024006_PowerUp+0x13e>
    }
    return false;
800055bc:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800055be:	58 08       	cp.w	r8,0
800055c0:	ca b0       	breq	80005516 <et024006_PowerUp+0x96>
800055c2:	31 c8       	mov	r8,28
800055c4:	ef 68 ff 73 	st.b	r7[-141],r8
800055c8:	30 48       	mov	r8,4
800055ca:	ef 68 ff 72 	st.b	r7[-142],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800055ce:	fc 19 c0 00 	movh	r9,0xc000
800055d2:	ef 38 ff 73 	ld.ub	r8,r7[-141]
800055d6:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800055d8:	fc 19 c0 20 	movh	r9,0xc020
800055dc:	ef 38 ff 72 	ld.ub	r8,r7[-142]
800055e0:	b2 08       	st.h	r9[0x0],r8
static void et024006_PowerUp(void)
{
  cpu_delay_ms( 10, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
800055e2:	fe f8 05 ca 	ld.w	r8,pc[1482]
800055e6:	70 09       	ld.w	r9,r8[0x0]
800055e8:	31 48       	mov	r8,20
800055ea:	ef 48 ff 78 	st.w	r7[-136],r8
800055ee:	ef 49 ff 74 	st.w	r7[-140],r9
800055f2:	ee f8 ff 78 	ld.w	r8,r7[-136]
800055f6:	ef 48 ff 80 	st.w	r7[-128],r8
800055fa:	ee f8 ff 74 	ld.w	r8,r7[-140]
800055fe:	ef 48 ff 7c 	st.w	r7[-132],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005602:	ee fc ff 80 	ld.w	r12,r7[-128]
80005606:	ef 4c fe e0 	st.w	r7[-288],r12
8000560a:	30 0b       	mov	r11,0
8000560c:	ef 4b fe dc 	st.w	r7[-292],r11
80005610:	ee f0 ff 7c 	ld.w	r0,r7[-132]
80005614:	30 01       	mov	r1,0
80005616:	ee f9 fe dc 	ld.w	r9,r7[-292]
8000561a:	a1 39       	mul	r9,r0
8000561c:	ee fa fe e0 	ld.w	r10,r7[-288]
80005620:	e2 0a 02 48 	mul	r8,r1,r10
80005624:	10 09       	add	r9,r8
80005626:	ee f8 fe e0 	ld.w	r8,r7[-288]
8000562a:	f0 00 06 4a 	mulu.d	r10,r8,r0
8000562e:	16 09       	add	r9,r11
80005630:	12 9b       	mov	r11,r9
80005632:	e0 68 03 e7 	mov	r8,999
80005636:	30 09       	mov	r9,0
80005638:	10 0a       	add	r10,r8
8000563a:	f6 09 00 4b 	adc	r11,r11,r9
8000563e:	e0 68 03 e8 	mov	r8,1000
80005642:	30 09       	mov	r9,0
80005644:	f0 1f 01 5b 	mcall	80005bb0 <et024006_PowerUp+0x730>
80005648:	14 98       	mov	r8,r10
8000564a:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000564c:	ef 48 ff 88 	st.w	r7[-120],r8
80005650:	ee c8 00 e0 	sub	r8,r7,224
80005654:	ef 48 ff 84 	st.w	r7[-124],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005658:	e1 b8 00 42 	mfsr	r8,0x108
8000565c:	10 99       	mov	r9,r8
8000565e:	ee f8 ff 84 	ld.w	r8,r7[-124]
80005662:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005664:	ee f8 ff 84 	ld.w	r8,r7[-124]
80005668:	70 09       	ld.w	r9,r8[0x0]
8000566a:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000566e:	10 09       	add	r9,r8
80005670:	ee f8 ff 84 	ld.w	r8,r7[-124]
80005674:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005676:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000567a:	30 08       	mov	r8,0
8000567c:	f3 68 00 08 	st.b	r9[8],r8
80005680:	ee c8 00 e0 	sub	r8,r7,224
80005684:	ef 48 ff 8c 	st.w	r7[-116],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005688:	e1 b8 00 42 	mfsr	r8,0x108
8000568c:	ef 48 ff 90 	st.w	r7[-112],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005690:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80005694:	f1 39 00 08 	ld.ub	r9,r8[8]
80005698:	30 28       	mov	r8,2
8000569a:	f0 09 18 00 	cp.b	r9,r8
8000569e:	c0 31       	brne	800056a4 <et024006_PowerUp+0x224>
    return false;
800056a0:	30 08       	mov	r8,0
800056a2:	c4 38       	rjmp	80005728 <et024006_PowerUp+0x2a8>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800056a4:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800056a8:	f1 39 00 08 	ld.ub	r9,r8[8]
800056ac:	30 18       	mov	r8,1
800056ae:	f0 09 18 00 	cp.b	r9,r8
800056b2:	c0 31       	brne	800056b8 <et024006_PowerUp+0x238>
    return true;
800056b4:	30 18       	mov	r8,1
800056b6:	c3 98       	rjmp	80005728 <et024006_PowerUp+0x2a8>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800056b8:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800056bc:	70 09       	ld.w	r9,r8[0x0]
800056be:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800056c2:	70 18       	ld.w	r8,r8[0x4]
800056c4:	10 39       	cp.w	r9,r8
800056c6:	e0 88 00 1a 	brls	800056fa <et024006_PowerUp+0x27a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800056ca:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800056ce:	70 08       	ld.w	r8,r8[0x0]
800056d0:	ee f9 ff 90 	ld.w	r9,r7[-112]
800056d4:	10 39       	cp.w	r9,r8
800056d6:	c1 02       	brcc	800056f6 <et024006_PowerUp+0x276>
800056d8:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800056dc:	70 18       	ld.w	r8,r8[0x4]
800056de:	ee f9 ff 90 	ld.w	r9,r7[-112]
800056e2:	10 39       	cp.w	r9,r8
800056e4:	e0 88 00 09 	brls	800056f6 <et024006_PowerUp+0x276>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800056e8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800056ec:	30 18       	mov	r8,1
800056ee:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800056f2:	30 18       	mov	r8,1
800056f4:	c1 a8       	rjmp	80005728 <et024006_PowerUp+0x2a8>
    }
    return false;
800056f6:	30 08       	mov	r8,0
800056f8:	c1 88       	rjmp	80005728 <et024006_PowerUp+0x2a8>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800056fa:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800056fe:	70 08       	ld.w	r8,r8[0x0]
80005700:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005704:	10 39       	cp.w	r9,r8
80005706:	c0 93       	brcs	80005718 <et024006_PowerUp+0x298>
80005708:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000570c:	70 18       	ld.w	r8,r8[0x4]
8000570e:	ee f9 ff 90 	ld.w	r9,r7[-112]
80005712:	10 39       	cp.w	r9,r8
80005714:	e0 88 00 09 	brls	80005726 <et024006_PowerUp+0x2a6>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005718:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000571c:	30 18       	mov	r8,1
8000571e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005722:	30 18       	mov	r8,1
80005724:	c0 28       	rjmp	80005728 <et024006_PowerUp+0x2a8>
    }
    return false;
80005726:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005728:	58 08       	cp.w	r8,0
8000572a:	ca b0       	breq	80005680 <et024006_PowerUp+0x200>
8000572c:	34 38       	mov	r8,67
8000572e:	ef 68 ff 97 	st.b	r7[-105],r8
80005732:	38 08       	mov	r8,-128
80005734:	ef 68 ff 96 	st.b	r7[-106],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005738:	fc 19 c0 00 	movh	r9,0xc000
8000573c:	ef 38 ff 97 	ld.ub	r8,r7[-105]
80005740:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005742:	fc 19 c0 20 	movh	r9,0xc020
80005746:	ef 38 ff 96 	ld.ub	r8,r7[-106]
8000574a:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_POWERCTRL2, 0x04 ); // AP = 100

  cpu_delay_ms( 20, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
8000574c:	fe f8 04 60 	ld.w	r8,pc[1120]
80005750:	70 08       	ld.w	r8,r8[0x0]
80005752:	30 59       	mov	r9,5
80005754:	ef 49 ff 9c 	st.w	r7[-100],r9
80005758:	ef 48 ff 98 	st.w	r7[-104],r8
8000575c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80005760:	ef 48 ff a4 	st.w	r7[-92],r8
80005764:	ee f8 ff 98 	ld.w	r8,r7[-104]
80005768:	ef 48 ff a0 	st.w	r7[-96],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000576c:	ee fc ff a4 	ld.w	r12,r7[-92]
80005770:	ef 4c fe f0 	st.w	r7[-272],r12
80005774:	30 0b       	mov	r11,0
80005776:	ef 4b fe ec 	st.w	r7[-276],r11
8000577a:	ee fa ff a0 	ld.w	r10,r7[-96]
8000577e:	ef 4a fe e8 	st.w	r7[-280],r10
80005782:	30 09       	mov	r9,0
80005784:	ef 49 fe e4 	st.w	r7[-284],r9
80005788:	ee fa fe ec 	ld.w	r10,r7[-276]
8000578c:	ee f8 fe e8 	ld.w	r8,r7[-280]
80005790:	b1 3a       	mul	r10,r8
80005792:	ee f8 fe e4 	ld.w	r8,r7[-284]
80005796:	ee fc fe f0 	ld.w	r12,r7[-272]
8000579a:	b9 38       	mul	r8,r12
8000579c:	10 0a       	add	r10,r8
8000579e:	ee fb fe f0 	ld.w	r11,r7[-272]
800057a2:	ee fc fe e8 	ld.w	r12,r7[-280]
800057a6:	f6 0c 06 48 	mulu.d	r8,r11,r12
800057aa:	12 0a       	add	r10,r9
800057ac:	14 99       	mov	r9,r10
800057ae:	e0 6a 03 e7 	mov	r10,999
800057b2:	30 0b       	mov	r11,0
800057b4:	f0 0a 00 0a 	add	r10,r8,r10
800057b8:	f2 0b 00 4b 	adc	r11,r9,r11
800057bc:	e0 68 03 e8 	mov	r8,1000
800057c0:	30 09       	mov	r9,0
800057c2:	f0 1f 00 fc 	mcall	80005bb0 <et024006_PowerUp+0x730>
800057c6:	14 98       	mov	r8,r10
800057c8:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800057ca:	ef 48 ff ac 	st.w	r7[-84],r8
800057ce:	ee c8 00 d4 	sub	r8,r7,212
800057d2:	ef 48 ff a8 	st.w	r7[-88],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800057d6:	e1 b8 00 42 	mfsr	r8,0x108
800057da:	10 99       	mov	r9,r8
800057dc:	ee f8 ff a8 	ld.w	r8,r7[-88]
800057e0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800057e2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800057e6:	70 09       	ld.w	r9,r8[0x0]
800057e8:	ee f8 ff ac 	ld.w	r8,r7[-84]
800057ec:	10 09       	add	r9,r8
800057ee:	ee f8 ff a8 	ld.w	r8,r7[-88]
800057f2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800057f4:	ee f9 ff a8 	ld.w	r9,r7[-88]
800057f8:	30 08       	mov	r8,0
800057fa:	f3 68 00 08 	st.b	r9[8],r8
800057fe:	ee c8 00 d4 	sub	r8,r7,212
80005802:	ef 48 ff b0 	st.w	r7[-80],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005806:	e1 b8 00 42 	mfsr	r8,0x108
8000580a:	ef 48 ff b4 	st.w	r7[-76],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000580e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005812:	f1 39 00 08 	ld.ub	r9,r8[8]
80005816:	30 28       	mov	r8,2
80005818:	f0 09 18 00 	cp.b	r9,r8
8000581c:	c0 31       	brne	80005822 <et024006_PowerUp+0x3a2>
    return false;
8000581e:	30 08       	mov	r8,0
80005820:	c4 38       	rjmp	800058a6 <et024006_PowerUp+0x426>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005822:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005826:	f1 39 00 08 	ld.ub	r9,r8[8]
8000582a:	30 18       	mov	r8,1
8000582c:	f0 09 18 00 	cp.b	r9,r8
80005830:	c0 31       	brne	80005836 <et024006_PowerUp+0x3b6>
    return true;
80005832:	30 18       	mov	r8,1
80005834:	c3 98       	rjmp	800058a6 <et024006_PowerUp+0x426>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005836:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000583a:	70 09       	ld.w	r9,r8[0x0]
8000583c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005840:	70 18       	ld.w	r8,r8[0x4]
80005842:	10 39       	cp.w	r9,r8
80005844:	e0 88 00 1a 	brls	80005878 <et024006_PowerUp+0x3f8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005848:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000584c:	70 08       	ld.w	r8,r8[0x0]
8000584e:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005852:	10 39       	cp.w	r9,r8
80005854:	c1 02       	brcc	80005874 <et024006_PowerUp+0x3f4>
80005856:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000585a:	70 18       	ld.w	r8,r8[0x4]
8000585c:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005860:	10 39       	cp.w	r9,r8
80005862:	e0 88 00 09 	brls	80005874 <et024006_PowerUp+0x3f4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005866:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000586a:	30 18       	mov	r8,1
8000586c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005870:	30 18       	mov	r8,1
80005872:	c1 a8       	rjmp	800058a6 <et024006_PowerUp+0x426>
    }
    return false;
80005874:	30 08       	mov	r8,0
80005876:	c1 88       	rjmp	800058a6 <et024006_PowerUp+0x426>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005878:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000587c:	70 08       	ld.w	r8,r8[0x0]
8000587e:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005882:	10 39       	cp.w	r9,r8
80005884:	c0 93       	brcs	80005896 <et024006_PowerUp+0x416>
80005886:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000588a:	70 18       	ld.w	r8,r8[0x4]
8000588c:	ee f9 ff b4 	ld.w	r9,r7[-76]
80005890:	10 39       	cp.w	r9,r8
80005892:	e0 88 00 09 	brls	800058a4 <et024006_PowerUp+0x424>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005896:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000589a:	30 18       	mov	r8,1
8000589c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800058a0:	30 18       	mov	r8,1
800058a2:	c0 28       	rjmp	800058a6 <et024006_PowerUp+0x426>
    }
    return false;
800058a4:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800058a6:	58 08       	cp.w	r8,0
800058a8:	ca b0       	breq	800057fe <et024006_PowerUp+0x37e>
800058aa:	31 b8       	mov	r8,27
800058ac:	ef 68 ff bb 	st.b	r7[-69],r8
800058b0:	30 88       	mov	r8,8
800058b2:	ef 68 ff ba 	st.b	r7[-70],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
800058b6:	fc 19 c0 00 	movh	r9,0xc000
800058ba:	ef 38 ff bb 	ld.ub	r8,r7[-69]
800058be:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
800058c0:	fc 19 c0 20 	movh	r9,0xc020
800058c4:	ef 38 ff ba 	ld.ub	r8,r7[-70]
800058c8:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_VCOMCTRL1, (1 << HIMAX_VCOMG) );

  cpu_delay_ms( 5, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_DK) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
800058ca:	fe f8 02 e2 	ld.w	r8,pc[738]
800058ce:	70 08       	ld.w	r8,r8[0x0]
800058d0:	32 89       	mov	r9,40
800058d2:	ef 49 ff c0 	st.w	r7[-64],r9
800058d6:	ef 48 ff bc 	st.w	r7[-68],r8
800058da:	ee f8 ff c0 	ld.w	r8,r7[-64]
800058de:	ef 48 ff c8 	st.w	r7[-56],r8
800058e2:	ee f8 ff bc 	ld.w	r8,r7[-68]
800058e6:	ef 48 ff c4 	st.w	r7[-60],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800058ea:	ee fb ff c8 	ld.w	r11,r7[-56]
800058ee:	ef 4b ff 00 	st.w	r7[-256],r11
800058f2:	30 0a       	mov	r10,0
800058f4:	ef 4a fe fc 	st.w	r7[-260],r10
800058f8:	ee f9 ff c4 	ld.w	r9,r7[-60]
800058fc:	ef 49 fe f8 	st.w	r7[-264],r9
80005900:	30 08       	mov	r8,0
80005902:	ef 48 fe f4 	st.w	r7[-268],r8
80005906:	ee fa fe fc 	ld.w	r10,r7[-260]
8000590a:	ee fc fe f8 	ld.w	r12,r7[-264]
8000590e:	b9 3a       	mul	r10,r12
80005910:	ee f8 fe f4 	ld.w	r8,r7[-268]
80005914:	ee fb ff 00 	ld.w	r11,r7[-256]
80005918:	b7 38       	mul	r8,r11
8000591a:	10 0a       	add	r10,r8
8000591c:	ee fc ff 00 	ld.w	r12,r7[-256]
80005920:	ee fb fe f8 	ld.w	r11,r7[-264]
80005924:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005928:	12 0a       	add	r10,r9
8000592a:	14 99       	mov	r9,r10
8000592c:	e0 6a 03 e7 	mov	r10,999
80005930:	30 0b       	mov	r11,0
80005932:	f0 0a 00 0a 	add	r10,r8,r10
80005936:	f2 0b 00 4b 	adc	r11,r9,r11
8000593a:	e0 68 03 e8 	mov	r8,1000
8000593e:	30 09       	mov	r9,0
80005940:	f0 1f 00 9c 	mcall	80005bb0 <et024006_PowerUp+0x730>
80005944:	14 98       	mov	r8,r10
80005946:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005948:	ef 48 ff d0 	st.w	r7[-48],r8
8000594c:	ee c8 00 c8 	sub	r8,r7,200
80005950:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005954:	e1 b8 00 42 	mfsr	r8,0x108
80005958:	10 99       	mov	r9,r8
8000595a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000595e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005960:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005964:	70 09       	ld.w	r9,r8[0x0]
80005966:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000596a:	10 09       	add	r9,r8
8000596c:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005970:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005972:	ee f9 ff cc 	ld.w	r9,r7[-52]
80005976:	30 08       	mov	r8,0
80005978:	f3 68 00 08 	st.b	r9[8],r8
8000597c:	ee c8 00 c8 	sub	r8,r7,200
80005980:	ef 48 ff d4 	st.w	r7[-44],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005984:	e1 b8 00 42 	mfsr	r8,0x108
80005988:	ef 48 ff d8 	st.w	r7[-40],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000598c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005990:	f1 39 00 08 	ld.ub	r9,r8[8]
80005994:	30 28       	mov	r8,2
80005996:	f0 09 18 00 	cp.b	r9,r8
8000599a:	c0 31       	brne	800059a0 <et024006_PowerUp+0x520>
    return false;
8000599c:	30 08       	mov	r8,0
8000599e:	c4 38       	rjmp	80005a24 <et024006_PowerUp+0x5a4>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800059a0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800059a4:	f1 39 00 08 	ld.ub	r9,r8[8]
800059a8:	30 18       	mov	r8,1
800059aa:	f0 09 18 00 	cp.b	r9,r8
800059ae:	c0 31       	brne	800059b4 <et024006_PowerUp+0x534>
    return true;
800059b0:	30 18       	mov	r8,1
800059b2:	c3 98       	rjmp	80005a24 <et024006_PowerUp+0x5a4>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800059b4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800059b8:	70 09       	ld.w	r9,r8[0x0]
800059ba:	ee f8 ff d4 	ld.w	r8,r7[-44]
800059be:	70 18       	ld.w	r8,r8[0x4]
800059c0:	10 39       	cp.w	r9,r8
800059c2:	e0 88 00 1a 	brls	800059f6 <et024006_PowerUp+0x576>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800059c6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800059ca:	70 08       	ld.w	r8,r8[0x0]
800059cc:	ee f9 ff d8 	ld.w	r9,r7[-40]
800059d0:	10 39       	cp.w	r9,r8
800059d2:	c1 02       	brcc	800059f2 <et024006_PowerUp+0x572>
800059d4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800059d8:	70 18       	ld.w	r8,r8[0x4]
800059da:	ee f9 ff d8 	ld.w	r9,r7[-40]
800059de:	10 39       	cp.w	r9,r8
800059e0:	e0 88 00 09 	brls	800059f2 <et024006_PowerUp+0x572>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800059e4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800059e8:	30 18       	mov	r8,1
800059ea:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800059ee:	30 18       	mov	r8,1
800059f0:	c1 a8       	rjmp	80005a24 <et024006_PowerUp+0x5a4>
    }
    return false;
800059f2:	30 08       	mov	r8,0
800059f4:	c1 88       	rjmp	80005a24 <et024006_PowerUp+0x5a4>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800059f6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800059fa:	70 08       	ld.w	r8,r8[0x0]
800059fc:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005a00:	10 39       	cp.w	r9,r8
80005a02:	c0 93       	brcs	80005a14 <et024006_PowerUp+0x594>
80005a04:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005a08:	70 18       	ld.w	r8,r8[0x4]
80005a0a:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005a0e:	10 39       	cp.w	r9,r8
80005a10:	e0 88 00 09 	brls	80005a22 <et024006_PowerUp+0x5a2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005a14:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005a18:	30 18       	mov	r8,1
80005a1a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005a1e:	30 18       	mov	r8,1
80005a20:	c0 28       	rjmp	80005a24 <et024006_PowerUp+0x5a4>
    }
    return false;
80005a22:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005a24:	58 08       	cp.w	r8,0
80005a26:	ca b0       	breq	8000597c <et024006_PowerUp+0x4fc>
80005a28:	31 b8       	mov	r8,27
80005a2a:	ef 68 ff df 	st.b	r7[-33],r8
80005a2e:	31 08       	mov	r8,16
80005a30:	ef 68 ff de 	st.b	r7[-34],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005a34:	fc 19 c0 00 	movh	r9,0xc000
80005a38:	ef 38 ff df 	ld.ub	r8,r7[-33]
80005a3c:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005a3e:	fc 19 c0 20 	movh	r9,0xc020
80005a42:	ef 38 ff de 	ld.ub	r8,r7[-34]
80005a46:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_POWERCTRL1, (1 << HIMAX_PON) );

  // In case the et024006_DisplayOn function is called right after
  cpu_delay_ms( 40, tft_data.cpu_hz );
80005a48:	4d 98       	lddpc	r8,80005bac <et024006_PowerUp+0x72c>
80005a4a:	70 08       	ld.w	r8,r8[0x0]
80005a4c:	32 89       	mov	r9,40
80005a4e:	ef 49 ff e4 	st.w	r7[-28],r9
80005a52:	ef 48 ff e0 	st.w	r7[-32],r8
80005a56:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005a5a:	ef 48 ff ec 	st.w	r7[-20],r8
80005a5e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005a62:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005a66:	ee fa ff ec 	ld.w	r10,r7[-20]
80005a6a:	ef 4a ff 10 	st.w	r7[-240],r10
80005a6e:	30 09       	mov	r9,0
80005a70:	ef 49 ff 0c 	st.w	r7[-244],r9
80005a74:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005a78:	ef 48 ff 08 	st.w	r7[-248],r8
80005a7c:	30 0c       	mov	r12,0
80005a7e:	ef 4c ff 04 	st.w	r7[-252],r12
80005a82:	ee fa ff 0c 	ld.w	r10,r7[-244]
80005a86:	ee fb ff 08 	ld.w	r11,r7[-248]
80005a8a:	b7 3a       	mul	r10,r11
80005a8c:	ee f8 ff 04 	ld.w	r8,r7[-252]
80005a90:	ee f9 ff 10 	ld.w	r9,r7[-240]
80005a94:	b3 38       	mul	r8,r9
80005a96:	10 0a       	add	r10,r8
80005a98:	ee fc ff 10 	ld.w	r12,r7[-240]
80005a9c:	ee fb ff 08 	ld.w	r11,r7[-248]
80005aa0:	f8 0b 06 48 	mulu.d	r8,r12,r11
80005aa4:	12 0a       	add	r10,r9
80005aa6:	14 99       	mov	r9,r10
80005aa8:	e0 6a 03 e7 	mov	r10,999
80005aac:	30 0b       	mov	r11,0
80005aae:	f0 0a 00 0a 	add	r10,r8,r10
80005ab2:	f2 0b 00 4b 	adc	r11,r9,r11
80005ab6:	e0 68 03 e8 	mov	r8,1000
80005aba:	30 09       	mov	r9,0
80005abc:	f0 1f 00 3d 	mcall	80005bb0 <et024006_PowerUp+0x730>
80005ac0:	14 98       	mov	r8,r10
80005ac2:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005ac4:	ef 48 ff f4 	st.w	r7[-12],r8
80005ac8:	ee c8 00 bc 	sub	r8,r7,188
80005acc:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005ad0:	e1 b8 00 42 	mfsr	r8,0x108
80005ad4:	10 99       	mov	r9,r8
80005ad6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005ada:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005adc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005ae0:	70 09       	ld.w	r9,r8[0x0]
80005ae2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005ae6:	10 09       	add	r9,r8
80005ae8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005aec:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005aee:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005af2:	30 08       	mov	r8,0
80005af4:	f3 68 00 08 	st.b	r9[8],r8
80005af8:	ee c8 00 bc 	sub	r8,r7,188
80005afc:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005b00:	e1 b8 00 42 	mfsr	r8,0x108
80005b04:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005b08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b0c:	f1 39 00 08 	ld.ub	r9,r8[8]
80005b10:	30 28       	mov	r8,2
80005b12:	f0 09 18 00 	cp.b	r9,r8
80005b16:	c0 31       	brne	80005b1c <et024006_PowerUp+0x69c>
    return false;
80005b18:	30 08       	mov	r8,0
80005b1a:	c4 38       	rjmp	80005ba0 <et024006_PowerUp+0x720>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005b1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b20:	f1 39 00 08 	ld.ub	r9,r8[8]
80005b24:	30 18       	mov	r8,1
80005b26:	f0 09 18 00 	cp.b	r9,r8
80005b2a:	c0 31       	brne	80005b30 <et024006_PowerUp+0x6b0>
    return true;
80005b2c:	30 18       	mov	r8,1
80005b2e:	c3 98       	rjmp	80005ba0 <et024006_PowerUp+0x720>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005b30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b34:	70 09       	ld.w	r9,r8[0x0]
80005b36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b3a:	70 18       	ld.w	r8,r8[0x4]
80005b3c:	10 39       	cp.w	r9,r8
80005b3e:	e0 88 00 1a 	brls	80005b72 <et024006_PowerUp+0x6f2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005b42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b46:	70 08       	ld.w	r8,r8[0x0]
80005b48:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b4c:	10 39       	cp.w	r9,r8
80005b4e:	c1 02       	brcc	80005b6e <et024006_PowerUp+0x6ee>
80005b50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b54:	70 18       	ld.w	r8,r8[0x4]
80005b56:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b5a:	10 39       	cp.w	r9,r8
80005b5c:	e0 88 00 09 	brls	80005b6e <et024006_PowerUp+0x6ee>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005b60:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b64:	30 18       	mov	r8,1
80005b66:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005b6a:	30 18       	mov	r8,1
80005b6c:	c1 a8       	rjmp	80005ba0 <et024006_PowerUp+0x720>
    }
    return false;
80005b6e:	30 08       	mov	r8,0
80005b70:	c1 88       	rjmp	80005ba0 <et024006_PowerUp+0x720>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005b72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b76:	70 08       	ld.w	r8,r8[0x0]
80005b78:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b7c:	10 39       	cp.w	r9,r8
80005b7e:	c0 93       	brcs	80005b90 <et024006_PowerUp+0x710>
80005b80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b84:	70 18       	ld.w	r8,r8[0x4]
80005b86:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b8a:	10 39       	cp.w	r9,r8
80005b8c:	e0 88 00 09 	brls	80005b9e <et024006_PowerUp+0x71e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005b90:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b94:	30 18       	mov	r8,1
80005b96:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005b9a:	30 18       	mov	r8,1
80005b9c:	c0 28       	rjmp	80005ba0 <et024006_PowerUp+0x720>
    }
    return false;
80005b9e:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005ba0:	58 08       	cp.w	r8,0
80005ba2:	ca b0       	breq	80005af8 <et024006_PowerUp+0x678>
}
80005ba4:	2b 7d       	sub	sp,-292
80005ba6:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005baa:	00 00       	add	r0,r0
80005bac:	00 00       	add	r0,r0
80005bae:	06 0c       	add	r12,r3
80005bb0:	80 00       	ld.sh	r0,r0[0x0]
80005bb2:	e5 4c eb cd 	st.w	r2[-5171],r12

80005bb4 <et024006_PowerOn>:


/*! \brief Turns the display on.
 */
static void et024006_PowerOn( void )
{
80005bb4:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80005bb8:	1a 97       	mov	r7,sp
80005bba:	21 9d       	sub	sp,100
80005bbc:	32 6c       	mov	r12,38
80005bbe:	ef 6c ff b7 	st.b	r7[-73],r12
80005bc2:	30 4c       	mov	r12,4
80005bc4:	ef 6c ff b6 	st.b	r7[-74],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005bc8:	fc 1e c0 00 	movh	lr,0xc000
80005bcc:	ef 3c ff b7 	ld.ub	r12,r7[-73]
80005bd0:	bc 0c       	st.h	lr[0x0],r12
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005bd2:	fc 1e c0 20 	movh	lr,0xc020
80005bd6:	ef 3c ff b6 	ld.ub	r12,r7[-74]
80005bda:	bc 0c       	st.h	lr[0x0],r12
 */
static void et024006_PowerOn( void )
{
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_D0) );

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005bdc:	fe fc 02 e0 	ld.w	r12,pc[736]
80005be0:	78 0c       	ld.w	r12,r12[0x0]
80005be2:	32 8e       	mov	lr,40
80005be4:	ef 4e ff bc 	st.w	r7[-68],lr
80005be8:	ef 4c ff b8 	st.w	r7[-72],r12
80005bec:	ee fc ff bc 	ld.w	r12,r7[-68]
80005bf0:	ef 4c ff c4 	st.w	r7[-60],r12
80005bf4:	ee fc ff b8 	ld.w	r12,r7[-72]
80005bf8:	ef 4c ff c0 	st.w	r7[-64],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005bfc:	ee fa ff c4 	ld.w	r10,r7[-60]
80005c00:	30 0b       	mov	r11,0
80005c02:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005c06:	30 09       	mov	r9,0
80005c08:	f6 08 02 4c 	mul	r12,r11,r8
80005c0c:	f2 0a 02 4e 	mul	lr,r9,r10
80005c10:	1c 0c       	add	r12,lr
80005c12:	f4 08 06 48 	mulu.d	r8,r10,r8
80005c16:	12 0c       	add	r12,r9
80005c18:	18 99       	mov	r9,r12
80005c1a:	e0 6a 03 e7 	mov	r10,999
80005c1e:	30 0b       	mov	r11,0
80005c20:	f0 0a 00 0a 	add	r10,r8,r10
80005c24:	f2 0b 00 4b 	adc	r11,r9,r11
80005c28:	e0 68 03 e8 	mov	r8,1000
80005c2c:	30 09       	mov	r9,0
80005c2e:	f0 1f 00 a5 	mcall	80005ec0 <et024006_PowerOn+0x30c>
80005c32:	14 98       	mov	r8,r10
80005c34:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005c36:	ef 48 ff cc 	st.w	r7[-52],r8
80005c3a:	ee c8 00 64 	sub	r8,r7,100
80005c3e:	ef 48 ff c8 	st.w	r7[-56],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005c42:	e1 b8 00 42 	mfsr	r8,0x108
80005c46:	10 99       	mov	r9,r8
80005c48:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005c4c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005c4e:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005c52:	70 09       	ld.w	r9,r8[0x0]
80005c54:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005c58:	10 09       	add	r9,r8
80005c5a:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005c5e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005c60:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005c64:	30 08       	mov	r8,0
80005c66:	f3 68 00 08 	st.b	r9[8],r8
80005c6a:	ee c8 00 64 	sub	r8,r7,100
80005c6e:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005c72:	e1 b8 00 42 	mfsr	r8,0x108
80005c76:	ef 48 ff d4 	st.w	r7[-44],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005c7a:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c7e:	f1 39 00 08 	ld.ub	r9,r8[8]
80005c82:	30 28       	mov	r8,2
80005c84:	f0 09 18 00 	cp.b	r9,r8
80005c88:	c0 31       	brne	80005c8e <et024006_PowerOn+0xda>
    return false;
80005c8a:	30 08       	mov	r8,0
80005c8c:	c4 38       	rjmp	80005d12 <et024006_PowerOn+0x15e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005c8e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005c92:	f1 39 00 08 	ld.ub	r9,r8[8]
80005c96:	30 18       	mov	r8,1
80005c98:	f0 09 18 00 	cp.b	r9,r8
80005c9c:	c0 31       	brne	80005ca2 <et024006_PowerOn+0xee>
    return true;
80005c9e:	30 18       	mov	r8,1
80005ca0:	c3 98       	rjmp	80005d12 <et024006_PowerOn+0x15e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005ca2:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005ca6:	70 09       	ld.w	r9,r8[0x0]
80005ca8:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005cac:	70 18       	ld.w	r8,r8[0x4]
80005cae:	10 39       	cp.w	r9,r8
80005cb0:	e0 88 00 1a 	brls	80005ce4 <et024006_PowerOn+0x130>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005cb4:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005cb8:	70 08       	ld.w	r8,r8[0x0]
80005cba:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005cbe:	10 39       	cp.w	r9,r8
80005cc0:	c1 02       	brcc	80005ce0 <et024006_PowerOn+0x12c>
80005cc2:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005cc6:	70 18       	ld.w	r8,r8[0x4]
80005cc8:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005ccc:	10 39       	cp.w	r9,r8
80005cce:	e0 88 00 09 	brls	80005ce0 <et024006_PowerOn+0x12c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005cd2:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005cd6:	30 18       	mov	r8,1
80005cd8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005cdc:	30 18       	mov	r8,1
80005cde:	c1 a8       	rjmp	80005d12 <et024006_PowerOn+0x15e>
    }
    return false;
80005ce0:	30 08       	mov	r8,0
80005ce2:	c1 88       	rjmp	80005d12 <et024006_PowerOn+0x15e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005ce4:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005ce8:	70 08       	ld.w	r8,r8[0x0]
80005cea:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005cee:	10 39       	cp.w	r9,r8
80005cf0:	c0 93       	brcs	80005d02 <et024006_PowerOn+0x14e>
80005cf2:	ee f8 ff d0 	ld.w	r8,r7[-48]
80005cf6:	70 18       	ld.w	r8,r8[0x4]
80005cf8:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005cfc:	10 39       	cp.w	r9,r8
80005cfe:	e0 88 00 09 	brls	80005d10 <et024006_PowerOn+0x15c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005d02:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005d06:	30 18       	mov	r8,1
80005d08:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005d0c:	30 18       	mov	r8,1
80005d0e:	c0 28       	rjmp	80005d12 <et024006_PowerOn+0x15e>
    }
    return false;
80005d10:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005d12:	58 08       	cp.w	r8,0
80005d14:	ca b0       	breq	80005c6a <et024006_PowerOn+0xb6>
80005d16:	32 68       	mov	r8,38
80005d18:	ef 68 ff d9 	st.b	r7[-39],r8
80005d1c:	32 48       	mov	r8,36
80005d1e:	ef 68 ff d8 	st.b	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005d22:	fc 19 c0 00 	movh	r9,0xc000
80005d26:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80005d2a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005d2c:	fc 19 c0 20 	movh	r9,0xc020
80005d30:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80005d34:	b2 08       	st.h	r9[0x0],r8
80005d36:	32 68       	mov	r8,38
80005d38:	ef 68 ff db 	st.b	r7[-37],r8
80005d3c:	32 c8       	mov	r8,44
80005d3e:	ef 68 ff da 	st.b	r7[-38],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005d42:	fc 19 c0 00 	movh	r9,0xc000
80005d46:	ef 38 ff db 	ld.ub	r8,r7[-37]
80005d4a:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005d4c:	fc 19 c0 20 	movh	r9,0xc020
80005d50:	ef 38 ff da 	ld.ub	r8,r7[-38]
80005d54:	b2 08       	st.h	r9[0x0],r8
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D0) );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  cpu_delay_ms( 40, tft_data.cpu_hz );
80005d56:	4d a8       	lddpc	r8,80005ebc <et024006_PowerOn+0x308>
80005d58:	70 08       	ld.w	r8,r8[0x0]
80005d5a:	32 89       	mov	r9,40
80005d5c:	ef 49 ff e0 	st.w	r7[-32],r9
80005d60:	ef 48 ff dc 	st.w	r7[-36],r8
80005d64:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d68:	ef 48 ff e8 	st.w	r7[-24],r8
80005d6c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005d70:	ef 48 ff e4 	st.w	r7[-28],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80005d74:	ee f0 ff e8 	ld.w	r0,r7[-24]
80005d78:	30 01       	mov	r1,0
80005d7a:	ee f2 ff e4 	ld.w	r2,r7[-28]
80005d7e:	30 03       	mov	r3,0
80005d80:	e2 02 02 4a 	mul	r10,r1,r2
80005d84:	e6 00 02 48 	mul	r8,r3,r0
80005d88:	10 0a       	add	r10,r8
80005d8a:	e0 02 06 48 	mulu.d	r8,r0,r2
80005d8e:	12 0a       	add	r10,r9
80005d90:	14 99       	mov	r9,r10
80005d92:	e0 6a 03 e7 	mov	r10,999
80005d96:	30 0b       	mov	r11,0
80005d98:	f0 0a 00 0a 	add	r10,r8,r10
80005d9c:	f2 0b 00 4b 	adc	r11,r9,r11
80005da0:	e0 68 03 e8 	mov	r8,1000
80005da4:	30 09       	mov	r9,0
80005da6:	f0 1f 00 47 	mcall	80005ec0 <et024006_PowerOn+0x30c>
80005daa:	14 98       	mov	r8,r10
80005dac:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80005dae:	ef 48 ff f0 	st.w	r7[-16],r8
80005db2:	ee c8 00 58 	sub	r8,r7,88
80005db6:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80005dba:	e1 b8 00 42 	mfsr	r8,0x108
80005dbe:	10 99       	mov	r9,r8
80005dc0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005dc4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80005dc6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005dca:	70 09       	ld.w	r9,r8[0x0]
80005dcc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005dd0:	10 09       	add	r9,r8
80005dd2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005dd6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80005dd8:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005ddc:	30 08       	mov	r8,0
80005dde:	f3 68 00 08 	st.b	r9[8],r8
80005de2:	ee c8 00 58 	sub	r8,r7,88
80005de6:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80005dea:	e1 b8 00 42 	mfsr	r8,0x108
80005dee:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80005df2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005df6:	f1 39 00 08 	ld.ub	r9,r8[8]
80005dfa:	30 28       	mov	r8,2
80005dfc:	f0 09 18 00 	cp.b	r9,r8
80005e00:	c0 31       	brne	80005e06 <et024006_PowerOn+0x252>
    return false;
80005e02:	30 08       	mov	r8,0
80005e04:	c4 38       	rjmp	80005e8a <et024006_PowerOn+0x2d6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80005e06:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e0a:	f1 39 00 08 	ld.ub	r9,r8[8]
80005e0e:	30 18       	mov	r8,1
80005e10:	f0 09 18 00 	cp.b	r9,r8
80005e14:	c0 31       	brne	80005e1a <et024006_PowerOn+0x266>
    return true;
80005e16:	30 18       	mov	r8,1
80005e18:	c3 98       	rjmp	80005e8a <et024006_PowerOn+0x2d6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80005e1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e1e:	70 09       	ld.w	r9,r8[0x0]
80005e20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e24:	70 18       	ld.w	r8,r8[0x4]
80005e26:	10 39       	cp.w	r9,r8
80005e28:	e0 88 00 1a 	brls	80005e5c <et024006_PowerOn+0x2a8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80005e2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e30:	70 08       	ld.w	r8,r8[0x0]
80005e32:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e36:	10 39       	cp.w	r9,r8
80005e38:	c1 02       	brcc	80005e58 <et024006_PowerOn+0x2a4>
80005e3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e3e:	70 18       	ld.w	r8,r8[0x4]
80005e40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e44:	10 39       	cp.w	r9,r8
80005e46:	e0 88 00 09 	brls	80005e58 <et024006_PowerOn+0x2a4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005e4a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005e4e:	30 18       	mov	r8,1
80005e50:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005e54:	30 18       	mov	r8,1
80005e56:	c1 a8       	rjmp	80005e8a <et024006_PowerOn+0x2d6>
    }
    return false;
80005e58:	30 08       	mov	r8,0
80005e5a:	c1 88       	rjmp	80005e8a <et024006_PowerOn+0x2d6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80005e5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e60:	70 08       	ld.w	r8,r8[0x0]
80005e62:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e66:	10 39       	cp.w	r9,r8
80005e68:	c0 93       	brcs	80005e7a <et024006_PowerOn+0x2c6>
80005e6a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005e6e:	70 18       	ld.w	r8,r8[0x4]
80005e70:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005e74:	10 39       	cp.w	r9,r8
80005e76:	e0 88 00 09 	brls	80005e88 <et024006_PowerOn+0x2d4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80005e7a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005e7e:	30 18       	mov	r8,1
80005e80:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80005e84:	30 18       	mov	r8,1
80005e86:	c0 28       	rjmp	80005e8a <et024006_PowerOn+0x2d6>
    }
    return false;
80005e88:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80005e8a:	58 08       	cp.w	r8,0
80005e8c:	ca b0       	breq	80005de2 <et024006_PowerOn+0x22e>
80005e8e:	32 68       	mov	r8,38
80005e90:	ef 68 ff ff 	st.b	r7[-1],r8
80005e94:	33 c8       	mov	r8,60
80005e96:	ef 68 ff fe 	st.b	r7[-2],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ void et024006_WriteRegister( uint8_t address, uint8_t value )
{
  *ET024006_CMD_ADDR = (uint16_t) address;
80005e9a:	fc 19 c0 00 	movh	r9,0xc000
80005e9e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005ea2:	b2 08       	st.h	r9[0x0],r8
  *ET024006_PARAM_ADDR = (uint16_t) value;
80005ea4:	fc 19 c0 20 	movh	r9,0xc020
80005ea8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80005eac:	b2 08       	st.h	r9[0x0],r8

  cpu_delay_ms( 40, tft_data.cpu_hz );
  et024006_WriteRegister( HIMAX_DISPCTRL1, (1 << HIMAX_GON)| (1 << HIMAX_DTE) |
  	(1 << HIMAX_D1) | (1 << HIMAX_D0));

  et024006_SetRegister( HIMAX_INTERNAL28, (1 << HIMAX_TEON) );
80005eae:	30 8b       	mov	r11,8
80005eb0:	37 0c       	mov	r12,112
80005eb2:	f0 1f 00 05 	mcall	80005ec4 <et024006_PowerOn+0x310>
}
80005eb6:	2e 7d       	sub	sp,-100
80005eb8:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80005ebc:	00 00       	add	r0,r0
80005ebe:	06 0c       	add	r12,r3
80005ec0:	80 00       	ld.sh	r0,r0[0x0]
80005ec2:	e5 4c 80 00 	st.w	r2[-32768],r12
80005ec6:	48 c8       	lddpc	r8,80005ef4 <is_sd_mmc_mci_card_present>
80005ec8:	20 44       	sub	r4,4
80005eca:	65 63       	ld.w	r3,r2[0x58]
80005ecc:	69 70       	ld.w	r0,r4[0x5c]
80005ece:	68 65       	ld.w	r5,r4[0x18]
80005ed0:	72 65       	ld.w	r5,r9[0x18]
80005ed2:	64 20       	ld.w	r0,r2[0x8]
80005ed4:	00 00       	add	r0,r0
80005ed6:	00 00       	add	r0,r0
80005ed8:	20 73       	sub	r3,7
80005eda:	65 63       	ld.w	r3,r2[0x58]
80005edc:	74 6f       	ld.w	pc,r10[0x18]
80005ede:	72 73       	ld.w	r3,r9[0x1c]
80005ee0:	00 00       	add	r0,r0
80005ee2:	00 00       	add	r0,r0
80005ee4:	20 45       	sub	r5,4
80005ee6:	6e 63       	ld.w	r3,r7[0x18]
80005ee8:	69 70       	ld.w	r0,r4[0x5c]
80005eea:	68 65       	ld.w	r5,r4[0x18]
80005eec:	72 65       	ld.w	r5,r9[0x18]
80005eee:	64 20       	ld.w	r0,r2[0x8]
80005ef0:	00 00       	add	r0,r0
	...

80005ef4 <is_sd_mmc_mci_card_present>:


//_____ D E F I N I T I O N S ______________________________________________

bool is_sd_mmc_mci_card_present(uint8_t slot)
{
80005ef4:	eb cd 40 80 	pushm	r7,lr
80005ef8:	1a 97       	mov	r7,sp
80005efa:	20 1d       	sub	sp,4
80005efc:	18 98       	mov	r8,r12
80005efe:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80005f02:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80005f06:	30 18       	mov	r8,1
80005f08:	f0 09 18 00 	cp.b	r9,r8
80005f0c:	e0 88 00 04 	brls	80005f14 <is_sd_mmc_mci_card_present+0x20>
    return false;
80005f10:	30 08       	mov	r8,0
80005f12:	c1 88       	rjmp	80005f42 <is_sd_mmc_mci_card_present+0x4e>

  switch(slot)
80005f14:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005f18:	58 08       	cp.w	r8,0
80005f1a:	c0 b0       	breq	80005f30 <is_sd_mmc_mci_card_present+0x3c>
80005f1c:	58 18       	cp.w	r8,1
80005f1e:	c1 11       	brne	80005f40 <is_sd_mmc_mci_card_present+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_CARD_DETECT)==SD_SLOT_4BITS_CARD_DETECT_VALUE);
80005f20:	32 8c       	mov	r12,40
80005f22:	f0 1f 00 0b 	mcall	80005f4c <is_sd_mmc_mci_card_present+0x58>
80005f26:	18 98       	mov	r8,r12
80005f28:	58 08       	cp.w	r8,0
80005f2a:	5f 08       	sreq	r8
80005f2c:	5c 58       	castu.b	r8
80005f2e:	c0 a8       	rjmp	80005f42 <is_sd_mmc_mci_card_present+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_CARD_DETECT)==SD_SLOT_8BITS_CARD_DETECT_VALUE);
80005f30:	32 bc       	mov	r12,43
80005f32:	f0 1f 00 07 	mcall	80005f4c <is_sd_mmc_mci_card_present+0x58>
80005f36:	18 98       	mov	r8,r12
80005f38:	58 08       	cp.w	r8,0
80005f3a:	5f 08       	sreq	r8
80005f3c:	5c 58       	castu.b	r8
80005f3e:	c0 28       	rjmp	80005f42 <is_sd_mmc_mci_card_present+0x4e>
  }

  return false;
80005f40:	30 08       	mov	r8,0
}
80005f42:	10 9c       	mov	r12,r8
80005f44:	2f fd       	sub	sp,-4
80005f46:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f4a:	00 00       	add	r0,r0
80005f4c:	80 00       	ld.sh	r0,r0[0x0]
80005f4e:	8d 90       	st.w	r6[0x24],r0

80005f50 <is_sd_mmc_mci_card_protected>:

bool is_sd_mmc_mci_card_protected(uint8_t slot)
{
80005f50:	eb cd 40 80 	pushm	r7,lr
80005f54:	1a 97       	mov	r7,sp
80005f56:	20 1d       	sub	sp,4
80005f58:	18 98       	mov	r8,r12
80005f5a:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80005f5e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80005f62:	30 18       	mov	r8,1
80005f64:	f0 09 18 00 	cp.b	r9,r8
80005f68:	e0 88 00 04 	brls	80005f70 <is_sd_mmc_mci_card_protected+0x20>
    return false;
80005f6c:	30 08       	mov	r8,0
80005f6e:	c1 88       	rjmp	80005f9e <is_sd_mmc_mci_card_protected+0x4e>

  switch(slot)
80005f70:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005f74:	58 08       	cp.w	r8,0
80005f76:	c0 b0       	breq	80005f8c <is_sd_mmc_mci_card_protected+0x3c>
80005f78:	58 18       	cp.w	r8,1
80005f7a:	c1 11       	brne	80005f9c <is_sd_mmc_mci_card_protected+0x4c>
  {
    case MCI_SLOT_B:
        return (gpio_get_pin_value(SD_SLOT_4BITS_WRITE_PROTECT)==SD_SLOT_4BITS_WRITE_PROTECT_VALUE);
80005f7c:	32 6c       	mov	r12,38
80005f7e:	f0 1f 00 0b 	mcall	80005fa8 <is_sd_mmc_mci_card_protected+0x58>
80005f82:	18 98       	mov	r8,r12
80005f84:	58 18       	cp.w	r8,1
80005f86:	5f 08       	sreq	r8
80005f88:	5c 58       	castu.b	r8
80005f8a:	c0 a8       	rjmp	80005f9e <is_sd_mmc_mci_card_protected+0x4e>
    case MCI_SLOT_A:
        return (gpio_get_pin_value(SD_SLOT_8BITS_WRITE_PROTECT)==SD_SLOT_8BITS_WRITE_PROTECT_VALUE);
80005f8c:	36 cc       	mov	r12,108
80005f8e:	f0 1f 00 07 	mcall	80005fa8 <is_sd_mmc_mci_card_protected+0x58>
80005f92:	18 98       	mov	r8,r12
80005f94:	58 18       	cp.w	r8,1
80005f96:	5f 08       	sreq	r8
80005f98:	5c 58       	castu.b	r8
80005f9a:	c0 28       	rjmp	80005f9e <is_sd_mmc_mci_card_protected+0x4e>
  }

  return false;
80005f9c:	30 08       	mov	r8,0
}
80005f9e:	10 9c       	mov	r12,r8
80005fa0:	2f fd       	sub	sp,-4
80005fa2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005fa6:	00 00       	add	r0,r0
80005fa8:	80 00       	ld.sh	r0,r0[0x0]
80005faa:	8d 90       	st.w	r6[0x24],r0

80005fac <sd_mmc_mci_get_csd>:

static bool  sd_mmc_mci_get_csd(uint8_t slot)
{
80005fac:	eb cd 40 80 	pushm	r7,lr
80005fb0:	1a 97       	mov	r7,sp
80005fb2:	20 fd       	sub	sp,60
80005fb4:	18 98       	mov	r8,r12
80005fb6:	ef 68 ff c4 	st.b	r7[-60],r8

  uint32_t max_Read_DataBlock_Length;
  uint32_t mult;
  uint32_t blocknr;
  uint8_t tmp;
  const uint16_t freq_unit[4] = {10, 100, 1000, 10000};
80005fba:	fe f9 02 b2 	ld.w	r9,pc[690]
80005fbe:	ee c8 00 28 	sub	r8,r7,40
80005fc2:	30 8a       	mov	r10,8
80005fc4:	12 9b       	mov	r11,r9
80005fc6:	10 9c       	mov	r12,r8
80005fc8:	f0 1f 00 aa 	mcall	80006270 <sd_mmc_mci_get_csd+0x2c4>
  const uint8_t mult_fact[16] = {0, 10, 12, 13, 15, 20, 26, 30, 35, 40, 45, 52, 55, 60, 70, 80}; // MMC tabs...
80005fcc:	fe f8 02 a8 	ld.w	r8,pc[680]
80005fd0:	ee ca 00 38 	sub	r10,r7,56
80005fd4:	10 9b       	mov	r11,r8
80005fd6:	f6 e8 00 00 	ld.d	r8,r11[0]
80005fda:	f4 e9 00 00 	st.d	r10[0],r8
80005fde:	f6 e8 00 08 	ld.d	r8,r11[8]
80005fe2:	f4 e9 00 08 	st.d	r10[8],r8

  if (slot > MCI_LAST_SLOTS)
80005fe6:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80005fea:	30 18       	mov	r8,1
80005fec:	f0 09 18 00 	cp.b	r9,r8
80005ff0:	e0 88 00 04 	brls	80005ff8 <sd_mmc_mci_get_csd+0x4c>
    return false;
80005ff4:	30 08       	mov	r8,0
80005ff6:	c3 69       	rjmp	80006262 <sd_mmc_mci_get_csd+0x2b6>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80005ff8:	ef 38 ff c4 	ld.ub	r8,r7[-60]
80005ffc:	fe f9 02 7c 	ld.w	r9,pc[636]
80006000:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006004:	10 9a       	mov	r10,r8
80006006:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000600a:	fe f8 02 72 	ld.w	r8,pc[626]
8000600e:	70 08       	ld.w	r8,r8[0x0]
80006010:	12 9b       	mov	r11,r9
80006012:	10 9c       	mov	r12,r8
80006014:	f0 1f 00 9b 	mcall	80006280 <sd_mmc_mci_get_csd+0x2d4>

  //-- (CMD9)
  if (mci_send_cmd(mci, SD_MMC_SEND_CSD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006018:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000601c:	fe f8 02 68 	ld.w	r8,pc[616]
80006020:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006024:	fe f8 02 58 	ld.w	r8,pc[600]
80006028:	70 08       	ld.w	r8,r8[0x0]
8000602a:	12 9a       	mov	r10,r9
8000602c:	e0 6b 10 89 	mov	r11,4233
80006030:	10 9c       	mov	r12,r8
80006032:	f0 1f 00 96 	mcall	80006288 <sd_mmc_mci_get_csd+0x2dc>
80006036:	18 98       	mov	r8,r12
80006038:	58 08       	cp.w	r8,0
8000603a:	c0 30       	breq	80006040 <sd_mmc_mci_get_csd+0x94>
    return false;
8000603c:	30 08       	mov	r8,0
8000603e:	c1 29       	rjmp	80006262 <sd_mmc_mci_get_csd+0x2b6>


  csd.csd[0] = mci_read_response(mci);
80006040:	fe f8 02 3c 	ld.w	r8,pc[572]
80006044:	70 08       	ld.w	r8,r8[0x0]
80006046:	10 9c       	mov	r12,r8
80006048:	f0 1f 00 91 	mcall	8000628c <sd_mmc_mci_get_csd+0x2e0>
8000604c:	18 98       	mov	r8,r12
8000604e:	ef 48 ff e0 	st.w	r7[-32],r8
  csd.csd[1] = mci_read_response(mci);
80006052:	fe f8 02 2a 	ld.w	r8,pc[554]
80006056:	70 08       	ld.w	r8,r8[0x0]
80006058:	10 9c       	mov	r12,r8
8000605a:	f0 1f 00 8d 	mcall	8000628c <sd_mmc_mci_get_csd+0x2e0>
8000605e:	18 98       	mov	r8,r12
80006060:	ef 48 ff e4 	st.w	r7[-28],r8
  csd.csd[2] = mci_read_response(mci);
80006064:	fe f8 02 18 	ld.w	r8,pc[536]
80006068:	70 08       	ld.w	r8,r8[0x0]
8000606a:	10 9c       	mov	r12,r8
8000606c:	f0 1f 00 88 	mcall	8000628c <sd_mmc_mci_get_csd+0x2e0>
80006070:	18 98       	mov	r8,r12
80006072:	ef 48 ff e8 	st.w	r7[-24],r8
  csd.csd[3] = mci_read_response(mci);
80006076:	fe f8 02 06 	ld.w	r8,pc[518]
8000607a:	70 08       	ld.w	r8,r8[0x0]
8000607c:	10 9c       	mov	r12,r8
8000607e:	f0 1f 00 84 	mcall	8000628c <sd_mmc_mci_get_csd+0x2e0>
80006082:	18 98       	mov	r8,r12
80006084:	ef 48 ff ec 	st.w	r7[-20],r8

  //-- Read "System specification version", only available on MMC card
  // field: SPEC_VERS (only on MMC)
  if (MMC_CARD & g_card_type[slot]) // TO BE ADDED
80006088:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8000608c:	fe f9 02 04 	ld.w	r9,pc[516]
80006090:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006094:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006098:	5c 58       	castu.b	r8
8000609a:	c1 40       	breq	800060c2 <sd_mmc_mci_get_csd+0x116>
  {
    if (CSD_SPEC_VER_4_0 == (MSB0(csd.csd[0]) & CSD_MSK_SPEC_VER))
8000609c:	ee c8 00 20 	sub	r8,r7,32
800060a0:	11 88       	ld.ub	r8,r8[0x0]
800060a2:	e2 18 00 3c 	andl	r8,0x3c,COH
800060a6:	59 08       	cp.w	r8,16
800060a8:	c0 d1       	brne	800060c2 <sd_mmc_mci_get_csd+0x116>
    {
      g_card_type[slot] |= MMC_CARD_V4;
800060aa:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800060ae:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800060b2:	4f 8a       	lddpc	r10,80006290 <sd_mmc_mci_get_csd+0x2e4>
800060b4:	f4 08 07 08 	ld.ub	r8,r10[r8]
800060b8:	a3 a8       	sbr	r8,0x2
800060ba:	5c 58       	castu.b	r8
800060bc:	4f 5a       	lddpc	r10,80006290 <sd_mmc_mci_get_csd+0x2e4>
800060be:	f4 09 0b 08 	st.b	r10[r9],r8
    }
  }

  //-- Compute MMC/SD speed
  // field: TRAN_SPEED (CSD V1 & V2 are the same)
  g_card_freq[slot]  = mult_fact[csd.csd_v1.tranSpeed >> 3]; // Get Multiplier factor
800060c2:	ef 3a ff c4 	ld.ub	r10,r7[-60]
800060c6:	ef 38 ff e3 	ld.ub	r8,r7[-29]
800060ca:	a3 98       	lsr	r8,0x3
800060cc:	5c 58       	castu.b	r8
800060ce:	ee 08 00 08 	add	r8,r7,r8
800060d2:	f1 38 ff c8 	ld.ub	r8,r8[-56]
800060d6:	4f 09       	lddpc	r9,80006294 <sd_mmc_mci_get_csd+0x2e8>
800060d8:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  if (SD_CARD & g_card_type[slot])
800060dc:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800060e0:	4e c9       	lddpc	r9,80006290 <sd_mmc_mci_get_csd+0x2e4>
800060e2:	f2 08 07 08 	ld.ub	r8,r9[r8]
800060e6:	e2 18 00 02 	andl	r8,0x2,COH
800060ea:	c2 00       	breq	8000612a <sd_mmc_mci_get_csd+0x17e>
  {
    // SD card don't have same frequency that MMC card
    if( 26 == g_card_freq[slot] )
800060ec:	ef 39 ff c4 	ld.ub	r9,r7[-60]
800060f0:	4e 98       	lddpc	r8,80006294 <sd_mmc_mci_get_csd+0x2e8>
800060f2:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
800060f6:	31 a8       	mov	r8,26
800060f8:	f0 09 19 00 	cp.h	r9,r8
800060fc:	c0 81       	brne	8000610c <sd_mmc_mci_get_csd+0x160>
    {
      g_card_freq[slot] = 25;
800060fe:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006102:	4e 59       	lddpc	r9,80006294 <sd_mmc_mci_get_csd+0x2e8>
80006104:	31 98       	mov	r8,25
80006106:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
8000610a:	c1 08       	rjmp	8000612a <sd_mmc_mci_get_csd+0x17e>
    }
    else if( 52 == g_card_freq[slot] )
8000610c:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006110:	4e 18       	lddpc	r8,80006294 <sd_mmc_mci_get_csd+0x2e8>
80006112:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80006116:	33 48       	mov	r8,52
80006118:	f0 09 19 00 	cp.h	r9,r8
8000611c:	c0 71       	brne	8000612a <sd_mmc_mci_get_csd+0x17e>
    {
      g_card_freq[slot] = 50;
8000611e:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006122:	4d d9       	lddpc	r9,80006294 <sd_mmc_mci_get_csd+0x2e8>
80006124:	33 28       	mov	r8,50
80006126:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
    }
  }
  g_card_freq[slot] *= freq_unit[ csd.csd_v1.tranSpeed&0x07 ]; // Get transfer rate unit
8000612a:	ef 3a ff c4 	ld.ub	r10,r7[-60]
8000612e:	ef 39 ff c4 	ld.ub	r9,r7[-60]
80006132:	4d 98       	lddpc	r8,80006294 <sd_mmc_mci_get_csd+0x2e8>
80006134:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
80006138:	ef 38 ff e3 	ld.ub	r8,r7[-29]
8000613c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80006140:	a1 78       	lsl	r8,0x1
80006142:	ee 08 00 08 	add	r8,r7,r8
80006146:	f1 08 ff d8 	ld.sh	r8,r8[-40]
8000614a:	f2 08 02 48 	mul	r8,r9,r8
8000614e:	5c 88       	casts.h	r8
80006150:	4d 19       	lddpc	r9,80006294 <sd_mmc_mci_get_csd+0x2e8>
80006152:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

  //-- Compute card size in number of block
  // field: WRITE_BL_LEN, READ_BL_LEN, C_SIZE (CSD V1 & V2 are not the same)
  if (SD_CARD_HC & g_card_type[slot])
80006156:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8000615a:	4c e9       	lddpc	r9,80006290 <sd_mmc_mci_get_csd+0x2e4>
8000615c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006160:	e2 18 00 10 	andl	r8,0x10,COH
80006164:	c2 10       	breq	800061a6 <sd_mmc_mci_get_csd+0x1fa>
  {
    g_card_size[slot] = (csd.csd_v2.deviceSizeH<<16)+(csd.csd_v2.deviceSizeL&0xFFff);
80006166:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000616a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000616e:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80006172:	5c 58       	castu.b	r8
80006174:	f0 0a 15 10 	lsl	r10,r8,0x10
80006178:	ef 08 ff e8 	ld.sh	r8,r7[-24]
8000617c:	5c 78       	castu.h	r8
8000617e:	f4 08 00 08 	add	r8,r10,r8
80006182:	10 9a       	mov	r10,r8
80006184:	4c 58       	lddpc	r8,80006298 <sd_mmc_mci_get_csd+0x2ec>
80006186:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

    // memory capacity = (C_SIZE+1) * 1K sector
    g_card_size[slot] = (g_card_size[slot] + 1) << 10;  // unit 512B
8000618a:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000618e:	ef 3a ff c4 	ld.ub	r10,r7[-60]
80006192:	4c 28       	lddpc	r8,80006298 <sd_mmc_mci_get_csd+0x2ec>
80006194:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80006198:	2f f8       	sub	r8,-1
8000619a:	f0 0a 15 0a 	lsl	r10,r8,0xa
8000619e:	4b f8       	lddpc	r8,80006298 <sd_mmc_mci_get_csd+0x2ec>
800061a0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800061a4:	c5 e8       	rjmp	80006260 <sd_mmc_mci_get_csd+0x2b4>
  }
  else
  {
    // Check block size
    tmp = csd.csd_v1.writeBlLen; // WRITE_BL_LEN
800061a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800061aa:	f1 d8 c2 c4 	bfextu	r8,r8,0x16,0x4
800061ae:	5c 58       	castu.b	r8
800061b0:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
800061b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800061b8:	30 88       	mov	r8,8
800061ba:	f0 09 18 00 	cp.b	r9,r8
800061be:	e0 8b 00 04 	brhi	800061c6 <sd_mmc_mci_get_csd+0x21a>
      return false;  // block size < 512B not supported by firmware
800061c2:	30 08       	mov	r8,0
800061c4:	c4 f8       	rjmp	80006262 <sd_mmc_mci_get_csd+0x2b6>

    tmp = csd.csd_v1.readBlLen; // READ_BL_LEN
800061c6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800061ca:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
800061ce:	5c 58       	castu.b	r8
800061d0:	ef 68 ff ff 	st.b	r7[-1],r8
    if (tmp < CSD_BLEN_512)
800061d4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800061d8:	30 88       	mov	r8,8
800061da:	f0 09 18 00 	cp.b	r9,r8
800061de:	e0 8b 00 04 	brhi	800061e6 <sd_mmc_mci_get_csd+0x23a>
      return false;  // block size < 512B not supported by firmware
800061e2:	30 08       	mov	r8,0
800061e4:	c3 f8       	rjmp	80006262 <sd_mmc_mci_get_csd+0x2b6>

    //// Compute Memory Capacity
    // compute MULT
    mult = 1 << (csd.csd_v1.cSizeMult + 2);
800061e6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800061ea:	f1 d8 c1 e3 	bfextu	r8,r8,0xf,0x3
800061ee:	5c 58       	castu.b	r8
800061f0:	2f e8       	sub	r8,-2
800061f2:	30 19       	mov	r9,1
800061f4:	f2 08 09 48 	lsl	r8,r9,r8
800061f8:	ef 48 ff f4 	st.w	r7[-12],r8
    max_Read_DataBlock_Length = 1<<csd.csd_v1.readBlLen;
800061fc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006200:	f1 d8 c2 04 	bfextu	r8,r8,0x10,0x4
80006204:	5c 58       	castu.b	r8
80006206:	30 19       	mov	r9,1
80006208:	f2 08 09 48 	lsl	r8,r9,r8
8000620c:	ef 48 ff f0 	st.w	r7[-16],r8
    // compute MSB of C_SIZE
    blocknr = csd.csd_v1.deviceSizeH << 2;
80006210:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006214:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80006218:	5c 88       	casts.h	r8
8000621a:	5c 78       	castu.h	r8
8000621c:	a3 68       	lsl	r8,0x2
8000621e:	ef 48 ff f8 	st.w	r7[-8],r8
    // compute MULT * (LSB of C-SIZE + MSB already computed + 1) = BLOCKNR
    blocknr = mult * ( blocknr + csd.csd_v1.deviceSizeL + 1 );
80006222:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006226:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
8000622a:	5c 58       	castu.b	r8
8000622c:	10 99       	mov	r9,r8
8000622e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006232:	f2 08 00 08 	add	r8,r9,r8
80006236:	f0 c9 ff ff 	sub	r9,r8,-1
8000623a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000623e:	f2 08 02 48 	mul	r8,r9,r8
80006242:	ef 48 ff f8 	st.w	r7[-8],r8
    g_card_size[slot] = ((max_Read_DataBlock_Length * blocknr)/512);
80006246:	ef 39 ff c4 	ld.ub	r9,r7[-60]
8000624a:	ee fa ff f0 	ld.w	r10,r7[-16]
8000624e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006252:	f4 08 02 48 	mul	r8,r10,r8
80006256:	f0 0a 16 09 	lsr	r10,r8,0x9
8000625a:	49 08       	lddpc	r8,80006298 <sd_mmc_mci_get_csd+0x2ec>
8000625c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  }

  return true;
80006260:	30 18       	mov	r8,1
}
80006262:	10 9c       	mov	r12,r8
80006264:	2f 1d       	sub	sp,-60
80006266:	e3 cd 80 80 	ldm	sp++,r7,pc
8000626a:	00 00       	add	r0,r0
8000626c:	80 00       	ld.sh	r0,r0[0x0]
8000626e:	f0 bc       	*unknown*
80006270:	80 00       	ld.sh	r0,r0[0x0]
80006272:	e7 de 80 00 	ldswp.w	lr,r3[0]
80006276:	f0 c4 00 00 	sub	r4,r8,0
8000627a:	0b d8       	ld.ub	r8,r5[0x5]
8000627c:	00 00       	add	r0,r0
8000627e:	01 34       	ld.ub	r4,r0++
80006280:	80 00       	ld.sh	r0,r0[0x0]
80006282:	94 fc       	ld.uh	r12,r10[0xe]
80006284:	00 00       	add	r0,r0
80006286:	09 c8       	ld.ub	r8,r4[0x4]
80006288:	80 00       	ld.sh	r0,r0[0x0]
8000628a:	93 64       	st.w	r9[0x18],r4
8000628c:	80 00       	ld.sh	r0,r0[0x0]
8000628e:	94 9c       	ld.uh	r12,r10[0x2]
80006290:	00 00       	add	r0,r0
80006292:	0d e0       	ld.ub	r0,r6[0x6]
80006294:	00 00       	add	r0,r0
80006296:	0b da       	ld.ub	r10,r5[0x5]
80006298:	00 00       	add	r0,r0
8000629a:	09 d0       	ld.ub	r0,r4[0x5]

8000629c <sd_mmc_get_ext_csd>:

static bool  sd_mmc_get_ext_csd( uint8_t slot )
{
8000629c:	eb cd 40 80 	pushm	r7,lr
800062a0:	1a 97       	mov	r7,sp
800062a2:	20 ad       	sub	sp,40
800062a4:	18 98       	mov	r8,r12
800062a6:	ef 68 ff d8 	st.b	r7[-40],r8
  uint8_t  i;
  uint32_t val;

  if (slot > MCI_LAST_SLOTS)
800062aa:	ef 39 ff d8 	ld.ub	r9,r7[-40]
800062ae:	30 18       	mov	r8,1
800062b0:	f0 09 18 00 	cp.b	r9,r8
800062b4:	e0 88 00 04 	brls	800062bc <sd_mmc_get_ext_csd+0x20>
    return false;
800062b8:	30 08       	mov	r8,0
800062ba:	cb e8       	rjmp	80006436 <sd_mmc_get_ext_csd+0x19a>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
800062bc:	ef 38 ff d8 	ld.ub	r8,r7[-40]
800062c0:	4e 09       	lddpc	r9,80006440 <sd_mmc_get_ext_csd+0x1a4>
800062c2:	f2 08 07 08 	ld.ub	r8,r9[r8]
800062c6:	10 9a       	mov	r10,r8
800062c8:	ef 39 ff d8 	ld.ub	r9,r7[-40]
800062cc:	4d e8       	lddpc	r8,80006444 <sd_mmc_get_ext_csd+0x1a8>
800062ce:	70 08       	ld.w	r8,r8[0x0]
800062d0:	12 9b       	mov	r11,r9
800062d2:	10 9c       	mov	r12,r8
800062d4:	f0 1f 00 5d 	mcall	80006448 <sd_mmc_get_ext_csd+0x1ac>

  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE); // Ext CSD = 512B size
800062d8:	4d b8       	lddpc	r8,80006444 <sd_mmc_get_ext_csd+0x1a8>
800062da:	70 08       	ld.w	r8,r8[0x0]
800062dc:	e0 6b 02 00 	mov	r11,512
800062e0:	10 9c       	mov	r12,r8
800062e2:	f0 1f 00 5b 	mcall	8000644c <sd_mmc_get_ext_csd+0x1b0>
  mci_set_block_count(mci, 1);
800062e6:	4d 88       	lddpc	r8,80006444 <sd_mmc_get_ext_csd+0x1a8>
800062e8:	70 08       	ld.w	r8,r8[0x0]
800062ea:	30 1b       	mov	r11,1
800062ec:	10 9c       	mov	r12,r8
800062ee:	f0 1f 00 59 	mcall	80006450 <sd_mmc_get_ext_csd+0x1b4>

  //** (CMD8)
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
800062f2:	4d 58       	lddpc	r8,80006444 <sd_mmc_get_ext_csd+0x1a8>
800062f4:	70 08       	ld.w	r8,r8[0x0]
800062f6:	30 0a       	mov	r10,0
800062f8:	e4 7b 10 48 	mov	r11,331848
800062fc:	10 9c       	mov	r12,r8
800062fe:	f0 1f 00 56 	mcall	80006454 <sd_mmc_get_ext_csd+0x1b8>
80006302:	18 98       	mov	r8,r12
80006304:	58 08       	cp.w	r8,0
80006306:	c0 30       	breq	8000630c <sd_mmc_get_ext_csd+0x70>
    return false;
80006308:	30 08       	mov	r8,0
8000630a:	c9 68       	rjmp	80006436 <sd_mmc_get_ext_csd+0x19a>

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
8000630c:	34 08       	mov	r8,64
8000630e:	ef 68 ff e3 	st.b	r7[-29],r8
80006312:	c8 a8       	rjmp	80006426 <sd_mmc_get_ext_csd+0x18a>
  {
    while(!(mci_rx_ready(mci)));
80006314:	4c c8       	lddpc	r8,80006444 <sd_mmc_get_ext_csd+0x1a8>
80006316:	70 08       	ld.w	r8,r8[0x0]
80006318:	ef 48 ff e4 	st.w	r7[-28],r8
8000631c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006320:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006324:	4c d8       	lddpc	r8,80006458 <sd_mmc_get_ext_csd+0x1bc>
80006326:	70 08       	ld.w	r8,r8[0x0]
80006328:	10 99       	mov	r9,r8
8000632a:	e6 19 01 e0 	andh	r9,0x1e0,COH
8000632e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006332:	71 08       	ld.w	r8,r8[0x40]
80006334:	f3 e8 10 08 	or	r8,r9,r8
80006338:	10 99       	mov	r9,r8
8000633a:	4c 88       	lddpc	r8,80006458 <sd_mmc_get_ext_csd+0x1bc>
8000633c:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
8000633e:	4c 78       	lddpc	r8,80006458 <sd_mmc_get_ext_csd+0x1bc>
80006340:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006342:	e2 18 00 02 	andl	r8,0x2,COH
80006346:	5f 18       	srne	r8
80006348:	58 08       	cp.w	r8,0
8000634a:	ce 50       	breq	80006314 <sd_mmc_get_ext_csd+0x78>
    mci_rd_data(mci);
8000634c:	4b e8       	lddpc	r8,80006444 <sd_mmc_get_ext_csd+0x1a8>
8000634e:	70 08       	ld.w	r8,r8[0x0]
80006350:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006354:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006358:	70 c8       	ld.w	r8,r8[0x30]
    while(!(mci_rx_ready(mci)));
8000635a:	4b b8       	lddpc	r8,80006444 <sd_mmc_get_ext_csd+0x1a8>
8000635c:	70 08       	ld.w	r8,r8[0x0]
8000635e:	ef 48 ff f0 	st.w	r7[-16],r8
80006362:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006366:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
8000636a:	4b c8       	lddpc	r8,80006458 <sd_mmc_get_ext_csd+0x1bc>
8000636c:	70 08       	ld.w	r8,r8[0x0]
8000636e:	10 99       	mov	r9,r8
80006370:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006374:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006378:	71 08       	ld.w	r8,r8[0x40]
8000637a:	f3 e8 10 08 	or	r8,r9,r8
8000637e:	10 99       	mov	r9,r8
80006380:	4b 68       	lddpc	r8,80006458 <sd_mmc_get_ext_csd+0x1bc>
80006382:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006384:	4b 58       	lddpc	r8,80006458 <sd_mmc_get_ext_csd+0x1bc>
80006386:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006388:	e2 18 00 02 	andl	r8,0x2,COH
8000638c:	5f 18       	srne	r8
8000638e:	58 08       	cp.w	r8,0
80006390:	ce 50       	breq	8000635a <sd_mmc_get_ext_csd+0xbe>
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
80006392:	ef 39 ff e3 	ld.ub	r9,r7[-29]
80006396:	32 68       	mov	r8,38
80006398:	f0 09 18 00 	cp.b	r9,r8
8000639c:	c1 c1       	brne	800063d4 <sd_mmc_get_ext_csd+0x138>
8000639e:	ef 38 ff d8 	ld.ub	r8,r7[-40]
800063a2:	4a f9       	lddpc	r9,8000645c <sd_mmc_get_ext_csd+0x1c0>
800063a4:	f2 08 07 08 	ld.ub	r8,r9[r8]
800063a8:	e2 18 00 20 	andl	r8,0x20,COH
800063ac:	c1 40       	breq	800063d4 <sd_mmc_get_ext_csd+0x138>
    {
      // If MMC HC then read Sector Count. Byte 212 is LSB, Byte 215 is MSB.
      val = mci_rd_data(mci);
800063ae:	4a 68       	lddpc	r8,80006444 <sd_mmc_get_ext_csd+0x1a8>
800063b0:	70 08       	ld.w	r8,r8[0x0]
800063b2:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
800063b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063ba:	70 c8       	ld.w	r8,r8[0x30]
800063bc:	ef 48 ff dc 	st.w	r7[-36],r8
      g_card_size[slot] = swap32(val);
800063c0:	ef 39 ff d8 	ld.ub	r9,r7[-40]
800063c4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800063c8:	5c b8       	swap.b	r8
800063ca:	10 9a       	mov	r10,r8
800063cc:	4a 58       	lddpc	r8,80006460 <sd_mmc_get_ext_csd+0x1c4>
800063ce:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  for (i = (512L/8); i!=0; i--)
  {
    while(!(mci_rx_ready(mci)));
    mci_rd_data(mci);
    while(!(mci_rx_ready(mci)));
    if( ((64-26) == i) && (g_card_type[slot]&MMC_CARD_HC) )
800063d2:	c2 58       	rjmp	8000641c <sd_mmc_get_ext_csd+0x180>
      val = mci_rd_data(mci);
      g_card_size[slot] = swap32(val);
    }
    else
    {
      val = mci_rd_data(mci);
800063d4:	49 c8       	lddpc	r8,80006444 <sd_mmc_get_ext_csd+0x1a8>
800063d6:	70 08       	ld.w	r8,r8[0x0]
800063d8:	ef 48 ff fc 	st.w	r7[-4],r8
800063dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063e0:	70 c8       	ld.w	r8,r8[0x30]
800063e2:	ef 48 ff dc 	st.w	r7[-36],r8
      if( (64-24) == i )
800063e6:	ef 39 ff e3 	ld.ub	r9,r7[-29]
800063ea:	32 88       	mov	r8,40
800063ec:	f0 09 18 00 	cp.b	r9,r8
800063f0:	c1 61       	brne	8000641c <sd_mmc_get_ext_csd+0x180>
      {  // Read byte at offset 196
        if( MSB0(val) & 0x02 )
800063f2:	ee c8 00 24 	sub	r8,r7,36
800063f6:	11 88       	ld.ub	r8,r8[0x0]
800063f8:	e2 18 00 02 	andl	r8,0x2,COH
800063fc:	c0 90       	breq	8000640e <sd_mmc_get_ext_csd+0x172>
          g_card_freq[slot] = 52*1000;
800063fe:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80006402:	49 99       	lddpc	r9,80006464 <sd_mmc_get_ext_csd+0x1c8>
80006404:	fe 78 cb 20 	mov	r8,-13536
80006408:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
8000640c:	c0 88       	rjmp	8000641c <sd_mmc_get_ext_csd+0x180>
        else
          g_card_freq[slot] = 26*1000;
8000640e:	ef 3a ff d8 	ld.ub	r10,r7[-40]
80006412:	49 59       	lddpc	r9,80006464 <sd_mmc_get_ext_csd+0x1c8>
80006414:	e0 68 65 90 	mov	r8,26000
80006418:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
  // read the extended CSD
  if(mci_send_cmd(mci, SD_MMC_SEND_EXT_CSD_CMD, 0 )!=MCI_SUCCESS)
    return false;

  // READ_EXT_CSD   // discard bytes not used
  for (i = (512L/8); i!=0; i--)
8000641c:	ef 38 ff e3 	ld.ub	r8,r7[-29]
80006420:	20 18       	sub	r8,1
80006422:	ef 68 ff e3 	st.b	r7[-29],r8
80006426:	ef 39 ff e3 	ld.ub	r9,r7[-29]
8000642a:	30 08       	mov	r8,0
8000642c:	f0 09 18 00 	cp.b	r9,r8
80006430:	fe 91 ff 72 	brne	80006314 <sd_mmc_get_ext_csd+0x78>
          g_card_freq[slot] = 26*1000;
      }
    }
  }

   return true;
80006434:	30 18       	mov	r8,1
}
80006436:	10 9c       	mov	r12,r8
80006438:	2f 6d       	sub	sp,-40
8000643a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000643e:	00 00       	add	r0,r0
80006440:	00 00       	add	r0,r0
80006442:	0b d8       	ld.ub	r8,r5[0x5]
80006444:	00 00       	add	r0,r0
80006446:	01 34       	ld.ub	r4,r0++
80006448:	80 00       	ld.sh	r0,r0[0x0]
8000644a:	94 fc       	ld.uh	r12,r10[0xe]
8000644c:	80 00       	ld.sh	r0,r0[0x0]
8000644e:	92 e4       	ld.uh	r4,r9[0xc]
80006450:	80 00       	ld.sh	r0,r0[0x0]
80006452:	93 2e       	st.w	r9[0x8],lr
80006454:	80 00       	ld.sh	r0,r0[0x0]
80006456:	93 64       	st.w	r9[0x18],r4
80006458:	00 00       	add	r0,r0
8000645a:	07 b0       	ld.ub	r0,r3[0x3]
8000645c:	00 00       	add	r0,r0
8000645e:	0d e0       	ld.ub	r0,r6[0x6]
80006460:	00 00       	add	r0,r0
80006462:	09 d0       	ld.ub	r0,r4[0x5]
80006464:	00 00       	add	r0,r0
80006466:	0b da       	ld.ub	r10,r5[0x5]

80006468 <sd_mmc_set_block_len>:

static bool  sd_mmc_set_block_len(uint8_t slot, uint16_t length )
{
80006468:	eb cd 40 80 	pushm	r7,lr
8000646c:	1a 97       	mov	r7,sp
8000646e:	20 2d       	sub	sp,8
80006470:	18 99       	mov	r9,r12
80006472:	16 98       	mov	r8,r11
80006474:	ef 69 ff fc 	st.b	r7[-4],r9
80006478:	ef 58 ff f8 	st.h	r7[-8],r8
  if (slot > MCI_LAST_SLOTS)
8000647c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006480:	30 18       	mov	r8,1
80006482:	f0 09 18 00 	cp.b	r9,r8
80006486:	e0 88 00 04 	brls	8000648e <sd_mmc_set_block_len+0x26>
    return false;
8000648a:	30 08       	mov	r8,0
8000648c:	c3 c8       	rjmp	80006504 <sd_mmc_set_block_len+0x9c>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
8000648e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006492:	49 f9       	lddpc	r9,8000650c <sd_mmc_set_block_len+0xa4>
80006494:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006498:	10 9a       	mov	r10,r8
8000649a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000649e:	49 d8       	lddpc	r8,80006510 <sd_mmc_set_block_len+0xa8>
800064a0:	70 08       	ld.w	r8,r8[0x0]
800064a2:	12 9b       	mov	r11,r9
800064a4:	10 9c       	mov	r12,r8
800064a6:	f0 1f 00 1c 	mcall	80006514 <sd_mmc_set_block_len+0xac>

  if(mci_send_cmd(mci, SD_MMC_SET_BLOCKLEN_CMD, length)!=MCI_SUCCESS)
800064aa:	ef 19 ff f8 	ld.uh	r9,r7[-8]
800064ae:	49 98       	lddpc	r8,80006510 <sd_mmc_set_block_len+0xa8>
800064b0:	70 08       	ld.w	r8,r8[0x0]
800064b2:	12 9a       	mov	r10,r9
800064b4:	e0 6b 10 50 	mov	r11,4176
800064b8:	10 9c       	mov	r12,r8
800064ba:	f0 1f 00 18 	mcall	80006518 <sd_mmc_set_block_len+0xb0>
800064be:	18 98       	mov	r8,r12
800064c0:	58 08       	cp.w	r8,0
800064c2:	c0 30       	breq	800064c8 <sd_mmc_set_block_len+0x60>
    return false;
800064c4:	30 08       	mov	r8,0
800064c6:	c1 f8       	rjmp	80006504 <sd_mmc_set_block_len+0x9c>

  // check response, card must be in TRAN state
  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
800064c8:	49 28       	lddpc	r8,80006510 <sd_mmc_set_block_len+0xa8>
800064ca:	70 08       	ld.w	r8,r8[0x0]
800064cc:	10 9c       	mov	r12,r8
800064ce:	f0 1f 00 14 	mcall	8000651c <sd_mmc_set_block_len+0xb4>
800064d2:	18 98       	mov	r8,r12
800064d4:	e4 18 e0 02 	andh	r8,0xe002
800064d8:	e0 18 0e 00 	andl	r8,0xe00
800064dc:	e0 48 08 00 	cp.w	r8,2048
800064e0:	c0 30       	breq	800064e6 <sd_mmc_set_block_len+0x7e>
    return false;
800064e2:	30 08       	mov	r8,0
800064e4:	c1 08       	rjmp	80006504 <sd_mmc_set_block_len+0x9c>

  mci_set_block_size(mci, length);
800064e6:	ef 19 ff f8 	ld.uh	r9,r7[-8]
800064ea:	48 a8       	lddpc	r8,80006510 <sd_mmc_set_block_len+0xa8>
800064ec:	70 08       	ld.w	r8,r8[0x0]
800064ee:	12 9b       	mov	r11,r9
800064f0:	10 9c       	mov	r12,r8
800064f2:	f0 1f 00 0c 	mcall	80006520 <sd_mmc_set_block_len+0xb8>
  mci_set_block_count(mci, 1);
800064f6:	48 78       	lddpc	r8,80006510 <sd_mmc_set_block_len+0xa8>
800064f8:	70 08       	ld.w	r8,r8[0x0]
800064fa:	30 1b       	mov	r11,1
800064fc:	10 9c       	mov	r12,r8
800064fe:	f0 1f 00 0a 	mcall	80006524 <sd_mmc_set_block_len+0xbc>
  return true;
80006502:	30 18       	mov	r8,1
}
80006504:	10 9c       	mov	r12,r8
80006506:	2f ed       	sub	sp,-8
80006508:	e3 cd 80 80 	ldm	sp++,r7,pc
8000650c:	00 00       	add	r0,r0
8000650e:	0b d8       	ld.ub	r8,r5[0x5]
80006510:	00 00       	add	r0,r0
80006512:	01 34       	ld.ub	r4,r0++
80006514:	80 00       	ld.sh	r0,r0[0x0]
80006516:	94 fc       	ld.uh	r12,r10[0xe]
80006518:	80 00       	ld.sh	r0,r0[0x0]
8000651a:	93 64       	st.w	r9[0x18],r4
8000651c:	80 00       	ld.sh	r0,r0[0x0]
8000651e:	94 9c       	ld.uh	r12,r10[0x2]
80006520:	80 00       	ld.sh	r0,r0[0x0]
80006522:	92 e4       	ld.uh	r4,r9[0xc]
80006524:	80 00       	ld.sh	r0,r0[0x0]
80006526:	93 2e       	st.w	r9[0x8],lr

80006528 <sd_mmc_mci_init>:

bool sd_mmc_mci_init(unsigned char card_slot, long pbb_hz, long cpu_hz)
{
80006528:	eb cd 40 80 	pushm	r7,lr
8000652c:	1a 97       	mov	r7,sp
8000652e:	20 5d       	sub	sp,20
80006530:	18 98       	mov	r8,r12
80006532:	ef 4b ff f0 	st.w	r7[-16],r11
80006536:	ef 4a ff ec 	st.w	r7[-20],r10
8000653a:	ef 68 ff f4 	st.b	r7[-12],r8
    unsigned long                 scfg;
    avr32_hmatrix_scfg_t          SCFG;
  } u_avr32_hmatrix_scfg;

  // For the USBB DMA HMATRIX master, use infinite length burst.
  u_avr32_hmatrix_mcfg.mcfg = AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA];
8000653e:	fe 68 10 00 	mov	r8,-126976
80006542:	70 68       	ld.w	r8,r8[0x18]
80006544:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_hmatrix_mcfg.MCFG.ulbt = AVR32_HMATRIX_ULBT_INFINITE;
80006548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000654c:	30 09       	mov	r9,0
8000654e:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80006552:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_HMATRIX.mcfg[AVR32_HMATRIX_MASTER_USBB_DMA] = u_avr32_hmatrix_mcfg.mcfg;
80006556:	fe 68 10 00 	mov	r8,-126976
8000655a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000655e:	91 69       	st.w	r8[0x18],r9

  // For the USBB DPRAM HMATRIX slave, use the USBB DMA as fixed default master.
  u_avr32_hmatrix_scfg.scfg = AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM];
80006560:	fe 68 10 00 	mov	r8,-126976
80006564:	71 58       	ld.w	r8,r8[0x54]
80006566:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.fixed_defmstr = AVR32_HMATRIX_MASTER_USBB_DMA;
8000656a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000656e:	30 69       	mov	r9,6
80006570:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
80006574:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_hmatrix_scfg.SCFG.defmstr_type = AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
80006578:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000657c:	30 29       	mov	r9,2
8000657e:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
80006582:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_HMATRIX.scfg[AVR32_HMATRIX_SLAVE_USBB_DPRAM] = u_avr32_hmatrix_scfg.scfg;
80006586:	fe 68 10 00 	mov	r8,-126976
8000658a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000658e:	f1 49 00 54 	st.w	r8[84],r9

  g_pbb_hz = pbb_hz;
80006592:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006596:	49 08       	lddpc	r8,800065d4 <sd_mmc_mci_init+0xac>
80006598:	91 09       	st.w	r8[0x0],r9
  g_cpu_hz = cpu_hz;
8000659a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000659e:	48 f8       	lddpc	r8,800065d8 <sd_mmc_mci_init+0xb0>
800065a0:	91 09       	st.w	r8[0x0],r9

  // Init MCI controller
  if (mci_init(mci, card_slot, pbb_hz)!=MCI_SUCCESS)
800065a2:	ee fa ff f0 	ld.w	r10,r7[-16]
800065a6:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800065aa:	48 d8       	lddpc	r8,800065dc <sd_mmc_mci_init+0xb4>
800065ac:	70 08       	ld.w	r8,r8[0x0]
800065ae:	12 9b       	mov	r11,r9
800065b0:	10 9c       	mov	r12,r8
800065b2:	f0 1f 00 0c 	mcall	800065e0 <sd_mmc_mci_init+0xb8>
800065b6:	18 98       	mov	r8,r12
800065b8:	58 08       	cp.w	r8,0
800065ba:	c0 30       	breq	800065c0 <sd_mmc_mci_init+0x98>
    return false;
800065bc:	30 08       	mov	r8,0
800065be:	c0 78       	rjmp	800065cc <sd_mmc_mci_init+0xa4>

  // Default card initialization. This can be removed since the card init will
  // automatically be done when needed.
  sd_mmc_mci_card_init(card_slot);
800065c0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800065c4:	10 9c       	mov	r12,r8
800065c6:	f0 1f 00 08 	mcall	800065e4 <sd_mmc_mci_init+0xbc>
  return true;
800065ca:	30 18       	mov	r8,1
}
800065cc:	10 9c       	mov	r12,r8
800065ce:	2f bd       	sub	sp,-20
800065d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800065d4:	00 00       	add	r0,r0
800065d6:	06 18       	sub	r8,r3
800065d8:	00 00       	add	r0,r0
800065da:	06 1c       	sub	r12,r3
800065dc:	00 00       	add	r0,r0
800065de:	01 34       	ld.ub	r4,r0++
800065e0:	80 00       	ld.sh	r0,r0[0x0]
800065e2:	92 30       	ld.sh	r0,r9[0x6]
800065e4:	80 00       	ld.sh	r0,r0[0x0]
800065e6:	65 e8       	ld.w	r8,r2[0x78]

800065e8 <sd_mmc_mci_card_init>:

bool sd_mmc_mci_card_init(unsigned char slot)
{
800065e8:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
800065ec:	1a 97       	mov	r7,sp
800065ee:	21 7d       	sub	sp,92
800065f0:	18 98       	mov	r8,r12
800065f2:	ef 68 ff a4 	st.b	r7[-92],r8
  uint32_t response;

  if (true == sd_mmc_mci_init_done[slot])
800065f6:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800065fa:	fe f9 08 7a 	ld.w	r9,pc[2170]
800065fe:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006602:	58 08       	cp.w	r8,0
80006604:	c0 40       	breq	8000660c <sd_mmc_mci_card_init+0x24>
    return true;
80006606:	30 18       	mov	r8,1
80006608:	e0 8f 04 31 	bral	80006e6a <sd_mmc_mci_card_init+0x882>

  // Default card is not known.
  g_card_type[slot] = UNKNOWN_CARD;
8000660c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006610:	fe fa 08 68 	ld.w	r10,pc[2152]
80006614:	30 08       	mov	r8,0
80006616:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default bus size is 1 bit.
  g_card_bus_width[slot] = MCI_BUS_SIZE_1_BIT;
8000661a:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000661e:	fe fa 08 5e 	ld.w	r10,pc[2142]
80006622:	30 08       	mov	r8,0
80006624:	f4 09 0b 08 	st.b	r10[r9],r8

  // Default card speed and disable High Speed mode.
  mci_init(mci, slot, g_pbb_hz);
80006628:	fe f8 08 58 	ld.w	r8,pc[2136]
8000662c:	70 0a       	ld.w	r10,r8[0x0]
8000662e:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006632:	fe f8 08 52 	ld.w	r8,pc[2130]
80006636:	70 08       	ld.w	r8,r8[0x0]
80006638:	12 9b       	mov	r11,r9
8000663a:	10 9c       	mov	r12,r8
8000663c:	f0 1f 02 13 	mcall	80006e88 <sd_mmc_mci_card_init+0x8a0>

  // Wait for 1ms, then wait for 74 more clock cycles (see MMC norms)
  if (mci_send_cmd(mci, SD_MMC_INIT_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
80006640:	fe f8 08 44 	ld.w	r8,pc[2116]
80006644:	70 08       	ld.w	r8,r8[0x0]
80006646:	3f fa       	mov	r10,-1
80006648:	e0 6b 01 00 	mov	r11,256
8000664c:	10 9c       	mov	r12,r8
8000664e:	f0 1f 02 10 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
80006652:	18 98       	mov	r8,r12
80006654:	58 08       	cp.w	r8,0
80006656:	c0 40       	breq	8000665e <sd_mmc_mci_card_init+0x76>
    return false;
80006658:	30 08       	mov	r8,0
8000665a:	e0 8f 04 08 	bral	80006e6a <sd_mmc_mci_card_init+0x882>

  //-- (CMD0)
  // Set card in idle state
  if (mci_send_cmd(mci, SD_MMC_GO_IDLE_STATE_CMD, 0xFFFFFFFF)!=MCI_SUCCESS)
8000665e:	fe f8 08 26 	ld.w	r8,pc[2086]
80006662:	70 08       	ld.w	r8,r8[0x0]
80006664:	3f fa       	mov	r10,-1
80006666:	30 0b       	mov	r11,0
80006668:	10 9c       	mov	r12,r8
8000666a:	f0 1f 02 09 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
8000666e:	18 98       	mov	r8,r12
80006670:	58 08       	cp.w	r8,0
80006672:	c0 50       	breq	8000667c <sd_mmc_mci_card_init+0x94>
    return false;
80006674:	30 08       	mov	r8,0
80006676:	e0 8f 03 fa 	bral	80006e6a <sd_mmc_mci_card_init+0x882>
    response = mci_read_response(mci);
    if( !(response & OCR_MSK_BUSY) )
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
8000667a:	d7 03       	nop
    return false;

sd_mmc_init_step1:
  // (CMD1)
  // To send its Operating Conditions Register contents command only supported by MMC card
  if(mci_send_cmd(mci, SD_MMC_MMC_SEND_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_ALL|OCR_MSK_HC)==MCI_SUCCESS)
8000667c:	fe f8 08 08 	ld.w	r8,pc[2056]
80006680:	70 08       	ld.w	r8,r8[0x0]
80006682:	e0 6a 80 00 	mov	r10,32768
80006686:	ea 1a c0 ff 	orh	r10,0xc0ff
8000668a:	e0 6b 08 41 	mov	r11,2113
8000668e:	10 9c       	mov	r12,r8
80006690:	f0 1f 01 ff 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
80006694:	18 98       	mov	r8,r12
80006696:	58 08       	cp.w	r8,0
80006698:	c2 a1       	brne	800066ec <sd_mmc_mci_card_init+0x104>
  {
    // MMC cards always respond to MMC_SEND_OP_COND
    g_card_type[slot] = MMC_CARD;
8000669a:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000669e:	fe fa 07 da 	ld.w	r10,pc[2010]
800066a2:	30 18       	mov	r8,1
800066a4:	f4 09 0b 08 	st.b	r10[r9],r8
    response = mci_read_response(mci);
800066a8:	fe f8 07 dc 	ld.w	r8,pc[2012]
800066ac:	70 08       	ld.w	r8,r8[0x0]
800066ae:	10 9c       	mov	r12,r8
800066b0:	f0 1f 01 f8 	mcall	80006e90 <sd_mmc_mci_card_init+0x8a8>
800066b4:	18 98       	mov	r8,r12
800066b6:	ef 48 ff c0 	st.w	r7[-64],r8
    if( !(response & OCR_MSK_BUSY) )
800066ba:	ee f8 ff c0 	ld.w	r8,r7[-64]
800066be:	58 08       	cp.w	r8,0
800066c0:	cd d4       	brge	8000667a <sd_mmc_mci_card_init+0x92>
    {
      // here card busy, it did not completed its initialization process
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
800066c2:	ee f8 ff c0 	ld.w	r8,r7[-64]
800066c6:	e6 18 40 00 	andh	r8,0x4000,COH
800066ca:	e0 80 00 97 	breq	800067f8 <sd_mmc_mci_card_init+0x210>
    {
      g_card_type[slot] |= MMC_CARD_HC;
800066ce:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800066d2:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800066d6:	fe fa 07 a2 	ld.w	r10,pc[1954]
800066da:	f4 08 07 08 	ld.ub	r8,r10[r8]
800066de:	a5 b8       	sbr	r8,0x5
800066e0:	5c 58       	castu.b	r8
800066e2:	fe fa 07 96 	ld.w	r10,pc[1942]
800066e6:	f4 09 0b 08 	st.b	r10[r9],r8
800066ea:	c8 88       	rjmp	800067fa <sd_mmc_mci_card_init+0x212>
    }
  }
  else
  {
    // SD cards do not respond to MMC_SEND_OP_COND
    g_card_type[slot] = SD_CARD;
800066ec:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800066f0:	fe fa 07 88 	ld.w	r10,pc[1928]
800066f4:	30 28       	mov	r8,2
800066f6:	f4 09 0b 08 	st.b	r10[r9],r8

    //-- (CMD8)
    // enables to expand new functionality to some existing commands supported only by SD HC card
    if (mci_send_cmd(mci, SD_MMC_SD_SEND_IF_COND_CMD, 0x000001AA)==MCI_SUCCESS)
800066fa:	fe f8 07 8a 	ld.w	r8,pc[1930]
800066fe:	70 08       	ld.w	r8,r8[0x0]
80006700:	e0 6a 01 aa 	mov	r10,426
80006704:	e0 6b 10 48 	mov	r11,4168
80006708:	10 9c       	mov	r12,r8
8000670a:	f0 1f 01 e1 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
8000670e:	18 98       	mov	r8,r12
80006710:	58 08       	cp.w	r8,0
80006712:	c1 b1       	brne	80006748 <sd_mmc_mci_card_init+0x160>
    {
      // It is a SD HC
      if( 0x000001AA == mci_read_response(mci))
80006714:	fe f8 07 70 	ld.w	r8,pc[1904]
80006718:	70 08       	ld.w	r8,r8[0x0]
8000671a:	10 9c       	mov	r12,r8
8000671c:	f0 1f 01 dd 	mcall	80006e90 <sd_mmc_mci_card_init+0x8a8>
80006720:	18 98       	mov	r8,r12
80006722:	e0 48 01 aa 	cp.w	r8,426
80006726:	c1 11       	brne	80006748 <sd_mmc_mci_card_init+0x160>
      {
        g_card_type[slot] |= SD_CARD_V2;
80006728:	ef 39 ff a4 	ld.ub	r9,r7[-92]
8000672c:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006730:	fe fa 07 48 	ld.w	r10,pc[1864]
80006734:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006738:	a3 b8       	sbr	r8,0x3
8000673a:	5c 58       	castu.b	r8
8000673c:	fe fa 07 3c 	ld.w	r10,pc[1852]
80006740:	f4 09 0b 08 	st.b	r10[r9],r8
80006744:	c0 28       	rjmp	80006748 <sd_mmc_mci_card_init+0x160>
    response = mci_read_response(mci);

    if( !(response & OCR_MSK_BUSY) )
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
80006746:	d7 03       	nop

sd_mmc_init_step2:
    //-- (CMD55)
    // Indicates to the card that the next command is an application specific command rather than a standard command
    // CMD55 shall always precede ACMD41
    if (mci_send_cmd(mci, SD_MMC_APP_CMD, 0)!=MCI_SUCCESS)
80006748:	fe f8 07 3c 	ld.w	r8,pc[1852]
8000674c:	70 08       	ld.w	r8,r8[0x0]
8000674e:	30 0a       	mov	r10,0
80006750:	e0 6b 10 77 	mov	r11,4215
80006754:	10 9c       	mov	r12,r8
80006756:	f0 1f 01 ce 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
8000675a:	18 98       	mov	r8,r12
8000675c:	58 08       	cp.w	r8,0
8000675e:	c0 40       	breq	80006766 <sd_mmc_mci_card_init+0x17e>
      return false;
80006760:	30 08       	mov	r8,0
80006762:	e0 8f 03 84 	bral	80006e6a <sd_mmc_mci_card_init+0x882>

    //-- (ACMD41)
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
80006766:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000676a:	fe f9 07 0e 	ld.w	r9,pc[1806]
8000676e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006772:	e2 18 00 08 	andl	r8,0x8,COH
80006776:	c1 00       	breq	80006796 <sd_mmc_mci_card_init+0x1ae>
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
80006778:	fe f8 07 0c 	ld.w	r8,pc[1804]
8000677c:	70 08       	ld.w	r8,r8[0x0]
8000677e:	fc 1a c0 10 	movh	r10,0xc010
80006782:	36 9b       	mov	r11,105
80006784:	10 9c       	mov	r12,r8
80006786:	f0 1f 01 c2 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
8000678a:	18 98       	mov	r8,r12
8000678c:	58 08       	cp.w	r8,0
8000678e:	c1 30       	breq	800067b4 <sd_mmc_mci_card_init+0x1cc>
        return false;
80006790:	30 08       	mov	r8,0
80006792:	e0 8f 03 6c 	bral	80006e6a <sd_mmc_mci_card_init+0x882>
    }
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
80006796:	fe f8 06 ee 	ld.w	r8,pc[1774]
8000679a:	70 08       	ld.w	r8,r8[0x0]
8000679c:	fc 1a 80 10 	movh	r10,0x8010
800067a0:	36 9b       	mov	r11,105
800067a2:	10 9c       	mov	r12,r8
800067a4:	f0 1f 01 ba 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
800067a8:	18 98       	mov	r8,r12
800067aa:	58 08       	cp.w	r8,0
800067ac:	c0 50       	breq	800067b6 <sd_mmc_mci_card_init+0x1ce>
        return false;
800067ae:	30 08       	mov	r8,0
800067b0:	e0 8f 03 5d 	bral	80006e6a <sd_mmc_mci_card_init+0x882>
    // Sends host OCR register
    if( SD_CARD_V2 & g_card_type[slot] )
    {
      // Sends host capacity support information (HCS)
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V|OCR_MSK_HC)!=MCI_SUCCESS)
        return false;
800067b4:	d7 03       	nop
    else
    {
      if (mci_send_cmd(mci, SD_MMC_SDCARD_APP_OP_COND_CMD, OCR_MSK_BUSY|OCR_MSK_VOLTAGE_3_2V_3_3V)!=MCI_SUCCESS)
        return false;
    }
    response = mci_read_response(mci);
800067b6:	fe f8 06 ce 	ld.w	r8,pc[1742]
800067ba:	70 08       	ld.w	r8,r8[0x0]
800067bc:	10 9c       	mov	r12,r8
800067be:	f0 1f 01 b5 	mcall	80006e90 <sd_mmc_mci_card_init+0x8a8>
800067c2:	18 98       	mov	r8,r12
800067c4:	ef 48 ff c0 	st.w	r7[-64],r8

    if( !(response & OCR_MSK_BUSY) )
800067c8:	ee f8 ff c0 	ld.w	r8,r7[-64]
800067cc:	58 08       	cp.w	r8,0
800067ce:	cb c4       	brge	80006746 <sd_mmc_mci_card_init+0x15e>
    {
      // Card Busy, resend ACMD41 precede of CMD55
      goto sd_mmc_init_step2;
    }
    // Card read then check HC type
    if (response & OCR_MSK_HC)
800067d0:	ee f8 ff c0 	ld.w	r8,r7[-64]
800067d4:	e6 18 40 00 	andh	r8,0x4000,COH
800067d8:	c1 10       	breq	800067fa <sd_mmc_mci_card_init+0x212>
    {
      g_card_type[slot] |= SD_CARD_HC;  // Card SD High Capacity
800067da:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800067de:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800067e2:	fe fa 06 96 	ld.w	r10,pc[1686]
800067e6:	f4 08 07 08 	ld.ub	r8,r10[r8]
800067ea:	a5 a8       	sbr	r8,0x4
800067ec:	5c 58       	castu.b	r8
800067ee:	fe fa 06 8a 	ld.w	r10,pc[1674]
800067f2:	f4 09 0b 08 	st.b	r10[r9],r8
800067f6:	c0 28       	rjmp	800067fa <sd_mmc_mci_card_init+0x212>
      // resend command MMC_SEND_OP_COND
      goto sd_mmc_init_step1;                   // loop until it is ready
    }
    if( 0!=(response & OCR_MSK_HC) )
    {
      g_card_type[slot] |= MMC_CARD_HC;
800067f8:	d7 03       	nop

  // Here card ready and type (MMC <V4, MMC V4, MMC HC, SD V1, SD V2 HC) detected

  //-- (CMD2)
  // Send CID
  if (mci_send_cmd(mci, SD_MMC_ALL_SEND_CID_CMD, 0)!=MCI_SUCCESS)
800067fa:	fe f8 06 8a 	ld.w	r8,pc[1674]
800067fe:	70 08       	ld.w	r8,r8[0x0]
80006800:	30 0a       	mov	r10,0
80006802:	e0 6b 00 82 	mov	r11,130
80006806:	10 9c       	mov	r12,r8
80006808:	f0 1f 01 a1 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
8000680c:	18 98       	mov	r8,r12
8000680e:	58 08       	cp.w	r8,0
80006810:	c0 40       	breq	80006818 <sd_mmc_mci_card_init+0x230>
    return false;
80006812:	30 08       	mov	r8,0
80006814:	e0 8f 03 2b 	bral	80006e6a <sd_mmc_mci_card_init+0x882>

  //-- (CMD3)
  // Set relative address
  if(MMC_CARD & g_card_type[slot])
80006818:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000681c:	fe f9 06 5c 	ld.w	r9,pc[1628]
80006820:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006824:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006828:	5c 58       	castu.b	r8
8000682a:	c1 90       	breq	8000685c <sd_mmc_mci_card_init+0x274>
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
8000682c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006830:	fe f8 06 64 	ld.w	r8,pc[1636]
80006834:	e0 7a ff ff 	mov	r10,131071
80006838:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
8000683c:	fe f8 06 48 	ld.w	r8,pc[1608]
80006840:	70 08       	ld.w	r8,r8[0x0]
80006842:	e0 7a ff ff 	mov	r10,131071
80006846:	e0 6b 10 43 	mov	r11,4163
8000684a:	10 9c       	mov	r12,r8
8000684c:	f0 1f 01 90 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
80006850:	18 98       	mov	r8,r12
80006852:	58 08       	cp.w	r8,0
80006854:	c1 30       	breq	8000687a <sd_mmc_mci_card_init+0x292>
      return false;
80006856:	30 08       	mov	r8,0
80006858:	e0 8f 03 09 	bral	80006e6a <sd_mmc_mci_card_init+0x882>
  }
  else
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
8000685c:	fe f8 06 28 	ld.w	r8,pc[1576]
80006860:	70 08       	ld.w	r8,r8[0x0]
80006862:	30 0a       	mov	r10,0
80006864:	e0 6b 10 43 	mov	r11,4163
80006868:	10 9c       	mov	r12,r8
8000686a:	f0 1f 01 89 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
8000686e:	18 98       	mov	r8,r12
80006870:	58 08       	cp.w	r8,0
80006872:	c0 50       	breq	8000687c <sd_mmc_mci_card_init+0x294>
      return false;
80006874:	30 08       	mov	r8,0
80006876:	e0 8f 02 fa 	bral	80006e6a <sd_mmc_mci_card_init+0x882>
  if(MMC_CARD & g_card_type[slot])
  {
    // For MMC card, you send an address to card
    g_card_rca[slot] = RCA_DEFAULT_ADR;
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_DEFAULT_ADR)!=MCI_SUCCESS)
      return false;
8000687a:	d7 03       	nop
  {
    // For SD  card, you ask an address to card
    if(mci_send_cmd(mci, SD_MMC_SET_RELATIVE_ADDR_CMD, RCA_RESERVE_ADR)!=MCI_SUCCESS)
      return false;
  }
  if (SD_CARD & g_card_type[slot])
8000687c:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006880:	fe f9 05 f8 	ld.w	r9,pc[1528]
80006884:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006888:	e2 18 00 02 	andl	r8,0x2,COH
8000688c:	c1 10       	breq	800068ae <sd_mmc_mci_card_init+0x2c6>
  {
    // For SD  card, you receive address of card
    g_card_rca[slot] = mci_read_response(mci) & RCA_MSK_ADR ;
8000688e:	ef 36 ff a4 	ld.ub	r6,r7[-92]
80006892:	fe f8 05 f2 	ld.w	r8,pc[1522]
80006896:	70 08       	ld.w	r8,r8[0x0]
80006898:	10 9c       	mov	r12,r8
8000689a:	f0 1f 01 7e 	mcall	80006e90 <sd_mmc_mci_card_init+0x8a8>
8000689e:	18 98       	mov	r8,r12
800068a0:	10 99       	mov	r9,r8
800068a2:	e0 19 00 00 	andl	r9,0x0
800068a6:	fe f8 05 ee 	ld.w	r8,pc[1518]
800068aa:	f0 06 09 29 	st.w	r8[r6<<0x2],r9
  }


  //-- (CMD9)
  // Read & analyze CSD register
  if (sd_mmc_mci_get_csd(slot)!=true)
800068ae:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800068b2:	10 9c       	mov	r12,r8
800068b4:	f0 1f 01 79 	mcall	80006e98 <sd_mmc_mci_card_init+0x8b0>
800068b8:	18 98       	mov	r8,r12
800068ba:	ec 18 00 01 	eorl	r8,0x1
800068be:	5c 58       	castu.b	r8
800068c0:	c0 40       	breq	800068c8 <sd_mmc_mci_card_init+0x2e0>
    return false;
800068c2:	30 08       	mov	r8,0
800068c4:	e0 8f 02 d3 	bral	80006e6a <sd_mmc_mci_card_init+0x882>


  //-- (CMD7)-R1b
  // select card
  if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
800068c8:	ef 39 ff a4 	ld.ub	r9,r7[-92]
800068cc:	fe f8 05 c8 	ld.w	r8,pc[1480]
800068d0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800068d4:	fe f8 05 b0 	ld.w	r8,pc[1456]
800068d8:	70 08       	ld.w	r8,r8[0x0]
800068da:	12 9a       	mov	r10,r9
800068dc:	e0 6b 10 c7 	mov	r11,4295
800068e0:	10 9c       	mov	r12,r8
800068e2:	f0 1f 01 6b 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
800068e6:	18 98       	mov	r8,r12
800068e8:	58 08       	cp.w	r8,0
800068ea:	c0 40       	breq	800068f2 <sd_mmc_mci_card_init+0x30a>
    return false;
800068ec:	30 08       	mov	r8,0
800068ee:	e0 8f 02 be 	bral	80006e6a <sd_mmc_mci_card_init+0x882>

  // Wait end of busy
  mci_wait_busy_signal(mci);// read busy state on DAT0
800068f2:	fe f8 05 92 	ld.w	r8,pc[1426]
800068f6:	70 08       	ld.w	r8,r8[0x0]
800068f8:	10 9c       	mov	r12,r8
800068fa:	f0 1f 01 69 	mcall	80006e9c <sd_mmc_mci_card_init+0x8b4>

  // Get clock by checking the extended CSD register
  if (MMC_CARD_V4 & g_card_type[slot])
800068fe:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006902:	fe f9 05 76 	ld.w	r9,pc[1398]
80006906:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000690a:	e2 18 00 04 	andl	r8,0x4,COH
8000690e:	c0 e0       	breq	8000692a <sd_mmc_mci_card_init+0x342>
  {
    // Get clock (MMC V4) and size (MMC V4 HC) by checking the extended CSD register
      //-- (CMD8)
    if (sd_mmc_get_ext_csd(slot)!=true)
80006910:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006914:	10 9c       	mov	r12,r8
80006916:	f0 1f 01 63 	mcall	80006ea0 <sd_mmc_mci_card_init+0x8b8>
8000691a:	18 98       	mov	r8,r12
8000691c:	ec 18 00 01 	eorl	r8,0x1
80006920:	5c 58       	castu.b	r8
80006922:	c0 40       	breq	8000692a <sd_mmc_mci_card_init+0x342>
         return false;
80006924:	30 08       	mov	r8,0
80006926:	e0 8f 02 a2 	bral	80006e6a <sd_mmc_mci_card_init+0x882>
  }


#if (SD_4_BIT == ENABLE)
  // set bus size
  if (SD_CARD & g_card_type[slot])
8000692a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
8000692e:	fe f9 05 4a 	ld.w	r9,pc[1354]
80006932:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006936:	e2 18 00 02 	andl	r8,0x2,COH
8000693a:	c4 00       	breq	800069ba <sd_mmc_mci_card_init+0x3d2>
  {
    // set 4-bit bus for SD Card
    //-- (CMD55)
    if(mci_send_cmd(mci, SD_MMC_APP_CMD, g_card_rca[slot])!=MCI_SUCCESS)
8000693c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006940:	fe f8 05 54 	ld.w	r8,pc[1364]
80006944:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006948:	fe f8 05 3c 	ld.w	r8,pc[1340]
8000694c:	70 08       	ld.w	r8,r8[0x0]
8000694e:	12 9a       	mov	r10,r9
80006950:	e0 6b 10 77 	mov	r11,4215
80006954:	10 9c       	mov	r12,r8
80006956:	f0 1f 01 4e 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
8000695a:	18 98       	mov	r8,r12
8000695c:	58 08       	cp.w	r8,0
8000695e:	c0 40       	breq	80006966 <sd_mmc_mci_card_init+0x37e>
      return false;
80006960:	30 08       	mov	r8,0
80006962:	e0 8f 02 84 	bral	80006e6a <sd_mmc_mci_card_init+0x882>

    //-- (CMD6)
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
80006966:	fe f8 05 1e 	ld.w	r8,pc[1310]
8000696a:	70 08       	ld.w	r8,r8[0x0]
8000696c:	30 2a       	mov	r10,2
8000696e:	e0 6b 10 46 	mov	r11,4166
80006972:	10 9c       	mov	r12,r8
80006974:	f0 1f 01 46 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
80006978:	18 98       	mov	r8,r12
8000697a:	58 08       	cp.w	r8,0
8000697c:	c0 40       	breq	80006984 <sd_mmc_mci_card_init+0x39c>
      return false;
8000697e:	30 08       	mov	r8,0
80006980:	e0 8f 02 75 	bral	80006e6a <sd_mmc_mci_card_init+0x882>

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
80006984:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006988:	fe fa 04 f4 	ld.w	r10,pc[1268]
8000698c:	30 28       	mov	r8,2
8000698e:	f4 09 0b 08 	st.b	r10[r9],r8
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80006992:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006996:	fe f9 04 e6 	ld.w	r9,pc[1254]
8000699a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000699e:	10 99       	mov	r9,r8
800069a0:	fe f8 04 e4 	ld.w	r8,pc[1252]
800069a4:	70 08       	ld.w	r8,r8[0x0]
800069a6:	12 9b       	mov	r11,r9
800069a8:	10 9c       	mov	r12,r8
800069aa:	f0 1f 01 3f 	mcall	80006ea4 <sd_mmc_mci_card_init+0x8bc>
800069ae:	18 98       	mov	r8,r12
800069b0:	58 08       	cp.w	r8,0
800069b2:	c4 00       	breq	80006a32 <sd_mmc_mci_card_init+0x44a>
      return false;
800069b4:	30 08       	mov	r8,0
800069b6:	e0 8f 02 5a 	bral	80006e6a <sd_mmc_mci_card_init+0x882>
  }
  else // MMC bus width management
  {
    // set 8-bit bus for MMC Card
    if (MMC_CARD_V4 & g_card_type[slot])
800069ba:	ef 38 ff a4 	ld.ub	r8,r7[-92]
800069be:	fe f9 04 ba 	ld.w	r9,pc[1210]
800069c2:	f2 08 07 08 	ld.ub	r8,r9[r8]
800069c6:	e2 18 00 04 	andl	r8,0x4,COH
800069ca:	c3 50       	breq	80006a34 <sd_mmc_mci_card_init+0x44c>
    {
      //-- (CMD6)-R1b
      // set 8-bit bus width (appeared from V4.0 specification)
      if (mci_send_cmd( mci,
800069cc:	fe f8 04 b8 	ld.w	r8,pc[1208]
800069d0:	70 08       	ld.w	r8,r8[0x0]
800069d2:	e0 6a 02 03 	mov	r10,515
800069d6:	ea 1a 03 b7 	orh	r10,0x3b7
800069da:	e0 6b 10 c6 	mov	r11,4294
800069de:	10 9c       	mov	r12,r8
800069e0:	f0 1f 01 2b 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
800069e4:	18 98       	mov	r8,r12
800069e6:	58 08       	cp.w	r8,0
800069e8:	c0 40       	breq	800069f0 <sd_mmc_mci_card_init+0x408>
                        ( (uint32_t)MMC_SWITCH_WRITE     <<24)|
                          ((uint32_t)MMC_SWITCH_BUS_WIDTH<<16)|
                          ((uint32_t)MMC_SWITCH_VAL_8BIT << 8)|
                          ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
800069ea:	30 08       	mov	r8,0
800069ec:	e0 8f 02 3f 	bral	80006e6a <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
800069f0:	fe f8 04 94 	ld.w	r8,pc[1172]
800069f4:	70 08       	ld.w	r8,r8[0x0]
800069f6:	10 9c       	mov	r12,r8
800069f8:	f0 1f 01 29 	mcall	80006e9c <sd_mmc_mci_card_init+0x8b4>
      g_card_bus_width[slot] = MCI_BUS_SIZE_8_BIT;
800069fc:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006a00:	fe fa 04 7c 	ld.w	r10,pc[1148]
80006a04:	30 38       	mov	r8,3
80006a06:	f4 09 0b 08 	st.b	r10[r9],r8
      if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
80006a0a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a0e:	fe f9 04 6e 	ld.w	r9,pc[1134]
80006a12:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006a16:	10 99       	mov	r9,r8
80006a18:	fe f8 04 6c 	ld.w	r8,pc[1132]
80006a1c:	70 08       	ld.w	r8,r8[0x0]
80006a1e:	12 9b       	mov	r11,r9
80006a20:	10 9c       	mov	r12,r8
80006a22:	f0 1f 01 21 	mcall	80006ea4 <sd_mmc_mci_card_init+0x8bc>
80006a26:	18 98       	mov	r8,r12
80006a28:	58 08       	cp.w	r8,0
80006a2a:	c0 50       	breq	80006a34 <sd_mmc_mci_card_init+0x44c>
       return false;
80006a2c:	30 08       	mov	r8,0
80006a2e:	e0 8f 02 1e 	bral	80006e6a <sd_mmc_mci_card_init+0x882>
    if(mci_send_cmd(mci, SD_MMC_SDCARD_SET_BUS_WIDTH_CMD, SD_BUS_4_BIT )!=MCI_SUCCESS)
      return false;

    g_card_bus_width[slot] = MCI_BUS_SIZE_4_BIT;
    if (mci_set_bus_size(mci, g_card_bus_width[slot])!=MCI_SUCCESS)
      return false;
80006a32:	d7 03       	nop
       return false;
    }
  }
#endif

   if (MMC_CARD_V4 & g_card_type[slot])
80006a34:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a38:	fe f9 04 40 	ld.w	r9,pc[1088]
80006a3c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006a40:	e2 18 00 04 	andl	r8,0x4,COH
80006a44:	c1 90       	breq	80006a76 <sd_mmc_mci_card_init+0x48e>
   {
      //-- (CMD6)-R1b
      // set high speed interface timing
      if (mci_send_cmd( mci,
80006a46:	fe f8 04 3e 	ld.w	r8,pc[1086]
80006a4a:	70 08       	ld.w	r8,r8[0x0]
80006a4c:	e0 6a 01 03 	mov	r10,259
80006a50:	ea 1a 03 b9 	orh	r10,0x3b9
80006a54:	e0 6b 10 c6 	mov	r11,4294
80006a58:	10 9c       	mov	r12,r8
80006a5a:	f0 1f 01 0d 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
80006a5e:	18 98       	mov	r8,r12
80006a60:	58 08       	cp.w	r8,0
80006a62:	c0 40       	breq	80006a6a <sd_mmc_mci_card_init+0x482>
                        ((uint32_t)MMC_SWITCH_WRITE     <<24)|
                        ((uint32_t)MMC_SWITCH_HIGH_SPEED<<16)|
                        ((uint32_t)MMC_SWITCH_VAL_HS    << 8)|
                        ((uint32_t)MMC_SWITCH_CMD_SET))!=MCI_SUCCESS)
      {
        return false;
80006a64:	30 08       	mov	r8,0
80006a66:	e0 8f 02 02 	bral	80006e6a <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);
80006a6a:	fe f8 04 1a 	ld.w	r8,pc[1050]
80006a6e:	70 08       	ld.w	r8,r8[0x0]
80006a70:	10 9c       	mov	r12,r8
80006a72:	f0 1f 01 0b 	mcall	80006e9c <sd_mmc_mci_card_init+0x8b4>
   }


   if( SD_CARD_V2 & g_card_type[slot] )
80006a76:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006a7a:	fe f9 03 fe 	ld.w	r9,pc[1022]
80006a7e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006a82:	e2 18 00 08 	andl	r8,0x8,COH
80006a86:	e0 80 01 ae 	breq	80006de2 <sd_mmc_mci_card_init+0x7fa>
#define SDMMC_SWITCH_FUNC_G3_KEEP     (0xf << 8)  /**< Group 3 No influence */
#define SDMMC_SWITCH_FUNC_G4_KEEP     (0xf << 12) /**< Group 4 No influence */
#define SDMMC_SWITCH_FUNC_G5_KEEP     (0xf << 16) /**< Group 5 No influence */
#define SDMMC_SWITCH_FUNC_G6_KEEP     (0xf << 20) /**< Group 6 No influence */

      mci_set_block_size(mci, 512/8); // CMD6 512 bits status
80006a8a:	fe f8 03 fa 	ld.w	r8,pc[1018]
80006a8e:	70 08       	ld.w	r8,r8[0x0]
80006a90:	34 0b       	mov	r11,64
80006a92:	10 9c       	mov	r12,r8
80006a94:	f0 1f 01 05 	mcall	80006ea8 <sd_mmc_mci_card_init+0x8c0>
      mci_set_block_count(mci, 1);
80006a98:	fe f8 03 ec 	ld.w	r8,pc[1004]
80006a9c:	70 08       	ld.w	r8,r8[0x0]
80006a9e:	30 1b       	mov	r11,1
80006aa0:	10 9c       	mov	r12,r8
80006aa2:	f0 1f 01 03 	mcall	80006eac <sd_mmc_mci_card_init+0x8c4>

      //-- (CMD6)
      // Check if we can enter into the High Speed mode.
      if (mci_send_cmd( mci
80006aa6:	fe f8 03 de 	ld.w	r8,pc[990]
80006aaa:	70 08       	ld.w	r8,r8[0x0]
80006aac:	30 1a       	mov	r10,1
80006aae:	e4 7b 10 46 	mov	r11,331846
80006ab2:	10 9c       	mov	r12,r8
80006ab4:	f0 1f 00 f6 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
80006ab8:	18 98       	mov	r8,r12
80006aba:	58 08       	cp.w	r8,0
80006abc:	c0 40       	breq	80006ac4 <sd_mmc_mci_card_init+0x4dc>
                      , SD_SWITCH_FUNC
                      , SDMMC_SWITCH_FUNC_MODE_CHECK | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006abe:	30 08       	mov	r8,0
80006ac0:	e0 8f 01 d5 	bral	80006e6a <sd_mmc_mci_card_init+0x882>
      }
      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006ac4:	fe f8 03 c0 	ld.w	r8,pc[960]
80006ac8:	70 08       	ld.w	r8,r8[0x0]
80006aca:	10 9c       	mov	r12,r8
80006acc:	f0 1f 00 f4 	mcall	80006e9c <sd_mmc_mci_card_init+0x8b4>

      bool b_hs_supported=false;
80006ad0:	30 08       	mov	r8,0
80006ad2:	ef 68 ff c5 	st.b	r7[-59],r8
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006ad6:	30 08       	mov	r8,0
80006ad8:	ef 68 ff c6 	st.b	r7[-58],r8
80006adc:	c4 18       	rjmp	80006b5e <sd_mmc_mci_card_init+0x576>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006ade:	fe f8 03 a6 	ld.w	r8,pc[934]
80006ae2:	70 08       	ld.w	r8,r8[0x0]
80006ae4:	ef 48 ff c8 	st.w	r7[-56],r8
80006ae8:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006aec:	ef 48 ff cc 	st.w	r7[-52],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006af0:	fe f8 03 c0 	ld.w	r8,pc[960]
80006af4:	70 08       	ld.w	r8,r8[0x0]
80006af6:	10 99       	mov	r9,r8
80006af8:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006afc:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006b00:	71 08       	ld.w	r8,r8[0x40]
80006b02:	f3 e8 10 08 	or	r8,r9,r8
80006b06:	10 99       	mov	r9,r8
80006b08:	fe f8 03 a8 	ld.w	r8,pc[936]
80006b0c:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006b0e:	fe f8 03 a2 	ld.w	r8,pc[930]
80006b12:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006b14:	e2 18 00 02 	andl	r8,0x2,COH
80006b18:	5f 18       	srne	r8
80006b1a:	58 08       	cp.w	r8,0
80006b1c:	ce 10       	breq	80006ade <sd_mmc_mci_card_init+0x4f6>
          data = mci_rd_data(mci);
80006b1e:	fe f8 03 66 	ld.w	r8,pc[870]
80006b22:	70 08       	ld.w	r8,r8[0x0]
80006b24:	ef 48 ff d0 	st.w	r7[-48],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006b28:	ee f8 ff d0 	ld.w	r8,r7[-48]
80006b2c:	70 c8       	ld.w	r8,r8[0x30]
80006b2e:	ef 48 ff ac 	st.w	r7[-84],r8
          if(i==16)
80006b32:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006b36:	31 08       	mov	r8,16
80006b38:	f0 09 18 00 	cp.b	r9,r8
80006b3c:	c0 c1       	brne	80006b54 <sd_mmc_mci_card_init+0x56c>
          {
            if(((data>>24)&0xf)==1)
80006b3e:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006b42:	b9 88       	lsr	r8,0x18
80006b44:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006b48:	58 18       	cp.w	r8,1
80006b4a:	c1 21       	brne	80006b6e <sd_mmc_mci_card_init+0x586>
              b_hs_supported = true;
80006b4c:	30 18       	mov	r8,1
80006b4e:	ef 68 ff c5 	st.b	r7[-59],r8
            break;
80006b52:	c0 f8       	rjmp	80006b70 <sd_mmc_mci_card_init+0x588>
      mci_wait_busy_signal(mci);// read busy state on DAT0

      bool b_hs_supported=false;
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006b54:	ef 38 ff c6 	ld.ub	r8,r7[-58]
80006b58:	2f c8       	sub	r8,-4
80006b5a:	ef 68 ff c6 	st.b	r7[-58],r8
80006b5e:	ef 39 ff c6 	ld.ub	r9,r7[-58]
80006b62:	33 f8       	mov	r8,63
80006b64:	f0 09 18 00 	cp.b	r9,r8
80006b68:	fe 98 ff bb 	brls	80006ade <sd_mmc_mci_card_init+0x4f6>
80006b6c:	c0 28       	rjmp	80006b70 <sd_mmc_mci_card_init+0x588>
          data = mci_rd_data(mci);
          if(i==16)
          {
            if(((data>>24)&0xf)==1)
              b_hs_supported = true;
            break;
80006b6e:	d7 03       	nop
          }
        }
      }

      if (b_hs_supported==false )
80006b70:	ef 38 ff c5 	ld.ub	r8,r7[-59]
80006b74:	ec 18 00 01 	eorl	r8,0x1
80006b78:	5c 58       	castu.b	r8
80006b7a:	e0 81 01 33 	brne	80006de0 <sd_mmc_mci_card_init+0x7f8>
        goto sd_mmc_init_step3;

      if (mci_send_cmd( mci
80006b7e:	fe f8 03 06 	ld.w	r8,pc[774]
80006b82:	70 08       	ld.w	r8,r8[0x0]
80006b84:	e0 6a ff f1 	mov	r10,65521
80006b88:	ea 1a 80 ff 	orh	r10,0x80ff
80006b8c:	e4 7b 10 46 	mov	r11,331846
80006b90:	10 9c       	mov	r12,r8
80006b92:	f0 1f 00 bf 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
80006b96:	18 98       	mov	r8,r12
80006b98:	58 08       	cp.w	r8,0
80006b9a:	c0 40       	breq	80006ba2 <sd_mmc_mci_card_init+0x5ba>
                      | SDMMC_SWITCH_FUNC_G3_KEEP
                      | SDMMC_SWITCH_FUNC_G2_KEEP
                      | SDMMC_SWITCH_FUNC_HIGH_SPEED
                      )!=MCI_SUCCESS)
      {
        return false;
80006b9c:	30 08       	mov	r8,0
80006b9e:	e0 8f 01 66 	bral	80006e6a <sd_mmc_mci_card_init+0x882>
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006ba2:	30 08       	mov	r8,0
80006ba4:	ef 68 ff c7 	st.b	r7[-57],r8
80006ba8:	c3 08       	rjmp	80006c08 <sd_mmc_mci_card_init+0x620>
        {
          volatile uint32_t data;
          while(!(mci_rx_ready(mci)));
80006baa:	fe f8 02 da 	ld.w	r8,pc[730]
80006bae:	70 08       	ld.w	r8,r8[0x0]
80006bb0:	ef 48 ff d4 	st.w	r7[-44],r8
80006bb4:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006bb8:	ef 48 ff d8 	st.w	r7[-40],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80006bbc:	fe f8 02 f4 	ld.w	r8,pc[756]
80006bc0:	70 08       	ld.w	r8,r8[0x0]
80006bc2:	10 99       	mov	r9,r8
80006bc4:	e6 19 01 e0 	andh	r9,0x1e0,COH
80006bc8:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006bcc:	71 08       	ld.w	r8,r8[0x40]
80006bce:	f3 e8 10 08 	or	r8,r9,r8
80006bd2:	10 99       	mov	r9,r8
80006bd4:	fe f8 02 dc 	ld.w	r8,pc[732]
80006bd8:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80006bda:	fe f8 02 d6 	ld.w	r8,pc[726]
80006bde:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_rx_ready(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_RXRDY_MASK) != 0;
80006be0:	e2 18 00 02 	andl	r8,0x2,COH
80006be4:	5f 18       	srne	r8
80006be6:	58 08       	cp.w	r8,0
80006be8:	ce 10       	breq	80006baa <sd_mmc_mci_card_init+0x5c2>
          data = mci_rd_data(mci);
80006bea:	fe f8 02 9a 	ld.w	r8,pc[666]
80006bee:	70 08       	ld.w	r8,r8[0x0]
80006bf0:	ef 48 ff dc 	st.w	r7[-36],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t mci_rd_data(volatile avr32_mci_t *mci)
{
  return (mci->rdr);
80006bf4:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006bf8:	70 c8       	ld.w	r8,r8[0x30]
80006bfa:	ef 48 ff a8 	st.w	r7[-88],r8
      {
        return false;
      }
      {
        uint8_t i;
        for ( i = 0; i<(512L/8); i+=4)
80006bfe:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80006c02:	2f c8       	sub	r8,-4
80006c04:	ef 68 ff c7 	st.b	r7[-57],r8
80006c08:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80006c0c:	33 f8       	mov	r8,63
80006c0e:	f0 09 18 00 	cp.b	r9,r8
80006c12:	fe 98 ff cc 	brls	80006baa <sd_mmc_mci_card_init+0x5c2>

      /* A 8 cycle delay is required after switch command
       * @ 200KHz clock this should be 40 uS, but we use
       * 80 to handle imprecise clock setting.
       */
      cpu_delay_us(80, g_cpu_hz);
80006c16:	fe f8 02 9e 	ld.w	r8,pc[670]
80006c1a:	70 08       	ld.w	r8,r8[0x0]
80006c1c:	35 09       	mov	r9,80
80006c1e:	ef 49 ff e4 	st.w	r7[-28],r9
80006c22:	ef 48 ff e0 	st.w	r7[-32],r8
80006c26:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006c2a:	ef 48 ff ec 	st.w	r7[-20],r8
80006c2e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006c32:	ef 48 ff e8 	st.w	r7[-24],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80006c36:	ee f0 ff ec 	ld.w	r0,r7[-20]
80006c3a:	30 01       	mov	r1,0
80006c3c:	ee f2 ff e8 	ld.w	r2,r7[-24]
80006c40:	30 03       	mov	r3,0
80006c42:	e2 02 02 4a 	mul	r10,r1,r2
80006c46:	e6 00 02 48 	mul	r8,r3,r0
80006c4a:	10 0a       	add	r10,r8
80006c4c:	e0 02 06 48 	mulu.d	r8,r0,r2
80006c50:	12 0a       	add	r10,r9
80006c52:	14 99       	mov	r9,r10
80006c54:	ee 7a 42 3f 	mov	r10,999999
80006c58:	30 0b       	mov	r11,0
80006c5a:	f0 0a 00 0a 	add	r10,r8,r10
80006c5e:	f2 0b 00 4b 	adc	r11,r9,r11
80006c62:	ee 78 42 40 	mov	r8,1000000
80006c66:	30 09       	mov	r9,0
80006c68:	f0 1f 00 94 	mcall	80006eb8 <sd_mmc_mci_card_init+0x8d0>
80006c6c:	14 98       	mov	r8,r10
80006c6e:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
80006c70:	ef 48 ff f4 	st.w	r7[-12],r8
80006c74:	ee c8 00 50 	sub	r8,r7,80
80006c78:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80006c7c:	e1 b8 00 42 	mfsr	r8,0x108
80006c80:	10 99       	mov	r9,r8
80006c82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006c86:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80006c88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006c8c:	70 09       	ld.w	r9,r8[0x0]
80006c8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c92:	10 09       	add	r9,r8
80006c94:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006c98:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80006c9a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006c9e:	30 08       	mov	r8,0
80006ca0:	f3 68 00 08 	st.b	r9[8],r8
80006ca4:	ee c8 00 50 	sub	r8,r7,80
80006ca8:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80006cac:	e1 b8 00 42 	mfsr	r8,0x108
80006cb0:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80006cb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006cb8:	f1 39 00 08 	ld.ub	r9,r8[8]
80006cbc:	30 28       	mov	r8,2
80006cbe:	f0 09 18 00 	cp.b	r9,r8
80006cc2:	c0 31       	brne	80006cc8 <sd_mmc_mci_card_init+0x6e0>
    return false;
80006cc4:	30 08       	mov	r8,0
80006cc6:	c4 38       	rjmp	80006d4c <sd_mmc_mci_card_init+0x764>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80006cc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ccc:	f1 39 00 08 	ld.ub	r9,r8[8]
80006cd0:	30 18       	mov	r8,1
80006cd2:	f0 09 18 00 	cp.b	r9,r8
80006cd6:	c0 31       	brne	80006cdc <sd_mmc_mci_card_init+0x6f4>
    return true;
80006cd8:	30 18       	mov	r8,1
80006cda:	c3 98       	rjmp	80006d4c <sd_mmc_mci_card_init+0x764>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80006cdc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ce0:	70 09       	ld.w	r9,r8[0x0]
80006ce2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ce6:	70 18       	ld.w	r8,r8[0x4]
80006ce8:	10 39       	cp.w	r9,r8
80006cea:	e0 88 00 1a 	brls	80006d1e <sd_mmc_mci_card_init+0x736>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80006cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006cf2:	70 08       	ld.w	r8,r8[0x0]
80006cf4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006cf8:	10 39       	cp.w	r9,r8
80006cfa:	c1 02       	brcc	80006d1a <sd_mmc_mci_card_init+0x732>
80006cfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d00:	70 18       	ld.w	r8,r8[0x4]
80006d02:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006d06:	10 39       	cp.w	r9,r8
80006d08:	e0 88 00 09 	brls	80006d1a <sd_mmc_mci_card_init+0x732>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006d0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006d10:	30 18       	mov	r8,1
80006d12:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006d16:	30 18       	mov	r8,1
80006d18:	c1 a8       	rjmp	80006d4c <sd_mmc_mci_card_init+0x764>
    }
    return false;
80006d1a:	30 08       	mov	r8,0
80006d1c:	c1 88       	rjmp	80006d4c <sd_mmc_mci_card_init+0x764>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80006d1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d22:	70 08       	ld.w	r8,r8[0x0]
80006d24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006d28:	10 39       	cp.w	r9,r8
80006d2a:	c0 93       	brcs	80006d3c <sd_mmc_mci_card_init+0x754>
80006d2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d30:	70 18       	ld.w	r8,r8[0x4]
80006d32:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006d36:	10 39       	cp.w	r9,r8
80006d38:	e0 88 00 09 	brls	80006d4a <sd_mmc_mci_card_init+0x762>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80006d3c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006d40:	30 18       	mov	r8,1
80006d42:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80006d46:	30 18       	mov	r8,1
80006d48:	c0 28       	rjmp	80006d4c <sd_mmc_mci_card_init+0x764>
    }
    return false;
80006d4a:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_us(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_us_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80006d4c:	58 08       	cp.w	r8,0
80006d4e:	ca b0       	breq	80006ca4 <sd_mmc_mci_card_init+0x6bc>
      union u_cfg{
        unsigned long     cfg;
        avr32_mci_cfg_t   CFG;
      };
      union u_cfg val;
      val.cfg = mci->cfg;
80006d50:	4c d8       	lddpc	r8,80006e84 <sd_mmc_mci_card_init+0x89c>
80006d52:	70 08       	ld.w	r8,r8[0x0]
80006d54:	71 58       	ld.w	r8,r8[0x54]
80006d56:	ef 48 ff bc 	st.w	r7[-68],r8
      val.CFG.hsmode = 1;
80006d5a:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006d5e:	30 19       	mov	r9,1
80006d60:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80006d64:	ef 48 ff bc 	st.w	r7[-68],r8
      mci->cfg = val.cfg;
80006d68:	4c 78       	lddpc	r8,80006e84 <sd_mmc_mci_card_init+0x89c>
80006d6a:	70 08       	ld.w	r8,r8[0x0]
80006d6c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80006d70:	f1 49 00 54 	st.w	r8[84],r9

      // deselect card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, 0)!=MCI_SUCCESS)
80006d74:	4c 48       	lddpc	r8,80006e84 <sd_mmc_mci_card_init+0x89c>
80006d76:	70 08       	ld.w	r8,r8[0x0]
80006d78:	30 0a       	mov	r10,0
80006d7a:	e0 6b 10 c7 	mov	r11,4295
80006d7e:	10 9c       	mov	r12,r8
80006d80:	f0 1f 00 43 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
80006d84:	18 98       	mov	r8,r12
80006d86:	58 08       	cp.w	r8,0
80006d88:	c0 30       	breq	80006d8e <sd_mmc_mci_card_init+0x7a6>
        return false;
80006d8a:	30 08       	mov	r8,0
80006d8c:	c6 f8       	rjmp	80006e6a <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006d8e:	4b e8       	lddpc	r8,80006e84 <sd_mmc_mci_card_init+0x89c>
80006d90:	70 08       	ld.w	r8,r8[0x0]
80006d92:	10 9c       	mov	r12,r8
80006d94:	f0 1f 00 42 	mcall	80006e9c <sd_mmc_mci_card_init+0x8b4>

      //-- (CMD9)
      // Read & analyze CSD register
      if (sd_mmc_mci_get_csd(slot)!=true)
80006d98:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006d9c:	10 9c       	mov	r12,r8
80006d9e:	f0 1f 00 3f 	mcall	80006e98 <sd_mmc_mci_card_init+0x8b0>
80006da2:	18 98       	mov	r8,r12
80006da4:	ec 18 00 01 	eorl	r8,0x1
80006da8:	5c 58       	castu.b	r8
80006daa:	c0 30       	breq	80006db0 <sd_mmc_mci_card_init+0x7c8>
        return false;
80006dac:	30 08       	mov	r8,0
80006dae:	c5 e8       	rjmp	80006e6a <sd_mmc_mci_card_init+0x882>

      // select card
      if (mci_send_cmd(mci, SD_MMC_SEL_DESEL_CARD_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80006db0:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006db4:	4b 88       	lddpc	r8,80006e94 <sd_mmc_mci_card_init+0x8ac>
80006db6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80006dba:	4b 38       	lddpc	r8,80006e84 <sd_mmc_mci_card_init+0x89c>
80006dbc:	70 08       	ld.w	r8,r8[0x0]
80006dbe:	12 9a       	mov	r10,r9
80006dc0:	e0 6b 10 c7 	mov	r11,4295
80006dc4:	10 9c       	mov	r12,r8
80006dc6:	f0 1f 00 32 	mcall	80006e8c <sd_mmc_mci_card_init+0x8a4>
80006dca:	18 98       	mov	r8,r12
80006dcc:	58 08       	cp.w	r8,0
80006dce:	c0 30       	breq	80006dd4 <sd_mmc_mci_card_init+0x7ec>
        return false;
80006dd0:	30 08       	mov	r8,0
80006dd2:	c4 c8       	rjmp	80006e6a <sd_mmc_mci_card_init+0x882>

      // Wait end of busy
      mci_wait_busy_signal(mci);// read busy state on DAT0
80006dd4:	4a c8       	lddpc	r8,80006e84 <sd_mmc_mci_card_init+0x89c>
80006dd6:	70 08       	ld.w	r8,r8[0x0]
80006dd8:	10 9c       	mov	r12,r8
80006dda:	f0 1f 00 31 	mcall	80006e9c <sd_mmc_mci_card_init+0x8b4>
80006dde:	c0 28       	rjmp	80006de2 <sd_mmc_mci_card_init+0x7fa>
          }
        }
      }

      if (b_hs_supported==false )
        goto sd_mmc_init_step3;
80006de0:	d7 03       	nop
      mci_wait_busy_signal(mci);// read busy state on DAT0
  }

sd_mmc_init_step3:
  // Set clock
  mci_set_speed(mci, g_pbb_hz, g_card_freq[slot]*1000);
80006de2:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006de6:	4b 68       	lddpc	r8,80006ebc <sd_mmc_mci_card_init+0x8d4>
80006de8:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80006dec:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006df0:	e0 68 03 e8 	mov	r8,1000
80006df4:	f2 08 02 48 	mul	r8,r9,r8
80006df8:	10 9a       	mov	r10,r8
80006dfa:	4a 28       	lddpc	r8,80006e80 <sd_mmc_mci_card_init+0x898>
80006dfc:	70 09       	ld.w	r9,r8[0x0]
80006dfe:	4a 28       	lddpc	r8,80006e84 <sd_mmc_mci_card_init+0x89c>
80006e00:	70 08       	ld.w	r8,r8[0x0]
80006e02:	12 9b       	mov	r11,r9
80006e04:	10 9c       	mov	r12,r8
80006e06:	f0 1f 00 2f 	mcall	80006ec0 <sd_mmc_mci_card_init+0x8d8>

  //-- (CMD13)
  // Check if card is ready, the card must be in TRAN state
  if(sd_mmc_mci_cmd_send_status(slot)!=true)
80006e0a:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006e0e:	10 9c       	mov	r12,r8
80006e10:	f0 1f 00 2d 	mcall	80006ec4 <sd_mmc_mci_card_init+0x8dc>
80006e14:	18 98       	mov	r8,r12
80006e16:	ec 18 00 01 	eorl	r8,0x1
80006e1a:	5c 58       	castu.b	r8
80006e1c:	c0 30       	breq	80006e22 <sd_mmc_mci_card_init+0x83a>
    return false;
80006e1e:	30 08       	mov	r8,0
80006e20:	c2 58       	rjmp	80006e6a <sd_mmc_mci_card_init+0x882>

  if ((mci_read_response(mci) & MMC_TRAN_STATE_MSK) != MMC_TRAN_STATE)
80006e22:	49 98       	lddpc	r8,80006e84 <sd_mmc_mci_card_init+0x89c>
80006e24:	70 08       	ld.w	r8,r8[0x0]
80006e26:	10 9c       	mov	r12,r8
80006e28:	f0 1f 00 1a 	mcall	80006e90 <sd_mmc_mci_card_init+0x8a8>
80006e2c:	18 98       	mov	r8,r12
80006e2e:	e4 18 e0 02 	andh	r8,0xe002
80006e32:	e0 18 0e 00 	andl	r8,0xe00
80006e36:	e0 48 08 00 	cp.w	r8,2048
80006e3a:	c0 30       	breq	80006e40 <sd_mmc_mci_card_init+0x858>
    return false;
80006e3c:	30 08       	mov	r8,0
80006e3e:	c1 68       	rjmp	80006e6a <sd_mmc_mci_card_init+0x882>

  //-- (CMD16)
  // Set the card block length to 512B
  if (sd_mmc_set_block_len (slot, SD_MMC_SECTOR_SIZE)!=true)
80006e40:	ef 38 ff a4 	ld.ub	r8,r7[-92]
80006e44:	e0 6b 02 00 	mov	r11,512
80006e48:	10 9c       	mov	r12,r8
80006e4a:	f0 1f 00 20 	mcall	80006ec8 <sd_mmc_mci_card_init+0x8e0>
80006e4e:	18 98       	mov	r8,r12
80006e50:	ec 18 00 01 	eorl	r8,0x1
80006e54:	5c 58       	castu.b	r8
80006e56:	c0 30       	breq	80006e5c <sd_mmc_mci_card_init+0x874>
    return false;
80006e58:	30 08       	mov	r8,0
80006e5a:	c0 88       	rjmp	80006e6a <sd_mmc_mci_card_init+0x882>

  // USB Test Unit Attention requires a state "busy" between "not present" and "ready" state
  // otherwise never report card change
  sd_mmc_mci_init_done[slot] = true;
80006e5c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80006e60:	48 5a       	lddpc	r10,80006e74 <sd_mmc_mci_card_init+0x88c>
80006e62:	30 18       	mov	r8,1
80006e64:	f4 09 0b 08 	st.b	r10[r9],r8

  return true;
80006e68:	30 18       	mov	r8,1
}
80006e6a:	10 9c       	mov	r12,r8
80006e6c:	2e 9d       	sub	sp,-92
80006e6e:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80006e72:	00 00       	add	r0,r0
80006e74:	00 00       	add	r0,r0
80006e76:	06 14       	sub	r4,r3
80006e78:	00 00       	add	r0,r0
80006e7a:	0d e0       	ld.ub	r0,r6[0x6]
80006e7c:	00 00       	add	r0,r0
80006e7e:	0b d8       	ld.ub	r8,r5[0x5]
80006e80:	00 00       	add	r0,r0
80006e82:	06 18       	sub	r8,r3
80006e84:	00 00       	add	r0,r0
80006e86:	01 34       	ld.ub	r4,r0++
80006e88:	80 00       	ld.sh	r0,r0[0x0]
80006e8a:	92 30       	ld.sh	r0,r9[0x6]
80006e8c:	80 00       	ld.sh	r0,r0[0x0]
80006e8e:	93 64       	st.w	r9[0x18],r4
80006e90:	80 00       	ld.sh	r0,r0[0x0]
80006e92:	94 9c       	ld.uh	r12,r10[0x2]
80006e94:	00 00       	add	r0,r0
80006e96:	09 c8       	ld.ub	r8,r4[0x4]
80006e98:	80 00       	ld.sh	r0,r0[0x0]
80006e9a:	5f ac       	srle	r12
80006e9c:	80 00       	ld.sh	r0,r0[0x0]
80006e9e:	94 b8       	ld.uh	r8,r10[0x6]
80006ea0:	80 00       	ld.sh	r0,r0[0x0]
80006ea2:	62 9c       	ld.w	r12,r1[0x24]
80006ea4:	80 00       	ld.sh	r0,r0[0x0]
80006ea6:	94 3c       	ld.sh	r12,r10[0x6]
80006ea8:	80 00       	ld.sh	r0,r0[0x0]
80006eaa:	92 e4       	ld.uh	r4,r9[0xc]
80006eac:	80 00       	ld.sh	r0,r0[0x0]
80006eae:	93 2e       	st.w	r9[0x8],lr
80006eb0:	00 00       	add	r0,r0
80006eb2:	07 b0       	ld.ub	r0,r3[0x3]
80006eb4:	00 00       	add	r0,r0
80006eb6:	06 1c       	sub	r12,r3
80006eb8:	80 00       	ld.sh	r0,r0[0x0]
80006eba:	e5 4c 00 00 	st.w	r2[0],r12
80006ebe:	0b da       	ld.ub	r10,r5[0x5]
80006ec0:	80 00       	ld.sh	r0,r0[0x0]
80006ec2:	91 4c       	st.w	r8[0x10],r12
80006ec4:	80 00       	ld.sh	r0,r0[0x0]
80006ec6:	7b 20       	ld.w	r0,sp[0x48]
80006ec8:	80 00       	ld.sh	r0,r0[0x0]
80006eca:	64 68       	ld.w	r8,r2[0x18]

80006ecc <dma_mci_2_ram>:
    return true;
}
#endif

static void dma_mci_2_ram(void *ram, size_t size)
{
80006ecc:	eb cd 40 80 	pushm	r7,lr
80006ed0:	1a 97       	mov	r7,sp
80006ed2:	20 3d       	sub	sp,12
80006ed4:	ef 4c ff f8 	st.w	r7[-8],r12
80006ed8:	ef 4b ff f4 	st.w	r7[-12],r11
  int *pRam = ram;
80006edc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ee0:	ef 48 ff fc 	st.w	r7[-4],r8

  // Src Address: the MCI registers.
  AVR32_DMACA.sar1 = (uint32_t)&AVR32_MCI.fifo;
80006ee4:	fc 18 ff 10 	movh	r8,0xff10
80006ee8:	fe 69 42 00 	mov	r9,-114176
80006eec:	f1 49 00 58 	st.w	r8[88],r9

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;
80006ef0:	fc 18 ff 10 	movh	r8,0xff10
80006ef4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006ef8:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80006efc:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80006f00:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006f04:	a3 89       	lsr	r9,0x2

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.dar1 = (unsigned long)pRam;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80006f06:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80006f0a:	fc 18 ff 10 	movh	r8,0xff10
80006f0e:	e0 69 02 02 	mov	r9,514
80006f12:	f1 49 03 a0 	st.w	r8[928],r9
}
80006f16:	2f dd       	sub	sp,-12
80006f18:	e3 cd 80 80 	ldm	sp++,r7,pc

80006f1c <is_dma_mci_2_ram_complete>:

static bool is_dma_mci_2_ram_complete( void )
{
80006f1c:	eb cd 40 80 	pushm	r7,lr
80006f20:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
80006f22:	fc 18 ff 10 	movh	r8,0xff10
80006f26:	f0 f8 03 a0 	ld.w	r8,r8[928]
80006f2a:	e2 18 00 02 	andl	r8,0x2,COH
80006f2e:	c0 30       	breq	80006f34 <is_dma_mci_2_ram_complete+0x18>
    return false;
80006f30:	30 08       	mov	r8,0
80006f32:	c0 28       	rjmp	80006f36 <is_dma_mci_2_ram_complete+0x1a>

  return true;
80006f34:	30 18       	mov	r8,1
}
80006f36:	10 9c       	mov	r12,r8
80006f38:	e3 cd 80 80 	ldm	sp++,r7,pc

80006f3c <dma_ram_2_mci>:
    return true;
}
#endif

static void dma_ram_2_mci(const void *ram, size_t size)
{
80006f3c:	eb cd 40 80 	pushm	r7,lr
80006f40:	1a 97       	mov	r7,sp
80006f42:	20 3d       	sub	sp,12
80006f44:	ef 4c ff f8 	st.w	r7[-8],r12
80006f48:	ef 4b ff f4 	st.w	r7[-12],r11
  const unsigned int *pRam = ram;
80006f4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006f50:	ef 48 ff fc 	st.w	r7[-4],r8

  // Dst Address: the OutputData[] array.
  AVR32_DMACA.sar1 = (unsigned long)pRam;
80006f54:	fc 18 ff 10 	movh	r8,0xff10
80006f58:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006f5c:	f1 49 00 58 	st.w	r8[88],r9

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;
80006f60:	fc 18 ff 10 	movh	r8,0xff10
80006f64:	fe 69 42 00 	mov	r9,-114176
80006f68:	f1 49 00 60 	st.w	r8[96],r9

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80006f6c:	fc 18 ff 10 	movh	r8,0xff10
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
80006f70:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006f74:	a3 89       	lsr	r9,0x2

  // Src Address: the MCI registers.
  AVR32_DMACA.dar1 = (uint32_t)&AVR32_MCI.fifo;

  // Channel 1 Ctrl register high
  AVR32_DMACA.ctl1h =
80006f76:	f1 49 00 74 	st.w	r8[116],r9
    ( (size/4) << AVR32_DMACA_CTL1H_BLOCK_TS_OFFSET) // Block transfer size
    ;

  // Enable Channel 1 : start the process.
  AVR32_DMACA.chenreg = ((2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET) | (2<<AVR32_DMACA_CHENREG_CH_EN_WE_OFFSET));
80006f7a:	fc 18 ff 10 	movh	r8,0xff10
80006f7e:	e0 69 02 02 	mov	r9,514
80006f82:	f1 49 03 a0 	st.w	r8[928],r9
}
80006f86:	2f dd       	sub	sp,-12
80006f88:	e3 cd 80 80 	ldm	sp++,r7,pc

80006f8c <is_dma_ram_2_mci_complete>:

static bool is_dma_ram_2_mci_complete( void )
{
80006f8c:	eb cd 40 80 	pushm	r7,lr
80006f90:	1a 97       	mov	r7,sp
  // Wait for the end of the AES->RAM transfer (channel 1).
  if (AVR32_DMACA.chenreg & (2<<AVR32_DMACA_CHENREG_CH_EN_OFFSET))
80006f92:	fc 18 ff 10 	movh	r8,0xff10
80006f96:	f0 f8 03 a0 	ld.w	r8,r8[928]
80006f9a:	e2 18 00 02 	andl	r8,0x2,COH
80006f9e:	c0 30       	breq	80006fa4 <is_dma_ram_2_mci_complete+0x18>
    return false;
80006fa0:	30 08       	mov	r8,0
80006fa2:	c0 28       	rjmp	80006fa6 <is_dma_ram_2_mci_complete+0x1a>

  return true;
80006fa4:	30 18       	mov	r8,1
}
80006fa6:	10 9c       	mov	r12,r8
80006fa8:	e3 cd 80 80 	ldm	sp++,r7,pc

80006fac <sd_mmc_mci_mem_check>:

  return true;
}

bool sd_mmc_mci_mem_check(uint8_t slot)
{
80006fac:	eb cd 40 80 	pushm	r7,lr
80006fb0:	1a 97       	mov	r7,sp
80006fb2:	20 2d       	sub	sp,8
80006fb4:	18 98       	mov	r8,r12
80006fb6:	ef 68 ff f8 	st.b	r7[-8],r8
  uint8_t timeout_init = 0;
80006fba:	30 08       	mov	r8,0
80006fbc:	ef 68 ff ff 	st.b	r7[-1],r8

  if (slot > MCI_LAST_SLOTS)
80006fc0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006fc4:	30 18       	mov	r8,1
80006fc6:	f0 09 18 00 	cp.b	r9,r8
80006fca:	e0 88 00 04 	brls	80006fd2 <sd_mmc_mci_mem_check+0x26>
    return false;
80006fce:	30 08       	mov	r8,0
80006fd0:	c4 d8       	rjmp	8000706a <sd_mmc_mci_mem_check+0xbe>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80006fd2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006fd6:	4a 89       	lddpc	r9,80007074 <sd_mmc_mci_mem_check+0xc8>
80006fd8:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006fdc:	10 9a       	mov	r10,r8
80006fde:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006fe2:	4a 68       	lddpc	r8,80007078 <sd_mmc_mci_mem_check+0xcc>
80006fe4:	70 08       	ld.w	r8,r8[0x0]
80006fe6:	12 9b       	mov	r11,r9
80006fe8:	10 9c       	mov	r12,r8
80006fea:	f0 1f 00 25 	mcall	8000707c <sd_mmc_mci_mem_check+0xd0>

  // Check card presence
  if (is_sd_mmc_mci_card_present(slot) == false)
80006fee:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006ff2:	10 9c       	mov	r12,r8
80006ff4:	f0 1f 00 23 	mcall	80007080 <sd_mmc_mci_mem_check+0xd4>
80006ff8:	18 98       	mov	r8,r12
80006ffa:	ec 18 00 01 	eorl	r8,0x1
80006ffe:	5c 58       	castu.b	r8
80007000:	c0 90       	breq	80007012 <sd_mmc_mci_mem_check+0x66>
  {
    sd_mmc_mci_init_done[slot] = false;
80007002:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007006:	4a 0a       	lddpc	r10,80007084 <sd_mmc_mci_mem_check+0xd8>
80007008:	30 08       	mov	r8,0
8000700a:	f4 09 0b 08 	st.b	r10[r9],r8
    return false;
8000700e:	30 08       	mov	r8,0
80007010:	c2 d8       	rjmp	8000706a <sd_mmc_mci_mem_check+0xbe>
  }

  if (sd_mmc_mci_init_done[slot] == false)
80007012:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007016:	49 c9       	lddpc	r9,80007084 <sd_mmc_mci_mem_check+0xd8>
80007018:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000701c:	ec 18 00 01 	eorl	r8,0x1
80007020:	5c 58       	castu.b	r8
80007022:	c1 a0       	breq	80007056 <sd_mmc_mci_mem_check+0xaa>
  {
    while (sd_mmc_mci_card_init(slot)!=true)
80007024:	c0 f8       	rjmp	80007042 <sd_mmc_mci_mem_check+0x96>
    {
      timeout_init++;
80007026:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000702a:	2f f8       	sub	r8,-1
8000702c:	ef 68 ff ff 	st.b	r7[-1],r8
      if (timeout_init>10) return false;
80007030:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007034:	30 a8       	mov	r8,10
80007036:	f0 09 18 00 	cp.b	r9,r8
8000703a:	e0 88 00 04 	brls	80007042 <sd_mmc_mci_mem_check+0x96>
8000703e:	30 08       	mov	r8,0
80007040:	c1 58       	rjmp	8000706a <sd_mmc_mci_mem_check+0xbe>
    return false;
  }

  if (sd_mmc_mci_init_done[slot] == false)
  {
    while (sd_mmc_mci_card_init(slot)!=true)
80007042:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007046:	10 9c       	mov	r12,r8
80007048:	f0 1f 00 10 	mcall	80007088 <sd_mmc_mci_mem_check+0xdc>
8000704c:	18 98       	mov	r8,r12
8000704e:	ec 18 00 01 	eorl	r8,0x1
80007052:	5c 58       	castu.b	r8
80007054:	ce 91       	brne	80007026 <sd_mmc_mci_mem_check+0x7a>
    {
      timeout_init++;
      if (timeout_init>10) return false;
    }
  }
  if (sd_mmc_mci_init_done[slot] == true)
80007056:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000705a:	48 b9       	lddpc	r9,80007084 <sd_mmc_mci_mem_check+0xd8>
8000705c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007060:	58 08       	cp.w	r8,0
80007062:	c0 30       	breq	80007068 <sd_mmc_mci_mem_check+0xbc>
    return true;
80007064:	30 18       	mov	r8,1
80007066:	c0 28       	rjmp	8000706a <sd_mmc_mci_mem_check+0xbe>
  else
    return false;
80007068:	30 08       	mov	r8,0
}
8000706a:	10 9c       	mov	r12,r8
8000706c:	2f ed       	sub	sp,-8
8000706e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007072:	00 00       	add	r0,r0
80007074:	00 00       	add	r0,r0
80007076:	0b d8       	ld.ub	r8,r5[0x5]
80007078:	00 00       	add	r0,r0
8000707a:	01 34       	ld.ub	r4,r0++
8000707c:	80 00       	ld.sh	r0,r0[0x0]
8000707e:	94 fc       	ld.uh	r12,r10[0xe]
80007080:	80 00       	ld.sh	r0,r0[0x0]
80007082:	5e f4       	retal	r4
80007084:	00 00       	add	r0,r0
80007086:	06 14       	sub	r4,r3
80007088:	80 00       	ld.sh	r0,r0[0x0]
8000708a:	65 e8       	ld.w	r8,r2[0x78]

8000708c <sd_mmc_mci_dma_read_open>:

  return true;
}

bool sd_mmc_mci_dma_read_open(uint8_t slot, uint32_t pos, void* ram, uint16_t nb_sector)
{
8000708c:	eb cd 40 80 	pushm	r7,lr
80007090:	1a 97       	mov	r7,sp
80007092:	20 5d       	sub	sp,20
80007094:	ef 4b ff f4 	st.w	r7[-12],r11
80007098:	ef 4a ff f0 	st.w	r7[-16],r10
8000709c:	12 98       	mov	r8,r9
8000709e:	18 99       	mov	r9,r12
800070a0:	ef 69 ff f8 	st.b	r7[-8],r9
800070a4:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
800070a8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800070ac:	30 18       	mov	r8,1
800070ae:	f0 09 18 00 	cp.b	r9,r8
800070b2:	e0 88 00 04 	brls	800070ba <sd_mmc_mci_dma_read_open+0x2e>
    return false;
800070b6:	30 08       	mov	r8,0
800070b8:	c9 a8       	rjmp	800071ec <sd_mmc_mci_dma_read_open+0x160>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
800070ba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800070be:	4c e9       	lddpc	r9,800071f4 <sd_mmc_mci_dma_read_open+0x168>
800070c0:	f2 08 07 08 	ld.ub	r8,r9[r8]
800070c4:	10 9a       	mov	r10,r8
800070c6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800070ca:	4c c8       	lddpc	r8,800071f8 <sd_mmc_mci_dma_read_open+0x16c>
800070cc:	70 08       	ld.w	r8,r8[0x0]
800070ce:	12 9b       	mov	r11,r9
800070d0:	10 9c       	mov	r12,r8
800070d2:	f0 1f 00 4b 	mcall	800071fc <sd_mmc_mci_dma_read_open+0x170>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
800070d6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800070da:	4c a8       	lddpc	r8,80007200 <sd_mmc_mci_dma_read_open+0x174>
800070dc:	ee fa ff f4 	ld.w	r10,r7[-12]
800070e0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
800070e4:	4c 58       	lddpc	r8,800071f8 <sd_mmc_mci_dma_read_open+0x16c>
800070e6:	70 08       	ld.w	r8,r8[0x0]
800070e8:	10 9c       	mov	r12,r8
800070ea:	f0 1f 00 47 	mcall	80007204 <sd_mmc_mci_dma_read_open+0x178>

  addr =  gl_ptr_mem[slot];
800070ee:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800070f2:	4c 48       	lddpc	r8,80007200 <sd_mmc_mci_dma_read_open+0x174>
800070f4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800070f8:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
800070fc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007100:	4c 29       	lddpc	r9,80007208 <sd_mmc_mci_dma_read_open+0x17c>
80007102:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007106:	e2 18 00 10 	andl	r8,0x10,COH
8000710a:	c0 e1       	brne	80007126 <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
8000710c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007110:	4b e9       	lddpc	r9,80007208 <sd_mmc_mci_dma_read_open+0x17c>
80007112:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007116:	e2 18 00 20 	andl	r8,0x20,COH
  // wait for MMC not busy
  mci_wait_busy_signal(mci);

  addr =  gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
8000711a:	c0 61       	brne	80007126 <sd_mmc_mci_dma_read_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
8000711c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007120:	a9 78       	lsl	r8,0x9
80007122:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  //** (CMD13)
  // Necessary to clear flag error "ADDRESS_OUT_OF_RANGE" (ID LABO = MMC15)
  if(mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80007126:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000712a:	4b 98       	lddpc	r8,8000720c <sd_mmc_mci_dma_read_open+0x180>
8000712c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80007130:	4b 28       	lddpc	r8,800071f8 <sd_mmc_mci_dma_read_open+0x16c>
80007132:	70 08       	ld.w	r8,r8[0x0]
80007134:	12 9a       	mov	r10,r9
80007136:	e0 6b 10 4d 	mov	r11,4173
8000713a:	10 9c       	mov	r12,r8
8000713c:	f0 1f 00 35 	mcall	80007210 <sd_mmc_mci_dma_read_open+0x184>
80007140:	18 98       	mov	r8,r12
80007142:	58 08       	cp.w	r8,0
80007144:	c0 30       	breq	8000714a <sd_mmc_mci_dma_read_open+0xbe>
  {
    return false;
80007146:	30 08       	mov	r8,0
80007148:	c5 28       	rjmp	800071ec <sd_mmc_mci_dma_read_open+0x160>
  }

  // Request Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
8000714a:	4a c8       	lddpc	r8,800071f8 <sd_mmc_mci_dma_read_open+0x16c>
8000714c:	70 08       	ld.w	r8,r8[0x0]
8000714e:	e0 6b 02 00 	mov	r11,512
80007152:	10 9c       	mov	r12,r8
80007154:	f0 1f 00 30 	mcall	80007214 <sd_mmc_mci_dma_read_open+0x188>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
80007158:	ef 19 ff ec 	ld.uh	r9,r7[-20]
8000715c:	4a 78       	lddpc	r8,800071f8 <sd_mmc_mci_dma_read_open+0x16c>
8000715e:	70 08       	ld.w	r8,r8[0x0]
80007160:	12 9b       	mov	r11,r9
80007162:	10 9c       	mov	r12,r8
80007164:	f0 1f 00 2d 	mcall	80007218 <sd_mmc_mci_dma_read_open+0x18c>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
80007168:	fc 18 ff 10 	movh	r8,0xff10
8000716c:	30 19       	mov	r9,1
8000716e:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
80007172:	fe 68 40 00 	mov	r8,-114688
80007176:	30 09       	mov	r9,0
80007178:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
8000717c:	fc 18 ff 10 	movh	r8,0xff10
80007180:	30 09       	mov	r9,0
80007182:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
80007186:	fc 18 ff 10 	movh	r8,0xff10
8000718a:	e0 69 d8 24 	mov	r9,55332
8000718e:	ea 19 00 a0 	orh	r9,0xa0
80007192:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
80007196:	fc 18 ff 10 	movh	r8,0xff10
8000719a:	30 09       	mov	r9,0
8000719c:	f1 49 00 98 	st.w	r8[152],r9
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: ignored because the dst is memory.
    (0                                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: hw handshaking
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
800071a0:	fc 18 ff 10 	movh	r8,0xff10
800071a4:	e0 69 01 00 	mov	r9,256
800071a8:	f1 49 00 9c 	st.w	r8[156],r9
    (0                      << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf: ignored because the dst is memory.
    (AVR32_DMACA_CH_MMCI_RX << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf:
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
800071ac:	fe 68 40 00 	mov	r8,-114688
800071b0:	e0 69 01 30 	mov	r9,304
800071b4:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD17)
  if(mci_send_cmd(mci, SD_MMC_READ_MULTIPLE_BLOCK_CMD, addr)!=MCI_SUCCESS)
800071b8:	49 08       	lddpc	r8,800071f8 <sd_mmc_mci_dma_read_open+0x16c>
800071ba:	70 08       	ld.w	r8,r8[0x0]
800071bc:	ee fa ff fc 	ld.w	r10,r7[-4]
800071c0:	ec 7b 10 52 	mov	r11,856146
800071c4:	10 9c       	mov	r12,r8
800071c6:	f0 1f 00 13 	mcall	80007210 <sd_mmc_mci_dma_read_open+0x184>
800071ca:	18 98       	mov	r8,r12
800071cc:	58 08       	cp.w	r8,0
800071ce:	c0 30       	breq	800071d4 <sd_mmc_mci_dma_read_open+0x148>
  {
    return false;
800071d0:	30 08       	mov	r8,0
800071d2:	c0 d8       	rjmp	800071ec <sd_mmc_mci_dma_read_open+0x160>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
800071d4:	48 98       	lddpc	r8,800071f8 <sd_mmc_mci_dma_read_open+0x16c>
800071d6:	70 08       	ld.w	r8,r8[0x0]
800071d8:	10 9c       	mov	r12,r8
800071da:	f0 1f 00 11 	mcall	8000721c <sd_mmc_mci_dma_read_open+0x190>
800071de:	18 98       	mov	r8,r12
800071e0:	e6 18 f0 50 	andh	r8,0xf050,COH
800071e4:	c0 30       	breq	800071ea <sd_mmc_mci_dma_read_open+0x15e>
  {
    return false;
800071e6:	30 08       	mov	r8,0
800071e8:	c0 28       	rjmp	800071ec <sd_mmc_mci_dma_read_open+0x160>
  }

  return true;
800071ea:	30 18       	mov	r8,1
}
800071ec:	10 9c       	mov	r12,r8
800071ee:	2f bd       	sub	sp,-20
800071f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800071f4:	00 00       	add	r0,r0
800071f6:	0b d8       	ld.ub	r8,r5[0x5]
800071f8:	00 00       	add	r0,r0
800071fa:	01 34       	ld.ub	r4,r0++
800071fc:	80 00       	ld.sh	r0,r0[0x0]
800071fe:	94 fc       	ld.uh	r12,r10[0xe]
80007200:	00 00       	add	r0,r0
80007202:	06 20       	rsub	r0,r3
80007204:	80 00       	ld.sh	r0,r0[0x0]
80007206:	94 b8       	ld.uh	r8,r10[0x6]
80007208:	00 00       	add	r0,r0
8000720a:	0d e0       	ld.ub	r0,r6[0x6]
8000720c:	00 00       	add	r0,r0
8000720e:	09 c8       	ld.ub	r8,r4[0x4]
80007210:	80 00       	ld.sh	r0,r0[0x0]
80007212:	93 64       	st.w	r9[0x18],r4
80007214:	80 00       	ld.sh	r0,r0[0x0]
80007216:	92 e4       	ld.uh	r4,r9[0xc]
80007218:	80 00       	ld.sh	r0,r0[0x0]
8000721a:	93 2e       	st.w	r9[0x8],lr
8000721c:	80 00       	ld.sh	r0,r0[0x0]
8000721e:	94 9c       	ld.uh	r12,r10[0x2]

80007220 <sd_mmc_mci_read_close>:

bool sd_mmc_mci_read_close (uint8_t slot)
{
80007220:	eb cd 40 80 	pushm	r7,lr
80007224:	1a 97       	mov	r7,sp
80007226:	20 3d       	sub	sp,12
80007228:	18 98       	mov	r8,r12
8000722a:	ef 68 ff f4 	st.b	r7[-12],r8
  if( (mci_crc_error(mci)) )
8000722e:	4a 08       	lddpc	r8,800072ac <sd_mmc_mci_read_close+0x8c>
80007230:	70 08       	ld.w	r8,r8[0x0]
80007232:	ef 48 ff f8 	st.w	r7[-8],r8
80007236:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000723a:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
8000723e:	49 d8       	lddpc	r8,800072b0 <sd_mmc_mci_read_close+0x90>
80007240:	70 08       	ld.w	r8,r8[0x0]
80007242:	10 99       	mov	r9,r8
80007244:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007248:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000724c:	71 08       	ld.w	r8,r8[0x40]
8000724e:	f3 e8 10 08 	or	r8,r9,r8
80007252:	10 99       	mov	r9,r8
80007254:	49 78       	lddpc	r8,800072b0 <sd_mmc_mci_read_close+0x90>
80007256:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007258:	49 68       	lddpc	r8,800072b0 <sd_mmc_mci_read_close+0x90>
8000725a:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
8000725c:	e6 18 00 20 	andh	r8,0x20,COH
80007260:	c0 90       	breq	80007272 <sd_mmc_mci_read_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
80007262:	49 48       	lddpc	r8,800072b0 <sd_mmc_mci_read_close+0x90>
80007264:	70 08       	ld.w	r8,r8[0x0]
80007266:	10 99       	mov	r9,r8
80007268:	b5 d9       	cbr	r9,0x15
8000726a:	49 28       	lddpc	r8,800072b0 <sd_mmc_mci_read_close+0x90>
8000726c:	91 09       	st.w	r8[0x0],r9
    return true;
8000726e:	30 18       	mov	r8,1
80007270:	c0 28       	rjmp	80007274 <sd_mmc_mci_read_close+0x54>
  }
  else
    return false;
80007272:	30 08       	mov	r8,0
80007274:	58 08       	cp.w	r8,0
80007276:	c0 30       	breq	8000727c <sd_mmc_mci_read_close+0x5c>
  {
    return false;  // An CRC error has been seen
80007278:	30 08       	mov	r8,0
8000727a:	c1 48       	rjmp	800072a2 <sd_mmc_mci_read_close+0x82>
  }

  mci_wait_busy_signal(mci);
8000727c:	48 c8       	lddpc	r8,800072ac <sd_mmc_mci_read_close+0x8c>
8000727e:	70 08       	ld.w	r8,r8[0x0]
80007280:	10 9c       	mov	r12,r8
80007282:	f0 1f 00 0d 	mcall	800072b4 <sd_mmc_mci_read_close+0x94>

  if( mci_send_cmd( mci, SD_MMC_STOP_READ_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
80007286:	48 a8       	lddpc	r8,800072ac <sd_mmc_mci_read_close+0x8c>
80007288:	70 08       	ld.w	r8,r8[0x0]
8000728a:	3f fa       	mov	r10,-1
8000728c:	e2 6b 10 4c 	mov	r11,135244
80007290:	10 9c       	mov	r12,r8
80007292:	f0 1f 00 0a 	mcall	800072b8 <sd_mmc_mci_read_close+0x98>
80007296:	18 98       	mov	r8,r12
80007298:	58 08       	cp.w	r8,0
8000729a:	c0 30       	breq	800072a0 <sd_mmc_mci_read_close+0x80>
    return false;
8000729c:	30 08       	mov	r8,0
8000729e:	c0 28       	rjmp	800072a2 <sd_mmc_mci_read_close+0x82>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  return true;
800072a0:	30 18       	mov	r8,1
}
800072a2:	10 9c       	mov	r12,r8
800072a4:	2f dd       	sub	sp,-12
800072a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800072aa:	00 00       	add	r0,r0
800072ac:	00 00       	add	r0,r0
800072ae:	01 34       	ld.ub	r4,r0++
800072b0:	00 00       	add	r0,r0
800072b2:	07 b0       	ld.ub	r0,r3[0x3]
800072b4:	80 00       	ld.sh	r0,r0[0x0]
800072b6:	94 b8       	ld.uh	r8,r10[0x6]
800072b8:	80 00       	ld.sh	r0,r0[0x0]
800072ba:	93 64       	st.w	r9[0x18],r4

800072bc <sd_mmc_mci_dma_write_open>:

  return true;
}

bool sd_mmc_mci_dma_write_open (uint8_t slot, uint32_t pos, const void* ram, uint16_t nb_sector)
{
800072bc:	eb cd 40 80 	pushm	r7,lr
800072c0:	1a 97       	mov	r7,sp
800072c2:	20 5d       	sub	sp,20
800072c4:	ef 4b ff f4 	st.w	r7[-12],r11
800072c8:	ef 4a ff f0 	st.w	r7[-16],r10
800072cc:	12 98       	mov	r8,r9
800072ce:	18 99       	mov	r9,r12
800072d0:	ef 69 ff f8 	st.b	r7[-8],r9
800072d4:	ef 58 ff ec 	st.h	r7[-20],r8
  uint32_t addr;

  if (slot > MCI_LAST_SLOTS)
800072d8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800072dc:	30 18       	mov	r8,1
800072de:	f0 09 18 00 	cp.b	r9,r8
800072e2:	e0 88 00 04 	brls	800072ea <sd_mmc_mci_dma_write_open+0x2e>
    return false;
800072e6:	30 08       	mov	r8,0
800072e8:	c8 88       	rjmp	800073f8 <sd_mmc_mci_dma_write_open+0x13c>

  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
800072ea:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800072ee:	4c 59       	lddpc	r9,80007400 <sd_mmc_mci_dma_write_open+0x144>
800072f0:	f2 08 07 08 	ld.ub	r8,r9[r8]
800072f4:	10 9a       	mov	r10,r8
800072f6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800072fa:	4c 38       	lddpc	r8,80007404 <sd_mmc_mci_dma_write_open+0x148>
800072fc:	70 08       	ld.w	r8,r8[0x0]
800072fe:	12 9b       	mov	r11,r9
80007300:	10 9c       	mov	r12,r8
80007302:	f0 1f 00 42 	mcall	80007408 <sd_mmc_mci_dma_write_open+0x14c>

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem[slot] = pos ;
80007306:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000730a:	4c 18       	lddpc	r8,8000740c <sd_mmc_mci_dma_write_open+0x150>
8000730c:	ee fa ff f4 	ld.w	r10,r7[-12]
80007310:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  // wait for MMC not busy
  mci_wait_busy_signal(mci);
80007314:	4b c8       	lddpc	r8,80007404 <sd_mmc_mci_dma_write_open+0x148>
80007316:	70 08       	ld.w	r8,r8[0x0]
80007318:	10 9c       	mov	r12,r8
8000731a:	f0 1f 00 3e 	mcall	80007410 <sd_mmc_mci_dma_write_open+0x154>
      return false;
   }
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
8000731e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80007322:	4b b8       	lddpc	r8,8000740c <sd_mmc_mci_dma_write_open+0x150>
80007324:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007328:	ef 48 ff fc 	st.w	r7[-4],r8
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
8000732c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007330:	4b 99       	lddpc	r9,80007414 <sd_mmc_mci_dma_write_open+0x158>
80007332:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007336:	e2 18 00 10 	andl	r8,0x10,COH
8000733a:	c0 e1       	brne	80007356 <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
8000733c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007340:	4b 59       	lddpc	r9,80007414 <sd_mmc_mci_dma_write_open+0x158>
80007342:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007346:	e2 18 00 20 	andl	r8,0x20,COH
   mmc_drv_read_response();
   */

  addr = gl_ptr_mem[slot];
  // send command
  if((!(SD_CARD_HC  & g_card_type[slot]))
8000734a:	c0 61       	brne	80007356 <sd_mmc_mci_dma_write_open+0x9a>
  && (!(MMC_CARD_HC & g_card_type[slot])) )
  {
    addr <<= 9; // For NO HC card the address must be translate in byte address
8000734c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007350:	a9 78       	lsl	r8,0x9
80007352:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  // Set Block Length
  mci_set_block_size(mci, SD_MMC_SECTOR_SIZE);
80007356:	4a c8       	lddpc	r8,80007404 <sd_mmc_mci_dma_write_open+0x148>
80007358:	70 08       	ld.w	r8,r8[0x0]
8000735a:	e0 6b 02 00 	mov	r11,512
8000735e:	10 9c       	mov	r12,r8
80007360:	f0 1f 00 2e 	mcall	80007418 <sd_mmc_mci_dma_write_open+0x15c>

  // Set Block Count
  mci_set_block_count(mci, nb_sector);
80007364:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80007368:	4a 78       	lddpc	r8,80007404 <sd_mmc_mci_dma_write_open+0x148>
8000736a:	70 08       	ld.w	r8,r8[0x0]
8000736c:	12 9b       	mov	r11,r9
8000736e:	10 9c       	mov	r12,r8
80007370:	f0 1f 00 2b 	mcall	8000741c <sd_mmc_mci_dma_write_open+0x160>

  // Enable the DMACA
  AVR32_DMACA.dmacfgreg = 1 << AVR32_DMACA_DMACFGREG_DMA_EN_OFFSET;
80007374:	fc 18 ff 10 	movh	r8,0xff10
80007378:	30 19       	mov	r9,1
8000737a:	f1 49 03 98 	st.w	r8[920],r9

  AVR32_MCI.dma = 0;
8000737e:	fe 68 40 00 	mov	r8,-114688
80007382:	30 09       	mov	r9,0
80007384:	f1 49 00 50 	st.w	r8[80],r9

  // Linked list ptrs: not used.
  AVR32_DMACA.llp1 = 0x00000000;
80007388:	fc 18 ff 10 	movh	r8,0xff10
8000738c:	30 09       	mov	r9,0
8000738e:	f1 49 00 68 	st.w	r8[104],r9

  // Channel 1 Ctrl register low
  AVR32_DMACA.ctl1l =
80007392:	fc 18 ff 10 	movh	r8,0xff10
80007396:	e0 69 d8 24 	mov	r9,55332
8000739a:	ea 19 02 10 	orh	r9,0x210
8000739e:	f1 49 00 70 	st.w	r8[112],r9
    (0                                            << AVR32_DMACA_CTL1L_LLP_D_EN_OFFSET)     | // Not used
    (0                                            << AVR32_DMACA_CTL1L_LLP_S_EN_OFFSET)       // Not used
    ;

  // Channel 1 Config register low
  AVR32_DMACA.cfg1l =
800073a2:	fc 18 ff 10 	movh	r8,0xff10
800073a6:	30 09       	mov	r9,0
800073a8:	f1 49 00 98 	st.w	r8[152],r9
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_DST_OFFSET) | // Destination handshaking: hw handshaking
    (0                            << AVR32_DMACA_CFG1L_HS_SEL_SRC_OFFSET)   // Source handshaking: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Channel 1 Config register high
  AVR32_DMACA.cfg1h =
800073ac:	fc 18 ff 10 	movh	r8,0xff10
800073b0:	e0 69 18 00 	mov	r9,6144
800073b4:	f1 49 00 9c 	st.w	r8[156],r9
    (AVR32_DMACA_CH_MMCI_TX << AVR32_DMACA_CFG1H_DEST_PER_OFFSET) | // Dest hw handshaking itf:
    (0                      << AVR32_DMACA_CFG1H_SRC_PER_OFFSET)    // Source hw handshaking itf: ignored because the dst is memory.
    ; // All other bits set to 0.

  // Setup MCI DMA register
  AVR32_MCI.dma = AVR32_MCI_DMA_DMAEN_MASK | (AVR32_MCI_DMA_CHKSIZE_16_BYTES << AVR32_MCI_DMA_CHKSIZE_OFFSET);
800073b8:	fe 68 40 00 	mov	r8,-114688
800073bc:	e0 69 01 30 	mov	r9,304
800073c0:	f1 49 00 50 	st.w	r8[80],r9

  //** (CMD24)
  if(mci_send_cmd(mci, SD_MMC_WRITE_MULTIPLE_BLOCK_CMD, addr )!=MCI_SUCCESS)
800073c4:	49 08       	lddpc	r8,80007404 <sd_mmc_mci_dma_write_open+0x148>
800073c6:	70 08       	ld.w	r8,r8[0x0]
800073c8:	ee fa ff fc 	ld.w	r10,r7[-4]
800073cc:	e8 7b 10 59 	mov	r11,594009
800073d0:	10 9c       	mov	r12,r8
800073d2:	f0 1f 00 14 	mcall	80007420 <sd_mmc_mci_dma_write_open+0x164>
800073d6:	18 98       	mov	r8,r12
800073d8:	58 08       	cp.w	r8,0
800073da:	c0 30       	breq	800073e0 <sd_mmc_mci_dma_write_open+0x124>
  {
    return false;
800073dc:	30 08       	mov	r8,0
800073de:	c0 d8       	rjmp	800073f8 <sd_mmc_mci_dma_write_open+0x13c>
  }

  // check response
  if ((mci_read_response(mci) & CS_FLAGERROR_RD_WR) != 0)
800073e0:	48 98       	lddpc	r8,80007404 <sd_mmc_mci_dma_write_open+0x148>
800073e2:	70 08       	ld.w	r8,r8[0x0]
800073e4:	10 9c       	mov	r12,r8
800073e6:	f0 1f 00 10 	mcall	80007424 <sd_mmc_mci_dma_write_open+0x168>
800073ea:	18 98       	mov	r8,r12
800073ec:	e6 18 f0 50 	andh	r8,0xf050,COH
800073f0:	c0 30       	breq	800073f6 <sd_mmc_mci_dma_write_open+0x13a>
  {
    return false;
800073f2:	30 08       	mov	r8,0
800073f4:	c0 28       	rjmp	800073f8 <sd_mmc_mci_dma_write_open+0x13c>
  }

  return true;
800073f6:	30 18       	mov	r8,1
}
800073f8:	10 9c       	mov	r12,r8
800073fa:	2f bd       	sub	sp,-20
800073fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007400:	00 00       	add	r0,r0
80007402:	0b d8       	ld.ub	r8,r5[0x5]
80007404:	00 00       	add	r0,r0
80007406:	01 34       	ld.ub	r4,r0++
80007408:	80 00       	ld.sh	r0,r0[0x0]
8000740a:	94 fc       	ld.uh	r12,r10[0xe]
8000740c:	00 00       	add	r0,r0
8000740e:	06 20       	rsub	r0,r3
80007410:	80 00       	ld.sh	r0,r0[0x0]
80007412:	94 b8       	ld.uh	r8,r10[0x6]
80007414:	00 00       	add	r0,r0
80007416:	0d e0       	ld.ub	r0,r6[0x6]
80007418:	80 00       	ld.sh	r0,r0[0x0]
8000741a:	92 e4       	ld.uh	r4,r9[0xc]
8000741c:	80 00       	ld.sh	r0,r0[0x0]
8000741e:	93 2e       	st.w	r9[0x8],lr
80007420:	80 00       	ld.sh	r0,r0[0x0]
80007422:	93 64       	st.w	r9[0x18],r4
80007424:	80 00       	ld.sh	r0,r0[0x0]
80007426:	94 9c       	ld.uh	r12,r10[0x2]

80007428 <sd_mmc_mci_write_close>:

bool sd_mmc_mci_write_close (uint8_t slot)
{
80007428:	eb cd 40 80 	pushm	r7,lr
8000742c:	1a 97       	mov	r7,sp
8000742e:	20 5d       	sub	sp,20
80007430:	18 98       	mov	r8,r12
80007432:	ef 68 ff ec 	st.b	r7[-20],r8
  if( (mci_crc_error(mci)) )
80007436:	4b 58       	lddpc	r8,80007508 <sd_mmc_mci_write_close+0xe0>
80007438:	70 08       	ld.w	r8,r8[0x0]
8000743a:	ef 48 ff f0 	st.w	r7[-16],r8
8000743e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007442:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80007446:	4b 28       	lddpc	r8,8000750c <sd_mmc_mci_write_close+0xe4>
80007448:	70 08       	ld.w	r8,r8[0x0]
8000744a:	10 99       	mov	r9,r8
8000744c:	e6 19 01 e0 	andh	r9,0x1e0,COH
80007450:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007454:	71 08       	ld.w	r8,r8[0x40]
80007456:	f3 e8 10 08 	or	r8,r9,r8
8000745a:	10 99       	mov	r9,r8
8000745c:	4a c8       	lddpc	r8,8000750c <sd_mmc_mci_write_close+0xe4>
8000745e:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
80007460:	4a b8       	lddpc	r8,8000750c <sd_mmc_mci_write_close+0xe4>
80007462:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_crc_error(volatile avr32_mci_t *mci)
{
  if( mci_get_sr(mci)&AVR32_MCI_SR_DCRCE_MASK )
80007464:	e6 18 00 20 	andh	r8,0x20,COH
80007468:	c0 90       	breq	8000747a <sd_mmc_mci_write_close+0x52>
  {
    shadow_sr&=~AVR32_MCI_SR_DCRCE_MASK;
8000746a:	4a 98       	lddpc	r8,8000750c <sd_mmc_mci_write_close+0xe4>
8000746c:	70 08       	ld.w	r8,r8[0x0]
8000746e:	10 99       	mov	r9,r8
80007470:	b5 d9       	cbr	r9,0x15
80007472:	4a 78       	lddpc	r8,8000750c <sd_mmc_mci_write_close+0xe4>
80007474:	91 09       	st.w	r8[0x0],r9
    return true;
80007476:	30 18       	mov	r8,1
80007478:	c0 28       	rjmp	8000747c <sd_mmc_mci_write_close+0x54>
  }
  else
    return false;
8000747a:	30 08       	mov	r8,0
8000747c:	58 08       	cp.w	r8,0
8000747e:	c0 30       	breq	80007484 <sd_mmc_mci_write_close+0x5c>
  {
    return false;  // An CRC error has been seen
80007480:	30 08       	mov	r8,0
80007482:	c3 e8       	rjmp	800074fe <sd_mmc_mci_write_close+0xd6>
  }

  while(!(mci_data_block_ended(mci)));
80007484:	4a 18       	lddpc	r8,80007508 <sd_mmc_mci_write_close+0xe0>
80007486:	70 08       	ld.w	r8,r8[0x0]
80007488:	ef 48 ff f8 	st.w	r7[-8],r8
8000748c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007490:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_get_sr(volatile avr32_mci_t *mci)
{
  shadow_sr = (shadow_sr & (AVR32_MCI_SR_DTOE_MASK | AVR32_MCI_SR_DCRCE_MASK | AVR32_MCI_SR_CSTOE_MASK | AVR32_MCI_SR_BLKOVRE_MASK)) | mci->sr;
80007494:	49 e8       	lddpc	r8,8000750c <sd_mmc_mci_write_close+0xe4>
80007496:	70 08       	ld.w	r8,r8[0x0]
80007498:	10 99       	mov	r9,r8
8000749a:	e6 19 01 e0 	andh	r9,0x1e0,COH
8000749e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800074a2:	71 08       	ld.w	r8,r8[0x40]
800074a4:	f3 e8 10 08 	or	r8,r9,r8
800074a8:	10 99       	mov	r9,r8
800074aa:	49 98       	lddpc	r8,8000750c <sd_mmc_mci_write_close+0xe4>
800074ac:	91 09       	st.w	r8[0x0],r9
  return shadow_sr;
800074ae:	49 88       	lddpc	r8,8000750c <sd_mmc_mci_write_close+0xe4>
800074b0:	70 08       	ld.w	r8,r8[0x0]
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int mci_data_block_ended(volatile avr32_mci_t *mci)
{
  return (mci_get_sr(mci)&AVR32_MCI_SR_XFRDONE_MASK) != 0;
800074b2:	e6 18 08 00 	andh	r8,0x800,COH
800074b6:	5f 18       	srne	r8
800074b8:	58 08       	cp.w	r8,0
800074ba:	ce 50       	breq	80007484 <sd_mmc_mci_write_close+0x5c>

  if( mci_send_cmd( mci, SD_MMC_STOP_WRITE_TRANSMISSION_CMD, 0xffffffff ) != MCI_SUCCESS)
800074bc:	49 38       	lddpc	r8,80007508 <sd_mmc_mci_write_close+0xe0>
800074be:	70 08       	ld.w	r8,r8[0x0]
800074c0:	3f fa       	mov	r10,-1
800074c2:	e2 6b 10 cc 	mov	r11,135372
800074c6:	10 9c       	mov	r12,r8
800074c8:	f0 1f 00 12 	mcall	80007510 <sd_mmc_mci_write_close+0xe8>
800074cc:	18 98       	mov	r8,r12
800074ce:	58 08       	cp.w	r8,0
800074d0:	c0 30       	breq	800074d6 <sd_mmc_mci_write_close+0xae>
  {
    return false;
800074d2:	30 08       	mov	r8,0
800074d4:	c1 58       	rjmp	800074fe <sd_mmc_mci_write_close+0xd6>
  if( (mci_underrun_error(mci)) )
  {
    return false;
  }*/

  if( slot==SD_SLOT_4BITS )
800074d6:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800074da:	30 18       	mov	r8,1
800074dc:	f0 09 18 00 	cp.b	r9,r8
800074e0:	c0 81       	brne	800074f0 <sd_mmc_mci_write_close+0xc8>
  {
    while(!(gpio_get_pin_value(SD_SLOT_4BITS_DATA0_PIN)));                             // Wait until the card is ready.
800074e2:	31 3c       	mov	r12,19
800074e4:	f0 1f 00 0c 	mcall	80007514 <sd_mmc_mci_write_close+0xec>
800074e8:	18 98       	mov	r8,r12
800074ea:	58 08       	cp.w	r8,0
800074ec:	cf b0       	breq	800074e2 <sd_mmc_mci_write_close+0xba>
800074ee:	c0 78       	rjmp	800074fc <sd_mmc_mci_write_close+0xd4>
  }
  else
  {
    while(!(gpio_get_pin_value(SD_SLOT_8BITS_DATA0_PIN)));                             // Wait until the card is ready.
800074f0:	31 dc       	mov	r12,29
800074f2:	f0 1f 00 09 	mcall	80007514 <sd_mmc_mci_write_close+0xec>
800074f6:	18 98       	mov	r8,r12
800074f8:	58 08       	cp.w	r8,0
800074fa:	cf b0       	breq	800074f0 <sd_mmc_mci_write_close+0xc8>
  }
  return true;
800074fc:	30 18       	mov	r8,1
}
800074fe:	10 9c       	mov	r12,r8
80007500:	2f bd       	sub	sp,-20
80007502:	e3 cd 80 80 	ldm	sp++,r7,pc
80007506:	00 00       	add	r0,r0
80007508:	00 00       	add	r0,r0
8000750a:	01 34       	ld.ub	r4,r0++
8000750c:	00 00       	add	r0,r0
8000750e:	07 b0       	ld.ub	r0,r3[0x3]
80007510:	80 00       	ld.sh	r0,r0[0x0]
80007512:	93 64       	st.w	r9[0x18],r4
80007514:	80 00       	ld.sh	r0,r0[0x0]
80007516:	8d 90       	st.w	r6[0x24],r0

80007518 <int2alpha>:

char Statement[MSG_LENGTH] = {0};
uint16_t enciphered_blocks = 0, deciphered_blocks = 0, aes_step = 0;
//MESSAGE_STRING_t Lcd_Message;
void int2alpha (uint16_t value, char * dest)
{
80007518:	eb cd 40 80 	pushm	r7,lr
8000751c:	1a 97       	mov	r7,sp
8000751e:	20 5d       	sub	sp,20
80007520:	18 98       	mov	r8,r12
80007522:	ef 4b ff ec 	st.w	r7[-20],r11
80007526:	ef 58 ff f0 	st.h	r7[-16],r8
	uint8_t i = 0, value_len = 0, temp[10];
8000752a:	30 08       	mov	r8,0
8000752c:	ef 68 ff fe 	st.b	r7[-2],r8
80007530:	30 08       	mov	r8,0
80007532:	ef 68 ff ff 	st.b	r7[-1],r8
	
	if (value == 0)
80007536:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000753a:	30 08       	mov	r8,0
8000753c:	f0 09 19 00 	cp.h	r9,r8
80007540:	c2 c1       	brne	80007598 <int2alpha+0x80>
	{
		return;
80007542:	c5 68       	rjmp	800075ee <int2alpha+0xd6>
	}
	while (value != 0)
	{
		temp[i++] = value % 10 + '0';
80007544:	ef 3b ff fe 	ld.ub	r11,r7[-2]
80007548:	ef 1a ff f0 	ld.uh	r10,r7[-16]
8000754c:	e0 68 cc cd 	mov	r8,52429
80007550:	ea 18 cc cc 	orh	r8,0xcccc
80007554:	f4 08 06 48 	mulu.d	r8,r10,r8
80007558:	a3 99       	lsr	r9,0x3
8000755a:	12 98       	mov	r8,r9
8000755c:	a3 68       	lsl	r8,0x2
8000755e:	12 08       	add	r8,r9
80007560:	a1 78       	lsl	r8,0x1
80007562:	f4 08 01 08 	sub	r8,r10,r8
80007566:	5c 88       	casts.h	r8
80007568:	5c 58       	castu.b	r8
8000756a:	2d 08       	sub	r8,-48
8000756c:	5c 58       	castu.b	r8
8000756e:	ee 0b 00 09 	add	r9,r7,r11
80007572:	f3 68 ff f4 	st.b	r9[-12],r8
80007576:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000757a:	2f f8       	sub	r8,-1
8000757c:	ef 68 ff fe 	st.b	r7[-2],r8
		value /= 10;
80007580:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80007584:	e0 68 cc cd 	mov	r8,52429
80007588:	ea 18 cc cc 	orh	r8,0xcccc
8000758c:	f2 08 06 48 	mulu.d	r8,r9,r8
80007590:	f2 08 16 03 	lsr	r8,r9,0x3
80007594:	ef 58 ff f0 	st.h	r7[-16],r8
	
	if (value == 0)
	{
		return;
	}
	while (value != 0)
80007598:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000759c:	30 08       	mov	r8,0
8000759e:	f0 09 19 00 	cp.h	r9,r8
800075a2:	cd 11       	brne	80007544 <int2alpha+0x2c>
	{
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
800075a4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800075a8:	ef 68 ff ff 	st.b	r7[-1],r8
	i  = 0;
800075ac:	30 08       	mov	r8,0
800075ae:	ef 68 ff fe 	st.b	r7[-2],r8
	while (i < value_len)
800075b2:	c1 78       	rjmp	800075e0 <int2alpha+0xc8>
	{
		dest[i] = temp[value_len - i - 1];
800075b4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800075b8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800075bc:	10 09       	add	r9,r8
800075be:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800075c2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800075c6:	f4 08 01 08 	sub	r8,r10,r8
800075ca:	20 18       	sub	r8,1
800075cc:	ee 08 00 08 	add	r8,r7,r8
800075d0:	f1 38 ff f4 	ld.ub	r8,r8[-12]
800075d4:	b2 88       	st.b	r9[0x0],r8
		i++;
800075d6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800075da:	2f f8       	sub	r8,-1
800075dc:	ef 68 ff fe 	st.b	r7[-2],r8
		temp[i++] = value % 10 + '0';
		value /= 10;
	}
	value_len = i;
	i  = 0;
	while (i < value_len)
800075e0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800075e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800075e8:	f0 09 18 00 	cp.b	r9,r8
800075ec:	ce 43       	brcs	800075b4 <int2alpha+0x9c>
	{
		dest[i] = temp[value_len - i - 1];
		i++;
	}
}
800075ee:	2f bd       	sub	sp,-20
800075f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800075f4 <string_len>:

uint8_t string_len(char * source_str)
{
800075f4:	eb cd 40 80 	pushm	r7,lr
800075f8:	1a 97       	mov	r7,sp
800075fa:	20 2d       	sub	sp,8
800075fc:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t i = 0;
80007600:	30 08       	mov	r8,0
80007602:	ef 68 ff ff 	st.b	r7[-1],r8
	
	while (*source_str++ != '\0')
80007606:	c0 68       	rjmp	80007612 <string_len+0x1e>
	{
		i++;
80007608:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000760c:	2f f8       	sub	r8,-1
8000760e:	ef 68 ff ff 	st.b	r7[-1],r8

uint8_t string_len(char * source_str)
{
	uint8_t i = 0;
	
	while (*source_str++ != '\0')
80007612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007616:	11 89       	ld.ub	r9,r8[0x0]
80007618:	30 08       	mov	r8,0
8000761a:	f0 09 18 00 	cp.b	r9,r8
8000761e:	5f 18       	srne	r8
80007620:	5c 58       	castu.b	r8
80007622:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007626:	2f f9       	sub	r9,-1
80007628:	ef 49 ff f8 	st.w	r7[-8],r9
8000762c:	58 08       	cp.w	r8,0
8000762e:	ce d1       	brne	80007608 <string_len+0x14>
	{
		i++;
	}
	return i;
80007630:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80007634:	10 9c       	mov	r12,r8
80007636:	2f ed       	sub	sp,-8
80007638:	e3 cd 80 80 	ldm	sp++,r7,pc

8000763c <string_cat>:

void string_cat(const char * source, char * dest)
{
8000763c:	eb cd 40 80 	pushm	r7,lr
80007640:	1a 97       	mov	r7,sp
80007642:	20 2d       	sub	sp,8
80007644:	ef 4c ff fc 	st.w	r7[-4],r12
80007648:	ef 4b ff f8 	st.w	r7[-8],r11
	while (*source != '\0')
8000764c:	c1 18       	rjmp	8000766e <string_cat+0x32>
	{
		*dest++ = *source++;
8000764e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007652:	11 88       	ld.ub	r8,r8[0x0]
80007654:	ee f9 ff f8 	ld.w	r9,r7[-8]
80007658:	b2 88       	st.b	r9[0x0],r8
8000765a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000765e:	2f f8       	sub	r8,-1
80007660:	ef 48 ff f8 	st.w	r7[-8],r8
80007664:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007668:	2f f8       	sub	r8,-1
8000766a:	ef 48 ff fc 	st.w	r7[-4],r8
	return i;
}

void string_cat(const char * source, char * dest)
{
	while (*source != '\0')
8000766e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007672:	11 88       	ld.ub	r8,r8[0x0]
80007674:	58 08       	cp.w	r8,0
80007676:	ce c1       	brne	8000764e <string_cat+0x12>
	{
		*dest++ = *source++;
	}
}
80007678:	2f ed       	sub	sp,-8
8000767a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000767e:	d7 03       	nop

80007680 <sd_mmc_mci_read_multiple_sector>:

bool sd_mmc_mci_read_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
80007680:	eb cd 40 80 	pushm	r7,lr
80007684:	1a 97       	mov	r7,sp
80007686:	20 5d       	sub	sp,20
80007688:	18 99       	mov	r9,r12
8000768a:	16 98       	mov	r8,r11
8000768c:	ef 4a ff ec 	st.w	r7[-20],r10
80007690:	ef 69 ff f4 	st.b	r7[-12],r9
80007694:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
80007698:	30 18       	mov	r8,1
8000769a:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
8000769e:	30 08       	mov	r8,0
800076a0:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
800076a4:	30 08       	mov	r8,0
800076a6:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
800076aa:	30 08       	mov	r8,0
800076ac:	ef 68 ff ff 	st.b	r7[-1],r8
800076b0:	c0 c8       	rjmp	800076c8 <sd_mmc_mci_read_multiple_sector+0x48>
  {
	  Statement[i] = 0;
800076b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800076b6:	4f 6a       	lddpc	r10,8000788c <sd_mmc_mci_read_multiple_sector+0x20c>
800076b8:	30 08       	mov	r8,0
800076ba:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
800076be:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800076c2:	2f f8       	sub	r8,-1
800076c4:	ef 68 ff ff 	st.b	r7[-1],r8
800076c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800076cc:	36 38       	mov	r8,99
800076ce:	f0 09 18 00 	cp.b	r9,r8
800076d2:	fe 98 ff f0 	brls	800076b2 <sd_mmc_mci_read_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
800076d6:	4e f8       	lddpc	r8,80007890 <sd_mmc_mci_read_multiple_sector+0x210>
800076d8:	90 08       	ld.sh	r8,r8[0x0]
800076da:	2f f8       	sub	r8,-1
800076dc:	5c 88       	casts.h	r8
800076de:	4e d9       	lddpc	r9,80007890 <sd_mmc_mci_read_multiple_sector+0x210>
800076e0:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks = 0;
800076e2:	4e d9       	lddpc	r9,80007894 <sd_mmc_mci_read_multiple_sector+0x214>
800076e4:	30 08       	mov	r8,0
800076e6:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks += nb_sector;
800076e8:	4e c8       	lddpc	r8,80007898 <sd_mmc_mci_read_multiple_sector+0x218>
800076ea:	90 08       	ld.sh	r8,r8[0x0]
800076ec:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800076f0:	f2 08 00 08 	add	r8,r9,r8
800076f4:	5c 88       	casts.h	r8
800076f6:	4e 99       	lddpc	r9,80007898 <sd_mmc_mci_read_multiple_sector+0x218>
800076f8:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
800076fa:	4e 68       	lddpc	r8,80007890 <sd_mmc_mci_read_multiple_sector+0x210>
800076fc:	90 08       	ld.sh	r8,r8[0x0]
800076fe:	5c 78       	castu.h	r8
80007700:	4e 3b       	lddpc	r11,8000788c <sd_mmc_mci_read_multiple_sector+0x20c>
80007702:	10 9c       	mov	r12,r8
80007704:	f0 1f 00 66 	mcall	8000789c <sd_mmc_mci_read_multiple_sector+0x21c>
  string_cat(" Deciphered ", &Statement[string_len(Statement)]);
80007708:	4e 1c       	lddpc	r12,8000788c <sd_mmc_mci_read_multiple_sector+0x20c>
8000770a:	f0 1f 00 66 	mcall	800078a0 <sd_mmc_mci_read_multiple_sector+0x220>
8000770e:	18 98       	mov	r8,r12
80007710:	10 99       	mov	r9,r8
80007712:	4d f8       	lddpc	r8,8000788c <sd_mmc_mci_read_multiple_sector+0x20c>
80007714:	f2 08 00 08 	add	r8,r9,r8
80007718:	10 9b       	mov	r11,r8
8000771a:	4e 3c       	lddpc	r12,800078a4 <sd_mmc_mci_read_multiple_sector+0x224>
8000771c:	f0 1f 00 63 	mcall	800078a8 <sd_mmc_mci_read_multiple_sector+0x228>
  int2alpha(deciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
80007720:	4d bc       	lddpc	r12,8000788c <sd_mmc_mci_read_multiple_sector+0x20c>
80007722:	f0 1f 00 60 	mcall	800078a0 <sd_mmc_mci_read_multiple_sector+0x220>
80007726:	18 98       	mov	r8,r12
80007728:	10 99       	mov	r9,r8
8000772a:	4d 98       	lddpc	r8,8000788c <sd_mmc_mci_read_multiple_sector+0x20c>
8000772c:	10 09       	add	r9,r8
8000772e:	4d b8       	lddpc	r8,80007898 <sd_mmc_mci_read_multiple_sector+0x218>
80007730:	90 08       	ld.sh	r8,r8[0x0]
80007732:	5c 78       	castu.h	r8
80007734:	12 9b       	mov	r11,r9
80007736:	10 9c       	mov	r12,r8
80007738:	f0 1f 00 59 	mcall	8000789c <sd_mmc_mci_read_multiple_sector+0x21c>
  string_cat(" sectors", &Statement[string_len(Statement)]);
8000773c:	4d 4c       	lddpc	r12,8000788c <sd_mmc_mci_read_multiple_sector+0x20c>
8000773e:	f0 1f 00 59 	mcall	800078a0 <sd_mmc_mci_read_multiple_sector+0x220>
80007742:	18 98       	mov	r8,r12
80007744:	10 99       	mov	r9,r8
80007746:	4d 28       	lddpc	r8,8000788c <sd_mmc_mci_read_multiple_sector+0x20c>
80007748:	f2 08 00 08 	add	r8,r9,r8
8000774c:	10 9b       	mov	r11,r8
8000774e:	4d 8c       	lddpc	r12,800078ac <sd_mmc_mci_read_multiple_sector+0x22c>
80007750:	f0 1f 00 56 	mcall	800078a8 <sd_mmc_mci_read_multiple_sector+0x228>
  
  //et024006_DrawFilledRect(10, 3 * 10, ET024006_WIDTH, 10, WHITE);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 3 * 10, WHITE, BLACK);
80007754:	4d 7b       	lddpc	r11,800078b0 <sd_mmc_mci_read_multiple_sector+0x230>
80007756:	30 08       	mov	r8,0
80007758:	1a d8       	st.w	--sp,r8
8000775a:	e0 68 ff ff 	mov	r8,65535
8000775e:	31 e9       	mov	r9,30
80007760:	30 aa       	mov	r10,10
80007762:	4c bc       	lddpc	r12,8000788c <sd_mmc_mci_read_multiple_sector+0x20c>
80007764:	f0 1f 00 54 	mcall	800078b4 <sd_mmc_mci_read_multiple_sector+0x234>
80007768:	2f fd       	sub	sp,-4
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
8000776a:	c5 48       	rjmp	80007812 <sd_mmc_mci_read_multiple_sector+0x192>
  {
    // (re)load first stage.
    dma_mci_2_ram((0==(buffer_id++%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
8000776c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007770:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007774:	5f 08       	sreq	r8
80007776:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000777a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000777e:	2f f8       	sub	r8,-1
80007780:	ef 68 ff fb 	st.b	r7[-5],r8
80007784:	58 09       	cp.w	r9,0
80007786:	c0 30       	breq	8000778c <sd_mmc_mci_read_multiple_sector+0x10c>
80007788:	4c c8       	lddpc	r8,800078b8 <sd_mmc_mci_read_multiple_sector+0x238>
8000778a:	c0 28       	rjmp	8000778e <sd_mmc_mci_read_multiple_sector+0x10e>
8000778c:	4c c8       	lddpc	r8,800078bc <sd_mmc_mci_read_multiple_sector+0x23c>
8000778e:	e0 6b 02 00 	mov	r11,512
80007792:	10 9c       	mov	r12,r8
80007794:	f0 1f 00 4b 	mcall	800078c0 <sd_mmc_mci_read_multiple_sector+0x240>

    // (re)load second stage.
    if( !b_first_step )
80007798:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000779c:	ec 18 00 01 	eorl	r8,0x1
800077a0:	5c 58       	castu.b	r8
800077a2:	c2 e0       	breq	800077fe <sd_mmc_mci_read_multiple_sector+0x17e>
	{
      apply_aes_decryption(&AVR32_AES, (0==(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
800077a4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800077a8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800077ac:	c0 31       	brne	800077b2 <sd_mmc_mci_read_multiple_sector+0x132>
800077ae:	4c 38       	lddpc	r8,800078b8 <sd_mmc_mci_read_multiple_sector+0x238>
800077b0:	c0 28       	rjmp	800077b4 <sd_mmc_mci_read_multiple_sector+0x134>
800077b2:	4c 38       	lddpc	r8,800078bc <sd_mmc_mci_read_multiple_sector+0x23c>
800077b4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800077b8:	e0 6a 02 00 	mov	r10,512
800077bc:	10 9b       	mov	r11,r8
800077be:	fc 7c 00 00 	mov	r12,-196608
800077c2:	f0 1f 00 41 	mcall	800078c4 <sd_mmc_mci_read_multiple_sector+0x244>
	  addr = addr + 512L; //sector_index++;
800077c6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800077ca:	f0 c8 fe 00 	sub	r8,r8,-512
800077ce:	ef 48 ff ec 	st.w	r7[-20],r8
	  if (!udi_msc_trans_block(true, (0==(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
800077d2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800077d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800077da:	c0 31       	brne	800077e0 <sd_mmc_mci_read_multiple_sector+0x160>
800077dc:	4b 78       	lddpc	r8,800078b8 <sd_mmc_mci_read_multiple_sector+0x238>
800077de:	c0 28       	rjmp	800077e2 <sd_mmc_mci_read_multiple_sector+0x162>
800077e0:	4b 78       	lddpc	r8,800078bc <sd_mmc_mci_read_multiple_sector+0x23c>
800077e2:	30 09       	mov	r9,0
800077e4:	e0 6a 02 00 	mov	r10,512
800077e8:	10 9b       	mov	r11,r8
800077ea:	30 1c       	mov	r12,1
800077ec:	f0 1f 00 37 	mcall	800078c8 <sd_mmc_mci_read_multiple_sector+0x248>
800077f0:	18 98       	mov	r8,r12
800077f2:	ec 18 00 01 	eorl	r8,0x1
800077f6:	5c 58       	castu.b	r8
800077f8:	c0 30       	breq	800077fe <sd_mmc_mci_read_multiple_sector+0x17e>
	  {
    	    return false;
800077fa:	30 08       	mov	r8,0
800077fc:	c4 48       	rjmp	80007884 <sd_mmc_mci_read_multiple_sector+0x204>
      }

    }
    b_first_step = false;
800077fe:	30 08       	mov	r8,0
80007800:	ef 68 ff fa 	st.b	r7[-6],r8
    // Wait completion of DMACA stage.
    while( !is_dma_mci_2_ram_complete() );
80007804:	f0 1f 00 32 	mcall	800078cc <sd_mmc_mci_read_multiple_sector+0x24c>
80007808:	18 98       	mov	r8,r12
8000780a:	ec 18 00 01 	eorl	r8,0x1
8000780e:	5c 58       	castu.b	r8
80007810:	cf a1       	brne	80007804 <sd_mmc_mci_read_multiple_sector+0x184>
  //aes_init(AES_PMODE_DECIPHER);
  // Pipeline the 2 DMA transfer in order to speed-up the performances:
  // DMA MCI -> RAM
  // DMA RAM -> USB
  //
  while (nb_sector--)
80007812:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007816:	30 08       	mov	r8,0
80007818:	f0 09 19 00 	cp.h	r9,r8
8000781c:	5f 18       	srne	r8
8000781e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007822:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80007826:	20 18       	sub	r8,1
80007828:	ef 58 ff f0 	st.h	r7[-16],r8
8000782c:	58 09       	cp.w	r9,0
8000782e:	c9 f1       	brne	8000776c <sd_mmc_mci_read_multiple_sector+0xec>
    while( !is_dma_mci_2_ram_complete() );

  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_decryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
80007830:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007834:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007838:	5c 58       	castu.b	r8
8000783a:	c0 30       	breq	80007840 <sd_mmc_mci_read_multiple_sector+0x1c0>
8000783c:	49 f8       	lddpc	r8,800078b8 <sd_mmc_mci_read_multiple_sector+0x238>
8000783e:	c0 28       	rjmp	80007842 <sd_mmc_mci_read_multiple_sector+0x1c2>
80007840:	49 f8       	lddpc	r8,800078bc <sd_mmc_mci_read_multiple_sector+0x23c>
80007842:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007846:	e0 6a 02 00 	mov	r10,512
8000784a:	10 9b       	mov	r11,r8
8000784c:	fc 7c 00 00 	mov	r12,-196608
80007850:	f0 1f 00 1d 	mcall	800078c4 <sd_mmc_mci_read_multiple_sector+0x244>
  if (!udi_msc_trans_block(true, (0!=(buffer_id%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL))
80007854:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007858:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000785c:	5c 58       	castu.b	r8
8000785e:	c0 30       	breq	80007864 <sd_mmc_mci_read_multiple_sector+0x1e4>
80007860:	49 68       	lddpc	r8,800078b8 <sd_mmc_mci_read_multiple_sector+0x238>
80007862:	c0 28       	rjmp	80007866 <sd_mmc_mci_read_multiple_sector+0x1e6>
80007864:	49 68       	lddpc	r8,800078bc <sd_mmc_mci_read_multiple_sector+0x23c>
80007866:	30 09       	mov	r9,0
80007868:	e0 6a 02 00 	mov	r10,512
8000786c:	10 9b       	mov	r11,r8
8000786e:	30 1c       	mov	r12,1
80007870:	f0 1f 00 16 	mcall	800078c8 <sd_mmc_mci_read_multiple_sector+0x248>
80007874:	18 98       	mov	r8,r12
80007876:	ec 18 00 01 	eorl	r8,0x1
8000787a:	5c 58       	castu.b	r8
8000787c:	c0 30       	breq	80007882 <sd_mmc_mci_read_multiple_sector+0x202>
    return false;
8000787e:	30 08       	mov	r8,0
80007880:	c0 28       	rjmp	80007884 <sd_mmc_mci_read_multiple_sector+0x204>

  return true;
80007882:	30 18       	mov	r8,1
}
80007884:	10 9c       	mov	r12,r8
80007886:	2f bd       	sub	sp,-20
80007888:	e3 cd 80 80 	ldm	sp++,r7,pc
8000788c:	00 00       	add	r0,r0
8000788e:	06 28       	rsub	r8,r3
80007890:	00 00       	add	r0,r0
80007892:	06 90       	mov	r0,r3
80007894:	00 00       	add	r0,r0
80007896:	06 8c       	andn	r12,r3
80007898:	00 00       	add	r0,r0
8000789a:	06 8e       	andn	lr,r3
8000789c:	80 00       	ld.sh	r0,r0[0x0]
8000789e:	75 18       	ld.w	r8,r10[0x44]
800078a0:	80 00       	ld.sh	r0,r0[0x0]
800078a2:	75 f4       	ld.w	r4,r10[0x7c]
800078a4:	80 00       	ld.sh	r0,r0[0x0]
800078a6:	5e c8       	retvs	r8
800078a8:	80 00       	ld.sh	r0,r0[0x0]
800078aa:	76 3c       	ld.w	r12,r11[0xc]
800078ac:	80 00       	ld.sh	r0,r0[0x0]
800078ae:	5e d8       	retvc	r8
800078b0:	80 00       	ld.sh	r0,r0[0x0]
800078b2:	ed b4       	*unknown*
800078b4:	80 00       	ld.sh	r0,r0[0x0]
800078b6:	45 38       	lddsp	r8,sp[0x14c]
800078b8:	00 00       	add	r0,r0
800078ba:	0b e0       	ld.ub	r0,r5[0x6]
800078bc:	00 00       	add	r0,r0
800078be:	09 d8       	ld.ub	r8,r4[0x5]
800078c0:	80 00       	ld.sh	r0,r0[0x0]
800078c2:	6e cc       	ld.w	r12,r7[0x30]
800078c4:	80 00       	ld.sh	r0,r0[0x0]
800078c6:	41 48       	lddsp	r8,sp[0x50]
800078c8:	80 00       	ld.sh	r0,r0[0x0]
800078ca:	d0 54       	*unknown*
800078cc:	80 00       	ld.sh	r0,r0[0x0]
800078ce:	6f 1c       	ld.w	r12,r7[0x44]

800078d0 <sd_mmc_mci_write_multiple_sector>:



bool sd_mmc_mci_write_multiple_sector(uint8_t slot, uint16_t nb_sector, uint32_t addr)
{
800078d0:	eb cd 40 80 	pushm	r7,lr
800078d4:	1a 97       	mov	r7,sp
800078d6:	20 5d       	sub	sp,20
800078d8:	18 99       	mov	r9,r12
800078da:	16 98       	mov	r8,r11
800078dc:	ef 4a ff ec 	st.w	r7[-20],r10
800078e0:	ef 69 ff f4 	st.b	r7[-12],r9
800078e4:	ef 58 ff f0 	st.h	r7[-16],r8
  bool b_first_step=true;
800078e8:	30 18       	mov	r8,1
800078ea:	ef 68 ff fa 	st.b	r7[-6],r8
  uint8_t   buffer_id=0;
800078ee:	30 08       	mov	r8,0
800078f0:	ef 68 ff fb 	st.b	r7[-5],r8
  uint16_t sector_index = 0;
800078f4:	30 08       	mov	r8,0
800078f6:	ef 58 ff fc 	st.h	r7[-4],r8

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
800078fa:	30 08       	mov	r8,0
800078fc:	ef 68 ff ff 	st.b	r7[-1],r8
80007900:	c0 c8       	rjmp	80007918 <sd_mmc_mci_write_multiple_sector+0x48>
  {
	  Statement[i] = 0;
80007902:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007906:	4f 6a       	lddpc	r10,80007adc <sd_mmc_mci_write_multiple_sector+0x20c>
80007908:	30 08       	mov	r8,0
8000790a:	f4 09 0b 08 	st.b	r10[r9],r8
  bool b_first_step=true;
  uint8_t   buffer_id=0;
  uint16_t sector_index = 0;

  uint8_t i;
  for (i = 0; i < MSG_LENGTH; i++)
8000790e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007912:	2f f8       	sub	r8,-1
80007914:	ef 68 ff ff 	st.b	r7[-1],r8
80007918:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000791c:	36 38       	mov	r8,99
8000791e:	f0 09 18 00 	cp.b	r9,r8
80007922:	fe 98 ff f0 	brls	80007902 <sd_mmc_mci_write_multiple_sector+0x32>
  {
	  Statement[i] = 0;
  }
  aes_step++;
80007926:	4e f8       	lddpc	r8,80007ae0 <sd_mmc_mci_write_multiple_sector+0x210>
80007928:	90 08       	ld.sh	r8,r8[0x0]
8000792a:	2f f8       	sub	r8,-1
8000792c:	5c 88       	casts.h	r8
8000792e:	4e d9       	lddpc	r9,80007ae0 <sd_mmc_mci_write_multiple_sector+0x210>
80007930:	b2 08       	st.h	r9[0x0],r8
  deciphered_blocks = 0;
80007932:	4e d9       	lddpc	r9,80007ae4 <sd_mmc_mci_write_multiple_sector+0x214>
80007934:	30 08       	mov	r8,0
80007936:	b2 08       	st.h	r9[0x0],r8
  enciphered_blocks += nb_sector;
80007938:	4e c8       	lddpc	r8,80007ae8 <sd_mmc_mci_write_multiple_sector+0x218>
8000793a:	90 08       	ld.sh	r8,r8[0x0]
8000793c:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007940:	f2 08 00 08 	add	r8,r9,r8
80007944:	5c 88       	casts.h	r8
80007946:	4e 99       	lddpc	r9,80007ae8 <sd_mmc_mci_write_multiple_sector+0x218>
80007948:	b2 08       	st.h	r9[0x0],r8
  int2alpha(aes_step, Statement);
8000794a:	4e 68       	lddpc	r8,80007ae0 <sd_mmc_mci_write_multiple_sector+0x210>
8000794c:	90 08       	ld.sh	r8,r8[0x0]
8000794e:	5c 78       	castu.h	r8
80007950:	4e 3b       	lddpc	r11,80007adc <sd_mmc_mci_write_multiple_sector+0x20c>
80007952:	10 9c       	mov	r12,r8
80007954:	f0 1f 00 66 	mcall	80007aec <sd_mmc_mci_write_multiple_sector+0x21c>
  string_cat(" Enciphered ", &Statement[string_len(Statement)]);
80007958:	4e 1c       	lddpc	r12,80007adc <sd_mmc_mci_write_multiple_sector+0x20c>
8000795a:	f0 1f 00 66 	mcall	80007af0 <sd_mmc_mci_write_multiple_sector+0x220>
8000795e:	18 98       	mov	r8,r12
80007960:	10 99       	mov	r9,r8
80007962:	4d f8       	lddpc	r8,80007adc <sd_mmc_mci_write_multiple_sector+0x20c>
80007964:	f2 08 00 08 	add	r8,r9,r8
80007968:	10 9b       	mov	r11,r8
8000796a:	4e 3c       	lddpc	r12,80007af4 <sd_mmc_mci_write_multiple_sector+0x224>
8000796c:	f0 1f 00 63 	mcall	80007af8 <sd_mmc_mci_write_multiple_sector+0x228>
  int2alpha(enciphered_blocks, &Statement[string_len(Statement)]);//_EXFUN(l64a, (nb_sector));
80007970:	4d bc       	lddpc	r12,80007adc <sd_mmc_mci_write_multiple_sector+0x20c>
80007972:	f0 1f 00 60 	mcall	80007af0 <sd_mmc_mci_write_multiple_sector+0x220>
80007976:	18 98       	mov	r8,r12
80007978:	10 99       	mov	r9,r8
8000797a:	4d 98       	lddpc	r8,80007adc <sd_mmc_mci_write_multiple_sector+0x20c>
8000797c:	10 09       	add	r9,r8
8000797e:	4d b8       	lddpc	r8,80007ae8 <sd_mmc_mci_write_multiple_sector+0x218>
80007980:	90 08       	ld.sh	r8,r8[0x0]
80007982:	5c 78       	castu.h	r8
80007984:	12 9b       	mov	r11,r9
80007986:	10 9c       	mov	r12,r8
80007988:	f0 1f 00 59 	mcall	80007aec <sd_mmc_mci_write_multiple_sector+0x21c>
  string_cat(" sectors", &Statement[string_len(Statement)]);
8000798c:	4d 4c       	lddpc	r12,80007adc <sd_mmc_mci_write_multiple_sector+0x20c>
8000798e:	f0 1f 00 59 	mcall	80007af0 <sd_mmc_mci_write_multiple_sector+0x220>
80007992:	18 98       	mov	r8,r12
80007994:	10 99       	mov	r9,r8
80007996:	4d 28       	lddpc	r8,80007adc <sd_mmc_mci_write_multiple_sector+0x20c>
80007998:	f2 08 00 08 	add	r8,r9,r8
8000799c:	10 9b       	mov	r11,r8
8000799e:	4d 8c       	lddpc	r12,80007afc <sd_mmc_mci_write_multiple_sector+0x22c>
800079a0:	f0 1f 00 56 	mcall	80007af8 <sd_mmc_mci_write_multiple_sector+0x228>
  
  //et024006_DrawFilledRect(10, 5 * 10, ET024006_WIDTH, 10, BLACK);
  et024006_PrintString(Statement, (const unsigned char*) &FONT6x8, 10, 5 * 10, WHITE, BLACK);  //et024006_PrintConsole(Statement, BLACK, -1);
800079a4:	4d 7b       	lddpc	r11,80007b00 <sd_mmc_mci_write_multiple_sector+0x230>
800079a6:	30 08       	mov	r8,0
800079a8:	1a d8       	st.w	--sp,r8
800079aa:	e0 68 ff ff 	mov	r8,65535
800079ae:	33 29       	mov	r9,50
800079b0:	30 aa       	mov	r10,10
800079b2:	4c bc       	lddpc	r12,80007adc <sd_mmc_mci_write_multiple_sector+0x20c>
800079b4:	f0 1f 00 54 	mcall	80007b04 <sd_mmc_mci_write_multiple_sector+0x234>
800079b8:	2f fd       	sub	sp,-4
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
800079ba:	c5 58       	rjmp	80007a64 <sd_mmc_mci_write_multiple_sector+0x194>

    // (re)load second stage.
    if( !b_first_step )
800079bc:	ef 38 ff fa 	ld.ub	r8,r7[-6]
800079c0:	ec 18 00 01 	eorl	r8,0x1
800079c4:	5c 58       	castu.b	r8
800079c6:	c2 70       	breq	80007a14 <sd_mmc_mci_write_multiple_sector+0x144>
	{
	  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
800079c8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800079cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079d0:	5c 58       	castu.b	r8
800079d2:	c0 30       	breq	800079d8 <sd_mmc_mci_write_multiple_sector+0x108>
800079d4:	4c d8       	lddpc	r8,80007b08 <sd_mmc_mci_write_multiple_sector+0x238>
800079d6:	c0 28       	rjmp	800079da <sd_mmc_mci_write_multiple_sector+0x10a>
800079d8:	4c d8       	lddpc	r8,80007b0c <sd_mmc_mci_write_multiple_sector+0x23c>
800079da:	ee f9 ff ec 	ld.w	r9,r7[-20]
800079de:	e0 6a 02 00 	mov	r10,512
800079e2:	10 9b       	mov	r11,r8
800079e4:	fc 7c 00 00 	mov	r12,-196608
800079e8:	f0 1f 00 4a 	mcall	80007b10 <sd_mmc_mci_write_multiple_sector+0x240>
	  addr = addr + 512L; //sector_index++;
800079ec:	ee f8 ff ec 	ld.w	r8,r7[-20]
800079f0:	f0 c8 fe 00 	sub	r8,r8,-512
800079f4:	ef 48 ff ec 	st.w	r7[-20],r8
      dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
800079f8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800079fc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a00:	5c 58       	castu.b	r8
80007a02:	c0 30       	breq	80007a08 <sd_mmc_mci_write_multiple_sector+0x138>
80007a04:	4c 18       	lddpc	r8,80007b08 <sd_mmc_mci_write_multiple_sector+0x238>
80007a06:	c0 28       	rjmp	80007a0a <sd_mmc_mci_write_multiple_sector+0x13a>
80007a08:	4c 18       	lddpc	r8,80007b0c <sd_mmc_mci_write_multiple_sector+0x23c>
80007a0a:	e0 6b 02 00 	mov	r11,512
80007a0e:	10 9c       	mov	r12,r8
80007a10:	f0 1f 00 41 	mcall	80007b14 <sd_mmc_mci_write_multiple_sector+0x244>
    }
    udi_msc_trans_block(false, (0==(buffer_id++%2))?sector_buf_0:sector_buf_1, SD_MMC_SECTOR_SIZE, NULL);
80007a14:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007a18:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a1c:	5f 08       	sreq	r8
80007a1e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007a22:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007a26:	2f f8       	sub	r8,-1
80007a28:	ef 68 ff fb 	st.b	r7[-5],r8
80007a2c:	58 09       	cp.w	r9,0
80007a2e:	c0 30       	breq	80007a34 <sd_mmc_mci_write_multiple_sector+0x164>
80007a30:	4b 68       	lddpc	r8,80007b08 <sd_mmc_mci_write_multiple_sector+0x238>
80007a32:	c0 28       	rjmp	80007a36 <sd_mmc_mci_write_multiple_sector+0x166>
80007a34:	4b 68       	lddpc	r8,80007b0c <sd_mmc_mci_write_multiple_sector+0x23c>
80007a36:	30 09       	mov	r9,0
80007a38:	e0 6a 02 00 	mov	r10,512
80007a3c:	10 9b       	mov	r11,r8
80007a3e:	30 0c       	mov	r12,0
80007a40:	f0 1f 00 36 	mcall	80007b18 <sd_mmc_mci_write_multiple_sector+0x248>
    if( !b_first_step ) {
80007a44:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80007a48:	ec 18 00 01 	eorl	r8,0x1
80007a4c:	5c 58       	castu.b	r8
80007a4e:	c0 80       	breq	80007a5e <sd_mmc_mci_write_multiple_sector+0x18e>
      // Wait completion of DMACA stage.
      while( !is_dma_ram_2_mci_complete() );
80007a50:	f0 1f 00 33 	mcall	80007b1c <sd_mmc_mci_write_multiple_sector+0x24c>
80007a54:	18 98       	mov	r8,r12
80007a56:	ec 18 00 01 	eorl	r8,0x1
80007a5a:	5c 58       	castu.b	r8
80007a5c:	cf a1       	brne	80007a50 <sd_mmc_mci_write_multiple_sector+0x180>
    }
    b_first_step=false;
80007a5e:	30 08       	mov	r8,0
80007a60:	ef 68 ff fa 	st.b	r7[-6],r8
  // DMA RAM -> MCI
  //
  
  //aes_init(AES_PMODE_CIPHER);

  while (nb_sector--) {
80007a64:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80007a68:	30 08       	mov	r8,0
80007a6a:	f0 09 19 00 	cp.h	r9,r8
80007a6e:	5f 18       	srne	r8
80007a70:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007a74:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80007a78:	20 18       	sub	r8,1
80007a7a:	ef 58 ff f0 	st.h	r7[-16],r8
80007a7e:	58 09       	cp.w	r9,0
80007a80:	c9 e1       	brne	800079bc <sd_mmc_mci_write_multiple_sector+0xec>
    }
    b_first_step=false;
  }

  // Complete execution of the last transfer (which is in the pipe).
  apply_aes_encryption(&AVR32_AES, (0!=(buffer_id%2))?(uint32_t *)sector_buf_0:(uint32_t *)sector_buf_1, 512, addr /*+ sector_index * 512L*/);
80007a82:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007a86:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007a8a:	5c 58       	castu.b	r8
80007a8c:	c0 30       	breq	80007a92 <sd_mmc_mci_write_multiple_sector+0x1c2>
80007a8e:	49 f8       	lddpc	r8,80007b08 <sd_mmc_mci_write_multiple_sector+0x238>
80007a90:	c0 28       	rjmp	80007a94 <sd_mmc_mci_write_multiple_sector+0x1c4>
80007a92:	49 f8       	lddpc	r8,80007b0c <sd_mmc_mci_write_multiple_sector+0x23c>
80007a94:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007a98:	e0 6a 02 00 	mov	r10,512
80007a9c:	10 9b       	mov	r11,r8
80007a9e:	fc 7c 00 00 	mov	r12,-196608
80007aa2:	f0 1f 00 1c 	mcall	80007b10 <sd_mmc_mci_write_multiple_sector+0x240>
  dma_ram_2_mci((0!=(buffer_id%2))?&sector_buf_0:&sector_buf_1, SD_MMC_SECTOR_SIZE);
80007aa6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80007aaa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007aae:	5c 58       	castu.b	r8
80007ab0:	c0 30       	breq	80007ab6 <sd_mmc_mci_write_multiple_sector+0x1e6>
80007ab2:	49 68       	lddpc	r8,80007b08 <sd_mmc_mci_write_multiple_sector+0x238>
80007ab4:	c0 28       	rjmp	80007ab8 <sd_mmc_mci_write_multiple_sector+0x1e8>
80007ab6:	49 68       	lddpc	r8,80007b0c <sd_mmc_mci_write_multiple_sector+0x23c>
80007ab8:	e0 6b 02 00 	mov	r11,512
80007abc:	10 9c       	mov	r12,r8
80007abe:	f0 1f 00 16 	mcall	80007b14 <sd_mmc_mci_write_multiple_sector+0x244>
  while( !is_dma_ram_2_mci_complete() );
80007ac2:	f0 1f 00 17 	mcall	80007b1c <sd_mmc_mci_write_multiple_sector+0x24c>
80007ac6:	18 98       	mov	r8,r12
80007ac8:	ec 18 00 01 	eorl	r8,0x1
80007acc:	5c 58       	castu.b	r8
80007ace:	cf a1       	brne	80007ac2 <sd_mmc_mci_write_multiple_sector+0x1f2>
  return true;
80007ad0:	30 18       	mov	r8,1
}
80007ad2:	10 9c       	mov	r12,r8
80007ad4:	2f bd       	sub	sp,-20
80007ad6:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ada:	00 00       	add	r0,r0
80007adc:	00 00       	add	r0,r0
80007ade:	06 28       	rsub	r8,r3
80007ae0:	00 00       	add	r0,r0
80007ae2:	06 90       	mov	r0,r3
80007ae4:	00 00       	add	r0,r0
80007ae6:	06 8e       	andn	lr,r3
80007ae8:	00 00       	add	r0,r0
80007aea:	06 8c       	andn	r12,r3
80007aec:	80 00       	ld.sh	r0,r0[0x0]
80007aee:	75 18       	ld.w	r8,r10[0x44]
80007af0:	80 00       	ld.sh	r0,r0[0x0]
80007af2:	75 f4       	ld.w	r4,r10[0x7c]
80007af4:	80 00       	ld.sh	r0,r0[0x0]
80007af6:	5e e4       	retqs	r4
80007af8:	80 00       	ld.sh	r0,r0[0x0]
80007afa:	76 3c       	ld.w	r12,r11[0xc]
80007afc:	80 00       	ld.sh	r0,r0[0x0]
80007afe:	5e d8       	retvc	r8
80007b00:	80 00       	ld.sh	r0,r0[0x0]
80007b02:	ed b4       	*unknown*
80007b04:	80 00       	ld.sh	r0,r0[0x0]
80007b06:	45 38       	lddsp	r8,sp[0x14c]
80007b08:	00 00       	add	r0,r0
80007b0a:	0b e0       	ld.ub	r0,r5[0x6]
80007b0c:	00 00       	add	r0,r0
80007b0e:	09 d8       	ld.ub	r8,r4[0x5]
80007b10:	80 00       	ld.sh	r0,r0[0x0]
80007b12:	40 40       	lddsp	r0,sp[0x10]
80007b14:	80 00       	ld.sh	r0,r0[0x0]
80007b16:	6f 3c       	ld.w	r12,r7[0x4c]
80007b18:	80 00       	ld.sh	r0,r0[0x0]
80007b1a:	d0 54       	*unknown*
80007b1c:	80 00       	ld.sh	r0,r0[0x0]
80007b1e:	6f 8c       	ld.w	r12,r7[0x60]

80007b20 <sd_mmc_mci_cmd_send_status>:
   return true;
}
#endif      // end FUNC_MMC_CARD_SECU

bool  sd_mmc_mci_cmd_send_status(uint8_t slot)
{
80007b20:	eb cd 40 80 	pushm	r7,lr
80007b24:	1a 97       	mov	r7,sp
80007b26:	20 1d       	sub	sp,4
80007b28:	18 98       	mov	r8,r12
80007b2a:	ef 68 ff fc 	st.b	r7[-4],r8
  if (slot > MCI_LAST_SLOTS)
80007b2e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b32:	30 18       	mov	r8,1
80007b34:	f0 09 18 00 	cp.b	r9,r8
80007b38:	e0 88 00 04 	brls	80007b40 <sd_mmc_mci_cmd_send_status+0x20>
    return false;
80007b3c:	30 08       	mov	r8,0
80007b3e:	c2 28       	rjmp	80007b82 <sd_mmc_mci_cmd_send_status+0x62>
  // Select Slot card before any other command.
  mci_select_card(mci, slot, g_card_bus_width[slot]);
80007b40:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007b44:	49 29       	lddpc	r9,80007b8c <sd_mmc_mci_cmd_send_status+0x6c>
80007b46:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007b4a:	10 9a       	mov	r10,r8
80007b4c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b50:	49 08       	lddpc	r8,80007b90 <sd_mmc_mci_cmd_send_status+0x70>
80007b52:	70 08       	ld.w	r8,r8[0x0]
80007b54:	12 9b       	mov	r11,r9
80007b56:	10 9c       	mov	r12,r8
80007b58:	f0 1f 00 0f 	mcall	80007b94 <sd_mmc_mci_cmd_send_status+0x74>

  if (mci_send_cmd(mci, SD_MMC_SEND_STATUS_CMD, g_card_rca[slot])!=MCI_SUCCESS)
80007b5c:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007b60:	48 e8       	lddpc	r8,80007b98 <sd_mmc_mci_cmd_send_status+0x78>
80007b62:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80007b66:	48 b8       	lddpc	r8,80007b90 <sd_mmc_mci_cmd_send_status+0x70>
80007b68:	70 08       	ld.w	r8,r8[0x0]
80007b6a:	12 9a       	mov	r10,r9
80007b6c:	e0 6b 10 4d 	mov	r11,4173
80007b70:	10 9c       	mov	r12,r8
80007b72:	f0 1f 00 0b 	mcall	80007b9c <sd_mmc_mci_cmd_send_status+0x7c>
80007b76:	18 98       	mov	r8,r12
80007b78:	58 08       	cp.w	r8,0
80007b7a:	c0 30       	breq	80007b80 <sd_mmc_mci_cmd_send_status+0x60>
    return false;
80007b7c:	30 08       	mov	r8,0
80007b7e:	c0 28       	rjmp	80007b82 <sd_mmc_mci_cmd_send_status+0x62>

  return true;
80007b80:	30 18       	mov	r8,1
}
80007b82:	10 9c       	mov	r12,r8
80007b84:	2f fd       	sub	sp,-4
80007b86:	e3 cd 80 80 	ldm	sp++,r7,pc
80007b8a:	00 00       	add	r0,r0
80007b8c:	00 00       	add	r0,r0
80007b8e:	0b d8       	ld.ub	r8,r5[0x5]
80007b90:	00 00       	add	r0,r0
80007b92:	01 34       	ld.ub	r4,r0++
80007b94:	80 00       	ld.sh	r0,r0[0x0]
80007b96:	94 fc       	ld.uh	r12,r10[0xe]
80007b98:	00 00       	add	r0,r0
80007b9a:	09 c8       	ld.ub	r8,r4[0x4]
80007b9c:	80 00       	ld.sh	r0,r0[0x0]
80007b9e:	93 64       	st.w	r9[0x18],r4

80007ba0 <sd_mmc_mci_test_unit_ready>:
80007ba0:	eb cd 40 80 	pushm	r7,lr
80007ba4:	1a 97       	mov	r7,sp
80007ba6:	20 1d       	sub	sp,4
80007ba8:	18 98       	mov	r8,r12
80007baa:	ef 68 ff fc 	st.b	r7[-4],r8
80007bae:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007bb2:	30 18       	mov	r8,1
80007bb4:	f0 09 18 00 	cp.b	r9,r8
80007bb8:	e0 88 00 04 	brls	80007bc0 <sd_mmc_mci_test_unit_ready+0x20>
80007bbc:	30 18       	mov	r8,1
80007bbe:	c4 d8       	rjmp	80007c58 <sd_mmc_mci_test_unit_ready+0xb8>
80007bc0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007bc4:	4a 79       	lddpc	r9,80007c60 <sd_mmc_mci_test_unit_ready+0xc0>
80007bc6:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007bca:	58 18       	cp.w	r8,1
80007bcc:	c1 d0       	breq	80007c06 <sd_mmc_mci_test_unit_ready+0x66>
80007bce:	58 28       	cp.w	r8,2
80007bd0:	c3 50       	breq	80007c3a <sd_mmc_mci_test_unit_ready+0x9a>
80007bd2:	58 08       	cp.w	r8,0
80007bd4:	c3 b1       	brne	80007c4a <sd_mmc_mci_test_unit_ready+0xaa>
80007bd6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007bda:	4a 3a       	lddpc	r10,80007c64 <sd_mmc_mci_test_unit_ready+0xc4>
80007bdc:	30 08       	mov	r8,0
80007bde:	f4 09 0b 08 	st.b	r10[r9],r8
80007be2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007be6:	10 9c       	mov	r12,r8
80007be8:	f0 1f 00 20 	mcall	80007c68 <sd_mmc_mci_test_unit_ready+0xc8>
80007bec:	18 98       	mov	r8,r12
80007bee:	58 08       	cp.w	r8,0
80007bf0:	c0 90       	breq	80007c02 <sd_mmc_mci_test_unit_ready+0x62>
80007bf2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007bf6:	49 ba       	lddpc	r10,80007c60 <sd_mmc_mci_test_unit_ready+0xc0>
80007bf8:	30 18       	mov	r8,1
80007bfa:	f4 09 0b 08 	st.b	r10[r9],r8
80007bfe:	30 38       	mov	r8,3
80007c00:	c2 c8       	rjmp	80007c58 <sd_mmc_mci_test_unit_ready+0xb8>
80007c02:	30 28       	mov	r8,2
80007c04:	c2 a8       	rjmp	80007c58 <sd_mmc_mci_test_unit_ready+0xb8>
80007c06:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007c0a:	10 9c       	mov	r12,r8
80007c0c:	f0 1f 00 17 	mcall	80007c68 <sd_mmc_mci_test_unit_ready+0xc8>
80007c10:	18 98       	mov	r8,r12
80007c12:	ec 18 00 01 	eorl	r8,0x1
80007c16:	5c 58       	castu.b	r8
80007c18:	c0 f0       	breq	80007c36 <sd_mmc_mci_test_unit_ready+0x96>
80007c1a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c1e:	49 1a       	lddpc	r10,80007c60 <sd_mmc_mci_test_unit_ready+0xc0>
80007c20:	30 28       	mov	r8,2
80007c22:	f4 09 0b 08 	st.b	r10[r9],r8
80007c26:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c2a:	48 fa       	lddpc	r10,80007c64 <sd_mmc_mci_test_unit_ready+0xc4>
80007c2c:	30 08       	mov	r8,0
80007c2e:	f4 09 0b 08 	st.b	r10[r9],r8
80007c32:	30 38       	mov	r8,3
80007c34:	c1 28       	rjmp	80007c58 <sd_mmc_mci_test_unit_ready+0xb8>
80007c36:	30 08       	mov	r8,0
80007c38:	c1 08       	rjmp	80007c58 <sd_mmc_mci_test_unit_ready+0xb8>
80007c3a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c3e:	48 9a       	lddpc	r10,80007c60 <sd_mmc_mci_test_unit_ready+0xc0>
80007c40:	30 08       	mov	r8,0
80007c42:	f4 09 0b 08 	st.b	r10[r9],r8
80007c46:	30 28       	mov	r8,2
80007c48:	c0 88       	rjmp	80007c58 <sd_mmc_mci_test_unit_ready+0xb8>
80007c4a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007c4e:	48 5a       	lddpc	r10,80007c60 <sd_mmc_mci_test_unit_ready+0xc0>
80007c50:	30 08       	mov	r8,0
80007c52:	f4 09 0b 08 	st.b	r10[r9],r8
80007c56:	30 38       	mov	r8,3
80007c58:	10 9c       	mov	r12,r8
80007c5a:	2f fd       	sub	sp,-4
80007c5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c60:	00 00       	add	r0,r0
80007c62:	01 38       	ld.ub	r8,r0++
80007c64:	00 00       	add	r0,r0
80007c66:	06 14       	sub	r4,r3
80007c68:	80 00       	ld.sh	r0,r0[0x0]
80007c6a:	6f ac       	ld.w	r12,r7[0x68]

80007c6c <sd_mmc_mci_test_unit_ready_0>:
80007c6c:	eb cd 40 80 	pushm	r7,lr
80007c70:	1a 97       	mov	r7,sp
80007c72:	30 0c       	mov	r12,0
80007c74:	f0 1f 00 03 	mcall	80007c80 <sd_mmc_mci_test_unit_ready_0+0x14>
80007c78:	18 98       	mov	r8,r12
80007c7a:	10 9c       	mov	r12,r8
80007c7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c80:	80 00       	ld.sh	r0,r0[0x0]
80007c82:	7b a0       	ld.w	r0,sp[0x68]

80007c84 <sd_mmc_mci_test_unit_ready_1>:
80007c84:	eb cd 40 80 	pushm	r7,lr
80007c88:	1a 97       	mov	r7,sp
80007c8a:	30 1c       	mov	r12,1
80007c8c:	f0 1f 00 03 	mcall	80007c98 <sd_mmc_mci_test_unit_ready_1+0x14>
80007c90:	18 98       	mov	r8,r12
80007c92:	10 9c       	mov	r12,r8
80007c94:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c98:	80 00       	ld.sh	r0,r0[0x0]
80007c9a:	7b a0       	ld.w	r0,sp[0x68]

80007c9c <sd_mmc_mci_read_capacity>:
80007c9c:	eb cd 40 80 	pushm	r7,lr
80007ca0:	1a 97       	mov	r7,sp
80007ca2:	20 2d       	sub	sp,8
80007ca4:	18 98       	mov	r8,r12
80007ca6:	ef 4b ff f8 	st.w	r7[-8],r11
80007caa:	ef 68 ff fc 	st.b	r7[-4],r8
80007cae:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007cb2:	10 9c       	mov	r12,r8
80007cb4:	f0 1f 00 0c 	mcall	80007ce4 <sd_mmc_mci_read_capacity+0x48>
80007cb8:	18 98       	mov	r8,r12
80007cba:	ec 18 00 01 	eorl	r8,0x1
80007cbe:	5c 58       	castu.b	r8
80007cc0:	c0 30       	breq	80007cc6 <sd_mmc_mci_read_capacity+0x2a>
80007cc2:	30 28       	mov	r8,2
80007cc4:	c0 c8       	rjmp	80007cdc <sd_mmc_mci_read_capacity+0x40>
80007cc6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007cca:	48 88       	lddpc	r8,80007ce8 <sd_mmc_mci_read_capacity+0x4c>
80007ccc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80007cd0:	f0 c9 00 01 	sub	r9,r8,1
80007cd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007cd8:	91 09       	st.w	r8[0x0],r9
80007cda:	30 08       	mov	r8,0
80007cdc:	10 9c       	mov	r12,r8
80007cde:	2f ed       	sub	sp,-8
80007ce0:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ce4:	80 00       	ld.sh	r0,r0[0x0]
80007ce6:	6f ac       	ld.w	r12,r7[0x68]
80007ce8:	00 00       	add	r0,r0
80007cea:	09 d0       	ld.ub	r0,r4[0x5]

80007cec <sd_mmc_mci_read_capacity_0>:
80007cec:	eb cd 40 80 	pushm	r7,lr
80007cf0:	1a 97       	mov	r7,sp
80007cf2:	20 1d       	sub	sp,4
80007cf4:	ef 4c ff fc 	st.w	r7[-4],r12
80007cf8:	ee fb ff fc 	ld.w	r11,r7[-4]
80007cfc:	30 0c       	mov	r12,0
80007cfe:	f0 1f 00 04 	mcall	80007d0c <sd_mmc_mci_read_capacity_0+0x20>
80007d02:	18 98       	mov	r8,r12
80007d04:	10 9c       	mov	r12,r8
80007d06:	2f fd       	sub	sp,-4
80007d08:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d0c:	80 00       	ld.sh	r0,r0[0x0]
80007d0e:	7c 9c       	ld.w	r12,lr[0x24]

80007d10 <sd_mmc_mci_read_capacity_1>:
80007d10:	eb cd 40 80 	pushm	r7,lr
80007d14:	1a 97       	mov	r7,sp
80007d16:	20 1d       	sub	sp,4
80007d18:	ef 4c ff fc 	st.w	r7[-4],r12
80007d1c:	ee fb ff fc 	ld.w	r11,r7[-4]
80007d20:	30 1c       	mov	r12,1
80007d22:	f0 1f 00 04 	mcall	80007d30 <sd_mmc_mci_read_capacity_1+0x20>
80007d26:	18 98       	mov	r8,r12
80007d28:	10 9c       	mov	r12,r8
80007d2a:	2f fd       	sub	sp,-4
80007d2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d30:	80 00       	ld.sh	r0,r0[0x0]
80007d32:	7c 9c       	ld.w	r12,lr[0x24]

80007d34 <sd_mmc_mci_wr_protect>:
80007d34:	eb cd 40 80 	pushm	r7,lr
80007d38:	1a 97       	mov	r7,sp
80007d3a:	20 1d       	sub	sp,4
80007d3c:	18 98       	mov	r8,r12
80007d3e:	ef 68 ff fc 	st.b	r7[-4],r8
80007d42:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007d46:	10 9c       	mov	r12,r8
80007d48:	f0 1f 00 04 	mcall	80007d58 <sd_mmc_mci_wr_protect+0x24>
80007d4c:	18 98       	mov	r8,r12
80007d4e:	10 9c       	mov	r12,r8
80007d50:	2f fd       	sub	sp,-4
80007d52:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d56:	00 00       	add	r0,r0
80007d58:	80 00       	ld.sh	r0,r0[0x0]
80007d5a:	5f 50       	srlt	r0

80007d5c <sd_mmc_mci_wr_protect_0>:
80007d5c:	eb cd 40 80 	pushm	r7,lr
80007d60:	1a 97       	mov	r7,sp
80007d62:	30 0c       	mov	r12,0
80007d64:	f0 1f 00 03 	mcall	80007d70 <sd_mmc_mci_wr_protect_0+0x14>
80007d68:	18 98       	mov	r8,r12
80007d6a:	10 9c       	mov	r12,r8
80007d6c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d70:	80 00       	ld.sh	r0,r0[0x0]
80007d72:	7d 34       	ld.w	r4,lr[0x4c]

80007d74 <sd_mmc_mci_wr_protect_1>:
80007d74:	eb cd 40 80 	pushm	r7,lr
80007d78:	1a 97       	mov	r7,sp
80007d7a:	30 1c       	mov	r12,1
80007d7c:	f0 1f 00 03 	mcall	80007d88 <sd_mmc_mci_wr_protect_1+0x14>
80007d80:	18 98       	mov	r8,r12
80007d82:	10 9c       	mov	r12,r8
80007d84:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d88:	80 00       	ld.sh	r0,r0[0x0]
80007d8a:	7d 34       	ld.w	r4,lr[0x4c]

80007d8c <sd_mmc_mci_removal>:
80007d8c:	eb cd 40 80 	pushm	r7,lr
80007d90:	1a 97       	mov	r7,sp
80007d92:	20 1d       	sub	sp,4
80007d94:	18 98       	mov	r8,r12
80007d96:	ef 68 ff fc 	st.b	r7[-4],r8
80007d9a:	30 08       	mov	r8,0
80007d9c:	10 9c       	mov	r12,r8
80007d9e:	2f fd       	sub	sp,-4
80007da0:	e3 cd 80 80 	ldm	sp++,r7,pc

80007da4 <sd_mmc_mci_removal_0>:
80007da4:	eb cd 40 80 	pushm	r7,lr
80007da8:	1a 97       	mov	r7,sp
80007daa:	30 0c       	mov	r12,0
80007dac:	f0 1f 00 03 	mcall	80007db8 <sd_mmc_mci_removal_0+0x14>
80007db0:	18 98       	mov	r8,r12
80007db2:	10 9c       	mov	r12,r8
80007db4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007db8:	80 00       	ld.sh	r0,r0[0x0]
80007dba:	7d 8c       	ld.w	r12,lr[0x60]

80007dbc <sd_mmc_mci_removal_1>:
80007dbc:	eb cd 40 80 	pushm	r7,lr
80007dc0:	1a 97       	mov	r7,sp
80007dc2:	30 1c       	mov	r12,1
80007dc4:	f0 1f 00 03 	mcall	80007dd0 <sd_mmc_mci_removal_1+0x14>
80007dc8:	18 98       	mov	r8,r12
80007dca:	10 9c       	mov	r12,r8
80007dcc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007dd0:	80 00       	ld.sh	r0,r0[0x0]
80007dd2:	7d 8c       	ld.w	r12,lr[0x60]

80007dd4 <sd_mmc_mci_usb_read_10>:
80007dd4:	eb cd 40 80 	pushm	r7,lr
80007dd8:	1a 97       	mov	r7,sp
80007dda:	20 3d       	sub	sp,12
80007ddc:	18 99       	mov	r9,r12
80007dde:	ef 4b ff f8 	st.w	r7[-8],r11
80007de2:	14 98       	mov	r8,r10
80007de4:	ef 69 ff fc 	st.b	r7[-4],r9
80007de8:	ef 58 ff f4 	st.h	r7[-12],r8
80007dec:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007df0:	10 9c       	mov	r12,r8
80007df2:	f0 1f 00 1f 	mcall	80007e6c <sd_mmc_mci_usb_read_10+0x98>
80007df6:	18 98       	mov	r8,r12
80007df8:	ec 18 00 01 	eorl	r8,0x1
80007dfc:	5c 58       	castu.b	r8
80007dfe:	c0 30       	breq	80007e04 <sd_mmc_mci_usb_read_10+0x30>
80007e00:	30 28       	mov	r8,2
80007e02:	c3 08       	rjmp	80007e62 <sd_mmc_mci_usb_read_10+0x8e>
80007e04:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007e08:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007e0c:	30 0a       	mov	r10,0
80007e0e:	ee fb ff f8 	ld.w	r11,r7[-8]
80007e12:	10 9c       	mov	r12,r8
80007e14:	f0 1f 00 17 	mcall	80007e70 <sd_mmc_mci_usb_read_10+0x9c>
80007e18:	18 98       	mov	r8,r12
80007e1a:	ec 18 00 01 	eorl	r8,0x1
80007e1e:	5c 58       	castu.b	r8
80007e20:	c0 30       	breq	80007e26 <sd_mmc_mci_usb_read_10+0x52>
80007e22:	30 18       	mov	r8,1
80007e24:	c1 f8       	rjmp	80007e62 <sd_mmc_mci_usb_read_10+0x8e>
80007e26:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007e2a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007e2e:	ee fa ff f8 	ld.w	r10,r7[-8]
80007e32:	12 9b       	mov	r11,r9
80007e34:	10 9c       	mov	r12,r8
80007e36:	f0 1f 00 10 	mcall	80007e74 <sd_mmc_mci_usb_read_10+0xa0>
80007e3a:	18 98       	mov	r8,r12
80007e3c:	ec 18 00 01 	eorl	r8,0x1
80007e40:	5c 58       	castu.b	r8
80007e42:	c0 30       	breq	80007e48 <sd_mmc_mci_usb_read_10+0x74>
80007e44:	30 18       	mov	r8,1
80007e46:	c0 e8       	rjmp	80007e62 <sd_mmc_mci_usb_read_10+0x8e>
80007e48:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007e4c:	10 9c       	mov	r12,r8
80007e4e:	f0 1f 00 0b 	mcall	80007e78 <sd_mmc_mci_usb_read_10+0xa4>
80007e52:	18 98       	mov	r8,r12
80007e54:	ec 18 00 01 	eorl	r8,0x1
80007e58:	5c 58       	castu.b	r8
80007e5a:	c0 30       	breq	80007e60 <sd_mmc_mci_usb_read_10+0x8c>
80007e5c:	30 18       	mov	r8,1
80007e5e:	c0 28       	rjmp	80007e62 <sd_mmc_mci_usb_read_10+0x8e>
80007e60:	30 08       	mov	r8,0
80007e62:	10 9c       	mov	r12,r8
80007e64:	2f dd       	sub	sp,-12
80007e66:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e6a:	00 00       	add	r0,r0
80007e6c:	80 00       	ld.sh	r0,r0[0x0]
80007e6e:	6f ac       	ld.w	r12,r7[0x68]
80007e70:	80 00       	ld.sh	r0,r0[0x0]
80007e72:	70 8c       	ld.w	r12,r8[0x20]
80007e74:	80 00       	ld.sh	r0,r0[0x0]
80007e76:	76 80       	ld.w	r0,r11[0x20]
80007e78:	80 00       	ld.sh	r0,r0[0x0]
80007e7a:	72 20       	ld.w	r0,r9[0x8]

80007e7c <sd_mmc_mci_usb_read_10_0>:
80007e7c:	eb cd 40 80 	pushm	r7,lr
80007e80:	1a 97       	mov	r7,sp
80007e82:	20 2d       	sub	sp,8
80007e84:	ef 4c ff fc 	st.w	r7[-4],r12
80007e88:	16 98       	mov	r8,r11
80007e8a:	ef 58 ff f8 	st.h	r7[-8],r8
80007e8e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007e92:	10 9a       	mov	r10,r8
80007e94:	ee fb ff fc 	ld.w	r11,r7[-4]
80007e98:	30 0c       	mov	r12,0
80007e9a:	f0 1f 00 04 	mcall	80007ea8 <sd_mmc_mci_usb_read_10_0+0x2c>
80007e9e:	18 98       	mov	r8,r12
80007ea0:	10 9c       	mov	r12,r8
80007ea2:	2f ed       	sub	sp,-8
80007ea4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ea8:	80 00       	ld.sh	r0,r0[0x0]
80007eaa:	7d d4       	ld.w	r4,lr[0x74]

80007eac <sd_mmc_mci_usb_read_10_1>:
80007eac:	eb cd 40 80 	pushm	r7,lr
80007eb0:	1a 97       	mov	r7,sp
80007eb2:	20 2d       	sub	sp,8
80007eb4:	ef 4c ff fc 	st.w	r7[-4],r12
80007eb8:	16 98       	mov	r8,r11
80007eba:	ef 58 ff f8 	st.h	r7[-8],r8
80007ebe:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007ec2:	10 9a       	mov	r10,r8
80007ec4:	ee fb ff fc 	ld.w	r11,r7[-4]
80007ec8:	30 1c       	mov	r12,1
80007eca:	f0 1f 00 04 	mcall	80007ed8 <sd_mmc_mci_usb_read_10_1+0x2c>
80007ece:	18 98       	mov	r8,r12
80007ed0:	10 9c       	mov	r12,r8
80007ed2:	2f ed       	sub	sp,-8
80007ed4:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ed8:	80 00       	ld.sh	r0,r0[0x0]
80007eda:	7d d4       	ld.w	r4,lr[0x74]

80007edc <sd_mmc_mci_usb_write_10>:
80007edc:	eb cd 40 80 	pushm	r7,lr
80007ee0:	1a 97       	mov	r7,sp
80007ee2:	20 3d       	sub	sp,12
80007ee4:	18 99       	mov	r9,r12
80007ee6:	ef 4b ff f8 	st.w	r7[-8],r11
80007eea:	14 98       	mov	r8,r10
80007eec:	ef 69 ff fc 	st.b	r7[-4],r9
80007ef0:	ef 58 ff f4 	st.h	r7[-12],r8
80007ef4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007ef8:	10 9c       	mov	r12,r8
80007efa:	f0 1f 00 1f 	mcall	80007f74 <sd_mmc_mci_usb_write_10+0x98>
80007efe:	18 98       	mov	r8,r12
80007f00:	ec 18 00 01 	eorl	r8,0x1
80007f04:	5c 58       	castu.b	r8
80007f06:	c0 30       	breq	80007f0c <sd_mmc_mci_usb_write_10+0x30>
80007f08:	30 28       	mov	r8,2
80007f0a:	c3 08       	rjmp	80007f6a <sd_mmc_mci_usb_write_10+0x8e>
80007f0c:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007f10:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007f14:	30 0a       	mov	r10,0
80007f16:	ee fb ff f8 	ld.w	r11,r7[-8]
80007f1a:	10 9c       	mov	r12,r8
80007f1c:	f0 1f 00 17 	mcall	80007f78 <sd_mmc_mci_usb_write_10+0x9c>
80007f20:	18 98       	mov	r8,r12
80007f22:	ec 18 00 01 	eorl	r8,0x1
80007f26:	5c 58       	castu.b	r8
80007f28:	c0 30       	breq	80007f2e <sd_mmc_mci_usb_write_10+0x52>
80007f2a:	30 18       	mov	r8,1
80007f2c:	c1 f8       	rjmp	80007f6a <sd_mmc_mci_usb_write_10+0x8e>
80007f2e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80007f32:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007f36:	ee fa ff f8 	ld.w	r10,r7[-8]
80007f3a:	12 9b       	mov	r11,r9
80007f3c:	10 9c       	mov	r12,r8
80007f3e:	f0 1f 00 10 	mcall	80007f7c <sd_mmc_mci_usb_write_10+0xa0>
80007f42:	18 98       	mov	r8,r12
80007f44:	ec 18 00 01 	eorl	r8,0x1
80007f48:	5c 58       	castu.b	r8
80007f4a:	c0 30       	breq	80007f50 <sd_mmc_mci_usb_write_10+0x74>
80007f4c:	30 18       	mov	r8,1
80007f4e:	c0 e8       	rjmp	80007f6a <sd_mmc_mci_usb_write_10+0x8e>
80007f50:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007f54:	10 9c       	mov	r12,r8
80007f56:	f0 1f 00 0b 	mcall	80007f80 <sd_mmc_mci_usb_write_10+0xa4>
80007f5a:	18 98       	mov	r8,r12
80007f5c:	ec 18 00 01 	eorl	r8,0x1
80007f60:	5c 58       	castu.b	r8
80007f62:	c0 30       	breq	80007f68 <sd_mmc_mci_usb_write_10+0x8c>
80007f64:	30 18       	mov	r8,1
80007f66:	c0 28       	rjmp	80007f6a <sd_mmc_mci_usb_write_10+0x8e>
80007f68:	30 08       	mov	r8,0
80007f6a:	10 9c       	mov	r12,r8
80007f6c:	2f dd       	sub	sp,-12
80007f6e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f72:	00 00       	add	r0,r0
80007f74:	80 00       	ld.sh	r0,r0[0x0]
80007f76:	6f ac       	ld.w	r12,r7[0x68]
80007f78:	80 00       	ld.sh	r0,r0[0x0]
80007f7a:	72 bc       	ld.w	r12,r9[0x2c]
80007f7c:	80 00       	ld.sh	r0,r0[0x0]
80007f7e:	78 d0       	ld.w	r0,r12[0x34]
80007f80:	80 00       	ld.sh	r0,r0[0x0]
80007f82:	74 28       	ld.w	r8,r10[0x8]

80007f84 <sd_mmc_mci_usb_write_10_0>:
80007f84:	eb cd 40 80 	pushm	r7,lr
80007f88:	1a 97       	mov	r7,sp
80007f8a:	20 2d       	sub	sp,8
80007f8c:	ef 4c ff fc 	st.w	r7[-4],r12
80007f90:	16 98       	mov	r8,r11
80007f92:	ef 58 ff f8 	st.h	r7[-8],r8
80007f96:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007f9a:	10 9a       	mov	r10,r8
80007f9c:	ee fb ff fc 	ld.w	r11,r7[-4]
80007fa0:	30 0c       	mov	r12,0
80007fa2:	f0 1f 00 04 	mcall	80007fb0 <sd_mmc_mci_usb_write_10_0+0x2c>
80007fa6:	18 98       	mov	r8,r12
80007fa8:	10 9c       	mov	r12,r8
80007faa:	2f ed       	sub	sp,-8
80007fac:	e3 cd 80 80 	ldm	sp++,r7,pc
80007fb0:	80 00       	ld.sh	r0,r0[0x0]
80007fb2:	7e dc       	ld.w	r12,pc[0x34]

80007fb4 <sd_mmc_mci_usb_write_10_1>:
80007fb4:	eb cd 40 80 	pushm	r7,lr
80007fb8:	1a 97       	mov	r7,sp
80007fba:	20 2d       	sub	sp,8
80007fbc:	ef 4c ff fc 	st.w	r7[-4],r12
80007fc0:	16 98       	mov	r8,r11
80007fc2:	ef 58 ff f8 	st.h	r7[-8],r8
80007fc6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80007fca:	10 9a       	mov	r10,r8
80007fcc:	ee fb ff fc 	ld.w	r11,r7[-4]
80007fd0:	30 1c       	mov	r12,1
80007fd2:	f0 1f 00 04 	mcall	80007fe0 <sd_mmc_mci_usb_write_10_1+0x2c>
80007fd6:	18 98       	mov	r8,r12
80007fd8:	10 9c       	mov	r12,r8
80007fda:	2f ed       	sub	sp,-8
80007fdc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007fe0:	80 00       	ld.sh	r0,r0[0x0]
80007fe2:	7e dc       	ld.w	r12,pc[0x34]

80007fe4 <aes_configure>:
80007fe4:	eb cd 40 80 	pushm	r7,lr
80007fe8:	1a 97       	mov	r7,sp
80007fea:	20 2d       	sub	sp,8
80007fec:	ef 4c ff fc 	st.w	r7[-4],r12
80007ff0:	ef 4b ff f8 	st.w	r7[-8],r11
80007ff4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007ff8:	11 88       	ld.ub	r8,r8[0x0]
80007ffa:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80007ffe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008002:	11 98       	ld.ub	r8,r8[0x1]
80008004:	a5 68       	lsl	r8,0x4
80008006:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000800a:	10 49       	or	r9,r8
8000800c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008010:	11 a8       	ld.ub	r8,r8[0x2]
80008012:	a9 68       	lsl	r8,0x8
80008014:	e2 18 03 00 	andl	r8,0x300,COH
80008018:	10 49       	or	r9,r8
8000801a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000801e:	11 b8       	ld.ub	r8,r8[0x3]
80008020:	ab 68       	lsl	r8,0xa
80008022:	e2 18 0c 00 	andl	r8,0xc00,COH
80008026:	10 49       	or	r9,r8
80008028:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000802c:	11 c8       	ld.ub	r8,r8[0x4]
8000802e:	ad 68       	lsl	r8,0xc
80008030:	e2 18 70 00 	andl	r8,0x7000,COH
80008034:	10 49       	or	r9,r8
80008036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000803a:	11 d8       	ld.ub	r8,r8[0x5]
8000803c:	af 78       	lsl	r8,0xf
8000803e:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80008042:	10 49       	or	r9,r8
80008044:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008048:	11 e8       	ld.ub	r8,r8[0x6]
8000804a:	b1 68       	lsl	r8,0x10
8000804c:	e6 18 00 07 	andh	r8,0x7,COH
80008050:	10 49       	or	r9,r8
80008052:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008056:	11 f8       	ld.ub	r8,r8[0x7]
80008058:	b9 68       	lsl	r8,0x18
8000805a:	e6 18 1f 00 	andh	r8,0x1f00,COH
8000805e:	f3 e8 10 08 	or	r8,r9,r8
80008062:	ea 18 00 e0 	orh	r8,0xe0
80008066:	10 99       	mov	r9,r8
80008068:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000806c:	91 19       	st.w	r8[0x4],r9
8000806e:	2f ed       	sub	sp,-8
80008070:	e3 cd 80 80 	ldm	sp++,r7,pc

80008074 <aes_set_key>:
80008074:	eb cd 40 80 	pushm	r7,lr
80008078:	1a 97       	mov	r7,sp
8000807a:	20 4d       	sub	sp,16
8000807c:	ef 4c ff f4 	st.w	r7[-12],r12
80008080:	ef 4b ff f0 	st.w	r7[-16],r11
80008084:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008088:	2e 08       	sub	r8,-32
8000808a:	ef 48 ff f8 	st.w	r7[-8],r8
8000808e:	30 08       	mov	r8,0
80008090:	ef 68 ff ff 	st.b	r7[-1],r8
80008094:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008098:	70 18       	ld.w	r8,r8[0x4]
8000809a:	e2 18 0c 00 	andl	r8,0xc00,COH
8000809e:	ab 88       	lsr	r8,0xa
800080a0:	58 18       	cp.w	r8,1
800080a2:	c0 90       	breq	800080b4 <aes_set_key+0x40>
800080a4:	c0 43       	brcs	800080ac <aes_set_key+0x38>
800080a6:	58 28       	cp.w	r8,2
800080a8:	c0 a0       	breq	800080bc <aes_set_key+0x48>
800080aa:	c2 38       	rjmp	800080f0 <aes_set_key+0x7c>
800080ac:	30 48       	mov	r8,4
800080ae:	ef 68 ff ff 	st.b	r7[-1],r8
800080b2:	c0 98       	rjmp	800080c4 <aes_set_key+0x50>
800080b4:	30 68       	mov	r8,6
800080b6:	ef 68 ff ff 	st.b	r7[-1],r8
800080ba:	c0 58       	rjmp	800080c4 <aes_set_key+0x50>
800080bc:	30 88       	mov	r8,8
800080be:	ef 68 ff ff 	st.b	r7[-1],r8
800080c2:	c1 78       	rjmp	800080f0 <aes_set_key+0x7c>
800080c4:	c1 68       	rjmp	800080f0 <aes_set_key+0x7c>
800080c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800080ca:	70 09       	ld.w	r9,r8[0x0]
800080cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080d0:	91 09       	st.w	r8[0x0],r9
800080d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080d6:	2f c8       	sub	r8,-4
800080d8:	ef 48 ff f8 	st.w	r7[-8],r8
800080dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800080e0:	2f c8       	sub	r8,-4
800080e2:	ef 48 ff f0 	st.w	r7[-16],r8
800080e6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800080ea:	20 18       	sub	r8,1
800080ec:	ef 68 ff ff 	st.b	r7[-1],r8
800080f0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800080f4:	30 08       	mov	r8,0
800080f6:	f0 09 18 00 	cp.b	r9,r8
800080fa:	ce 61       	brne	800080c6 <aes_set_key+0x52>
800080fc:	2f cd       	sub	sp,-16
800080fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80008102 <aes_set_initvector>:
80008102:	eb cd 40 80 	pushm	r7,lr
80008106:	1a 97       	mov	r7,sp
80008108:	20 4d       	sub	sp,16
8000810a:	ef 4c ff f4 	st.w	r7[-12],r12
8000810e:	ef 4b ff f0 	st.w	r7[-16],r11
80008112:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008116:	2a 08       	sub	r8,-96
80008118:	ef 48 ff f8 	st.w	r7[-8],r8
8000811c:	30 08       	mov	r8,0
8000811e:	ef 48 ff fc 	st.w	r7[-4],r8
80008122:	c1 68       	rjmp	8000814e <aes_set_initvector+0x4c>
80008124:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008128:	70 09       	ld.w	r9,r8[0x0]
8000812a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000812e:	91 09       	st.w	r8[0x0],r9
80008130:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008134:	2f c8       	sub	r8,-4
80008136:	ef 48 ff f8 	st.w	r7[-8],r8
8000813a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000813e:	2f c8       	sub	r8,-4
80008140:	ef 48 ff f0 	st.w	r7[-16],r8
80008144:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008148:	2f f8       	sub	r8,-1
8000814a:	ef 48 ff fc 	st.w	r7[-4],r8
8000814e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008152:	58 38       	cp.w	r8,3
80008154:	fe 9a ff e8 	brle	80008124 <aes_set_initvector+0x22>
80008158:	2f cd       	sub	sp,-16
8000815a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000815e <aes_write_inputdata>:
8000815e:	eb cd 40 80 	pushm	r7,lr
80008162:	1a 97       	mov	r7,sp
80008164:	20 4d       	sub	sp,16
80008166:	ef 4c ff f4 	st.w	r7[-12],r12
8000816a:	ef 4b ff f0 	st.w	r7[-16],r11
8000816e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008172:	2c 08       	sub	r8,-64
80008174:	ef 48 ff f8 	st.w	r7[-8],r8
80008178:	30 48       	mov	r8,4
8000817a:	ef 68 ff ff 	st.b	r7[-1],r8
8000817e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008182:	70 18       	ld.w	r8,r8[0x4]
80008184:	e2 18 70 00 	andl	r8,0x7000,COH
80008188:	ad 88       	lsr	r8,0xc
8000818a:	58 38       	cp.w	r8,3
8000818c:	c2 c1       	brne	800081e4 <aes_write_inputdata+0x86>
8000818e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008192:	70 18       	ld.w	r8,r8[0x4]
80008194:	e6 18 00 07 	andh	r8,0x7,COH
80008198:	b1 88       	lsr	r8,0x10
8000819a:	58 18       	cp.w	r8,1
8000819c:	c0 60       	breq	800081a8 <aes_write_inputdata+0x4a>
8000819e:	c2 33       	brcs	800081e4 <aes_write_inputdata+0x86>
800081a0:	58 48       	cp.w	r8,4
800081a2:	e0 8b 00 21 	brhi	800081e4 <aes_write_inputdata+0x86>
800081a6:	c0 68       	rjmp	800081b2 <aes_write_inputdata+0x54>
800081a8:	30 28       	mov	r8,2
800081aa:	ef 68 ff ff 	st.b	r7[-1],r8
800081ae:	d7 03       	nop
800081b0:	c1 a8       	rjmp	800081e4 <aes_write_inputdata+0x86>
800081b2:	30 18       	mov	r8,1
800081b4:	ef 68 ff ff 	st.b	r7[-1],r8
800081b8:	c1 68       	rjmp	800081e4 <aes_write_inputdata+0x86>
800081ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800081be:	70 09       	ld.w	r9,r8[0x0]
800081c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081c4:	91 09       	st.w	r8[0x0],r9
800081c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081ca:	2f c8       	sub	r8,-4
800081cc:	ef 48 ff f8 	st.w	r7[-8],r8
800081d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800081d4:	2f c8       	sub	r8,-4
800081d6:	ef 48 ff f0 	st.w	r7[-16],r8
800081da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800081de:	20 18       	sub	r8,1
800081e0:	ef 68 ff ff 	st.b	r7[-1],r8
800081e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800081e8:	30 08       	mov	r8,0
800081ea:	f0 09 18 00 	cp.b	r9,r8
800081ee:	ce 61       	brne	800081ba <aes_write_inputdata+0x5c>
800081f0:	2f cd       	sub	sp,-16
800081f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800081f6 <aes_read_outputdata>:
800081f6:	eb cd 40 80 	pushm	r7,lr
800081fa:	1a 97       	mov	r7,sp
800081fc:	20 4d       	sub	sp,16
800081fe:	ef 4c ff f4 	st.w	r7[-12],r12
80008202:	ef 4b ff f0 	st.w	r7[-16],r11
80008206:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000820a:	2b 08       	sub	r8,-80
8000820c:	ef 48 ff f8 	st.w	r7[-8],r8
80008210:	30 48       	mov	r8,4
80008212:	ef 68 ff ff 	st.b	r7[-1],r8
80008216:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000821a:	70 18       	ld.w	r8,r8[0x4]
8000821c:	e2 18 70 00 	andl	r8,0x7000,COH
80008220:	ad 88       	lsr	r8,0xc
80008222:	58 38       	cp.w	r8,3
80008224:	c2 c1       	brne	8000827c <aes_read_outputdata+0x86>
80008226:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000822a:	70 18       	ld.w	r8,r8[0x4]
8000822c:	e6 18 00 07 	andh	r8,0x7,COH
80008230:	b1 88       	lsr	r8,0x10
80008232:	58 18       	cp.w	r8,1
80008234:	c0 60       	breq	80008240 <aes_read_outputdata+0x4a>
80008236:	c2 33       	brcs	8000827c <aes_read_outputdata+0x86>
80008238:	58 48       	cp.w	r8,4
8000823a:	e0 8b 00 21 	brhi	8000827c <aes_read_outputdata+0x86>
8000823e:	c0 68       	rjmp	8000824a <aes_read_outputdata+0x54>
80008240:	30 28       	mov	r8,2
80008242:	ef 68 ff ff 	st.b	r7[-1],r8
80008246:	d7 03       	nop
80008248:	c1 a8       	rjmp	8000827c <aes_read_outputdata+0x86>
8000824a:	30 18       	mov	r8,1
8000824c:	ef 68 ff ff 	st.b	r7[-1],r8
80008250:	c1 68       	rjmp	8000827c <aes_read_outputdata+0x86>
80008252:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008256:	70 09       	ld.w	r9,r8[0x0]
80008258:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000825c:	91 09       	st.w	r8[0x0],r9
8000825e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008262:	2f c8       	sub	r8,-4
80008264:	ef 48 ff f0 	st.w	r7[-16],r8
80008268:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000826c:	2f c8       	sub	r8,-4
8000826e:	ef 48 ff f8 	st.w	r7[-8],r8
80008272:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008276:	20 18       	sub	r8,1
80008278:	ef 68 ff ff 	st.b	r7[-1],r8
8000827c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008280:	30 08       	mov	r8,0
80008282:	f0 09 18 00 	cp.b	r9,r8
80008286:	ce 61       	brne	80008252 <aes_read_outputdata+0x5c>
80008288:	2f cd       	sub	sp,-16
8000828a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000828e:	d7 03       	nop

80008290 <smc_init>:
80008290:	eb cd 40 80 	pushm	r7,lr
80008294:	1a 97       	mov	r7,sp
80008296:	20 cd       	sub	sp,48
80008298:	ef 4c ff d0 	st.w	r7[-48],r12
8000829c:	ee f8 ff d0 	ld.w	r8,r7[-48]
800082a0:	ee 7a 42 3f 	mov	r10,999999
800082a4:	f0 0a 00 09 	add	r9,r8,r10
800082a8:	e0 68 de 83 	mov	r8,56963
800082ac:	ea 18 43 1b 	orh	r8,0x431b
800082b0:	f2 08 06 48 	mulu.d	r8,r9,r8
800082b4:	f2 08 16 12 	lsr	r8,r9,0x12
800082b8:	ef 48 ff d4 	st.w	r7[-44],r8
800082bc:	ee f9 ff d4 	ld.w	r9,r7[-44]
800082c0:	12 98       	mov	r8,r9
800082c2:	a3 68       	lsl	r8,0x2
800082c4:	12 08       	add	r8,r9
800082c6:	a3 68       	lsl	r8,0x2
800082c8:	f0 c9 fc 19 	sub	r9,r8,-999
800082cc:	e0 68 4d d3 	mov	r8,19923
800082d0:	ea 18 10 62 	orh	r8,0x1062
800082d4:	f2 08 06 48 	mulu.d	r8,r9,r8
800082d8:	f2 08 16 06 	lsr	r8,r9,0x6
800082dc:	ef 48 ff d8 	st.w	r7[-40],r8
800082e0:	30 08       	mov	r8,0
800082e2:	ef 48 ff dc 	st.w	r7[-36],r8
800082e6:	ee f9 ff d4 	ld.w	r9,r7[-44]
800082ea:	12 98       	mov	r8,r9
800082ec:	a5 68       	lsl	r8,0x4
800082ee:	12 18       	sub	r8,r9
800082f0:	a1 78       	lsl	r8,0x1
800082f2:	f0 c9 fc 19 	sub	r9,r8,-999
800082f6:	e0 68 4d d3 	mov	r8,19923
800082fa:	ea 18 10 62 	orh	r8,0x1062
800082fe:	f2 08 06 48 	mulu.d	r8,r9,r8
80008302:	f2 08 16 06 	lsr	r8,r9,0x6
80008306:	ef 48 ff e0 	st.w	r7[-32],r8
8000830a:	30 08       	mov	r8,0
8000830c:	ef 48 ff e4 	st.w	r7[-28],r8
80008310:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008314:	12 98       	mov	r8,r9
80008316:	a5 68       	lsl	r8,0x4
80008318:	12 18       	sub	r8,r9
8000831a:	a3 68       	lsl	r8,0x2
8000831c:	f0 c9 fc 19 	sub	r9,r8,-999
80008320:	e0 68 4d d3 	mov	r8,19923
80008324:	ea 18 10 62 	orh	r8,0x1062
80008328:	f2 08 06 48 	mulu.d	r8,r9,r8
8000832c:	f2 08 16 06 	lsr	r8,r9,0x6
80008330:	ef 48 ff e8 	st.w	r7[-24],r8
80008334:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008338:	f0 08 10 5a 	mul	r8,r8,90
8000833c:	f0 c9 fc 19 	sub	r9,r8,-999
80008340:	e0 68 4d d3 	mov	r8,19923
80008344:	ea 18 10 62 	orh	r8,0x1062
80008348:	f2 08 06 48 	mulu.d	r8,r9,r8
8000834c:	f2 08 16 06 	lsr	r8,r9,0x6
80008350:	ef 48 ff ec 	st.w	r7[-20],r8
80008354:	ee f9 ff d4 	ld.w	r9,r7[-44]
80008358:	e0 68 00 d2 	mov	r8,210
8000835c:	f2 08 02 48 	mul	r8,r9,r8
80008360:	f0 c9 fc 19 	sub	r9,r8,-999
80008364:	e0 68 4d d3 	mov	r8,19923
80008368:	ea 18 10 62 	orh	r8,0x1062
8000836c:	f2 08 06 48 	mulu.d	r8,r9,r8
80008370:	f2 08 16 06 	lsr	r8,r9,0x6
80008374:	ef 48 ff f0 	st.w	r7[-16],r8
80008378:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000837c:	12 98       	mov	r8,r9
8000837e:	a5 68       	lsl	r8,0x4
80008380:	12 18       	sub	r8,r9
80008382:	a5 68       	lsl	r8,0x4
80008384:	f0 c9 fc 19 	sub	r9,r8,-999
80008388:	e0 68 4d d3 	mov	r8,19923
8000838c:	ea 18 10 62 	orh	r8,0x1062
80008390:	f2 08 06 48 	mulu.d	r8,r9,r8
80008394:	f2 08 16 06 	lsr	r8,r9,0x6
80008398:	ef 48 ff f4 	st.w	r7[-12],r8
8000839c:	ee f8 ff d4 	ld.w	r8,r7[-44]
800083a0:	f0 08 10 64 	mul	r8,r8,100
800083a4:	f0 c9 fc 19 	sub	r9,r8,-999
800083a8:	e0 68 4d d3 	mov	r8,19923
800083ac:	ea 18 10 62 	orh	r8,0x1062
800083b0:	f2 08 06 48 	mulu.d	r8,r9,r8
800083b4:	f2 08 16 06 	lsr	r8,r9,0x6
800083b8:	ef 48 ff f8 	st.w	r7[-8],r8
800083bc:	ee f9 ff d4 	ld.w	r9,r7[-44]
800083c0:	e0 68 01 0e 	mov	r8,270
800083c4:	f2 08 02 48 	mul	r8,r9,r8
800083c8:	f0 c9 fc 19 	sub	r9,r8,-999
800083cc:	e0 68 4d d3 	mov	r8,19923
800083d0:	ea 18 10 62 	orh	r8,0x1062
800083d4:	f2 08 06 48 	mulu.d	r8,r9,r8
800083d8:	f2 08 16 06 	lsr	r8,r9,0x6
800083dc:	ef 48 ff fc 	st.w	r7[-4],r8
800083e0:	ee f9 ff e4 	ld.w	r9,r7[-28]
800083e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800083e8:	10 09       	add	r9,r8
800083ea:	ee fa ff e0 	ld.w	r10,r7[-32]
800083ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800083f2:	f4 08 00 08 	add	r8,r10,r8
800083f6:	10 39       	cp.w	r9,r8
800083f8:	c0 c2       	brcc	80008410 <smc_init+0x180>
800083fa:	ee f9 ff e0 	ld.w	r9,r7[-32]
800083fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008402:	10 09       	add	r9,r8
80008404:	ee f8 ff e4 	ld.w	r8,r7[-28]
80008408:	f2 08 01 08 	sub	r8,r9,r8
8000840c:	ef 48 ff f4 	st.w	r7[-12],r8
80008410:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008414:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008418:	10 09       	add	r9,r8
8000841a:	ee fa ff d8 	ld.w	r10,r7[-40]
8000841e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008422:	f4 08 00 08 	add	r8,r10,r8
80008426:	10 39       	cp.w	r9,r8
80008428:	c0 c2       	brcc	80008440 <smc_init+0x1b0>
8000842a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000842e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008432:	10 09       	add	r9,r8
80008434:	ee f8 ff dc 	ld.w	r8,r7[-36]
80008438:	f2 08 01 08 	sub	r8,r9,r8
8000843c:	ef 48 ff ec 	st.w	r7[-20],r8
80008440:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008444:	ee f8 ff ec 	ld.w	r8,r7[-20]
80008448:	10 09       	add	r9,r8
8000844a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000844e:	10 39       	cp.w	r9,r8
80008450:	e0 88 00 0a 	brls	80008464 <smc_init+0x1d4>
80008454:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008458:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000845c:	f2 08 00 08 	add	r8,r9,r8
80008460:	ef 48 ff f8 	st.w	r7[-8],r8
80008464:	ee f9 ff d8 	ld.w	r9,r7[-40]
80008468:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000846c:	10 09       	add	r9,r8
8000846e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008472:	10 39       	cp.w	r9,r8
80008474:	e0 88 00 0a 	brls	80008488 <smc_init+0x1f8>
80008478:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000847c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80008480:	f2 08 00 08 	add	r8,r9,r8
80008484:	ef 48 ff f8 	st.w	r7[-8],r8
80008488:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000848c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008490:	10 09       	add	r9,r8
80008492:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008496:	10 39       	cp.w	r9,r8
80008498:	e0 88 00 0a 	brls	800084ac <smc_init+0x21c>
8000849c:	ee f9 ff e4 	ld.w	r9,r7[-28]
800084a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800084a4:	f2 08 00 08 	add	r8,r9,r8
800084a8:	ef 48 ff fc 	st.w	r7[-4],r8
800084ac:	ee f9 ff e0 	ld.w	r9,r7[-32]
800084b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800084b4:	10 09       	add	r9,r8
800084b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800084ba:	10 39       	cp.w	r9,r8
800084bc:	e0 88 00 0a 	brls	800084d0 <smc_init+0x240>
800084c0:	ee f9 ff e0 	ld.w	r9,r7[-32]
800084c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800084c8:	f2 08 00 08 	add	r8,r9,r8
800084cc:	ef 48 ff fc 	st.w	r7[-4],r8
800084d0:	fe 68 1c 00 	mov	r8,-123904
800084d4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800084d8:	f2 0a 15 08 	lsl	r10,r9,0x8
800084dc:	ee f9 ff d8 	ld.w	r9,r7[-40]
800084e0:	12 4a       	or	r10,r9
800084e2:	ee f9 ff e0 	ld.w	r9,r7[-32]
800084e6:	b1 69       	lsl	r9,0x10
800084e8:	12 4a       	or	r10,r9
800084ea:	ee f9 ff e4 	ld.w	r9,r7[-28]
800084ee:	b9 69       	lsl	r9,0x18
800084f0:	f5 e9 10 09 	or	r9,r10,r9
800084f4:	91 09       	st.w	r8[0x0],r9
800084f6:	fe 68 1c 00 	mov	r8,-123904
800084fa:	ee f9 ff ec 	ld.w	r9,r7[-20]
800084fe:	f2 0a 15 08 	lsl	r10,r9,0x8
80008502:	ee f9 ff e8 	ld.w	r9,r7[-24]
80008506:	12 4a       	or	r10,r9
80008508:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000850c:	b1 69       	lsl	r9,0x10
8000850e:	12 4a       	or	r10,r9
80008510:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008514:	b9 69       	lsl	r9,0x18
80008516:	f5 e9 10 09 	or	r9,r10,r9
8000851a:	91 19       	st.w	r8[0x4],r9
8000851c:	fe 68 1c 00 	mov	r8,-123904
80008520:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008524:	f2 0a 15 10 	lsl	r10,r9,0x10
80008528:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000852c:	f5 e9 10 09 	or	r9,r10,r9
80008530:	91 29       	st.w	r8[0x8],r9
80008532:	fe 68 1c 00 	mov	r8,-123904
80008536:	e0 69 10 03 	mov	r9,4099
8000853a:	91 39       	st.w	r8[0xc],r9
8000853c:	48 49       	lddpc	r9,8000854c <smc_init+0x2bc>
8000853e:	30 18       	mov	r8,1
80008540:	b2 88       	st.b	r9[0x0],r8
80008542:	f0 1f 00 04 	mcall	80008550 <smc_init+0x2c0>
80008546:	2f 4d       	sub	sp,-48
80008548:	e3 cd 80 80 	ldm	sp++,r7,pc
8000854c:	00 00       	add	r0,r0
8000854e:	06 94       	mov	r4,r3
80008550:	80 00       	ld.sh	r0,r0[0x0]
80008552:	85 54       	st.w	r2[0x14],r4

80008554 <smc_enable_muxed_pins>:
80008554:	eb cd 40 80 	pushm	r7,lr
80008558:	1a 97       	mov	r7,sp
8000855a:	31 4b       	mov	r11,20
8000855c:	48 3c       	lddpc	r12,80008568 <smc_enable_muxed_pins+0x14>
8000855e:	f0 1f 00 04 	mcall	8000856c <smc_enable_muxed_pins+0x18>
80008562:	e3 cd 80 80 	ldm	sp++,r7,pc
80008566:	00 00       	add	r0,r0
80008568:	80 00       	ld.sh	r0,r0[0x0]
8000856a:	f0 d4 80 00 	satsub.w	r4,r8,-32768
8000856e:	89 d4       	st.w	r4[0x34],r4

80008570 <flashc_set_wait_state>:
80008570:	eb cd 40 80 	pushm	r7,lr
80008574:	1a 97       	mov	r7,sp
80008576:	20 2d       	sub	sp,8
80008578:	ef 4c ff f8 	st.w	r7[-8],r12
8000857c:	fe 68 14 00 	mov	r8,-125952
80008580:	70 08       	ld.w	r8,r8[0x0]
80008582:	30 09       	mov	r9,0
80008584:	ef 49 ff fc 	st.w	r7[-4],r9
80008588:	ef 48 ff fc 	st.w	r7[-4],r8
8000858c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008590:	5c 58       	castu.b	r8
80008592:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008596:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000859a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000859e:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
800085a2:	ef 48 ff fc 	st.w	r7[-4],r8
800085a6:	fe 68 14 00 	mov	r8,-125952
800085aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800085ae:	91 09       	st.w	r8[0x0],r9
800085b0:	2f ed       	sub	sp,-8
800085b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800085b6:	d7 03       	nop

800085b8 <flashc_set_bus_freq>:
800085b8:	eb cd 40 80 	pushm	r7,lr
800085bc:	1a 97       	mov	r7,sp
800085be:	20 1d       	sub	sp,4
800085c0:	ef 4c ff fc 	st.w	r7[-4],r12
800085c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800085c8:	e0 69 50 ff 	mov	r9,20735
800085cc:	ea 19 02 25 	orh	r9,0x225
800085d0:	12 38       	cp.w	r8,r9
800085d2:	e0 88 00 06 	brls	800085de <flashc_set_bus_freq+0x26>
800085d6:	30 1c       	mov	r12,1
800085d8:	f0 1f 00 05 	mcall	800085ec <flashc_set_bus_freq+0x34>
800085dc:	c0 48       	rjmp	800085e4 <flashc_set_bus_freq+0x2c>
800085de:	30 0c       	mov	r12,0
800085e0:	f0 1f 00 03 	mcall	800085ec <flashc_set_bus_freq+0x34>
800085e4:	2f fd       	sub	sp,-4
800085e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800085ea:	00 00       	add	r0,r0
800085ec:	80 00       	ld.sh	r0,r0[0x0]
800085ee:	85 70       	st.w	r2[0x1c],r0

800085f0 <flashc_is_ready>:
800085f0:	eb cd 40 80 	pushm	r7,lr
800085f4:	1a 97       	mov	r7,sp
800085f6:	fe 68 14 00 	mov	r8,-125952
800085fa:	70 28       	ld.w	r8,r8[0x8]
800085fc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008600:	5c 58       	castu.b	r8
80008602:	10 9c       	mov	r12,r8
80008604:	e3 cd 80 80 	ldm	sp++,r7,pc

80008608 <flashc_default_wait_until_ready>:
80008608:	eb cd 40 80 	pushm	r7,lr
8000860c:	1a 97       	mov	r7,sp
8000860e:	f0 1f 00 05 	mcall	80008620 <flashc_default_wait_until_ready+0x18>
80008612:	18 98       	mov	r8,r12
80008614:	ec 18 00 01 	eorl	r8,0x1
80008618:	5c 58       	castu.b	r8
8000861a:	cf a1       	brne	8000860e <flashc_default_wait_until_ready+0x6>
8000861c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008620:	80 00       	ld.sh	r0,r0[0x0]
80008622:	85 f0       	st.w	r2[0x3c],r0

80008624 <flashc_get_error_status>:
80008624:	eb cd 40 80 	pushm	r7,lr
80008628:	1a 97       	mov	r7,sp
8000862a:	fe 68 14 00 	mov	r8,-125952
8000862e:	70 28       	ld.w	r8,r8[0x8]
80008630:	e2 18 00 0c 	andl	r8,0xc,COH
80008634:	10 9c       	mov	r12,r8
80008636:	e3 cd 80 80 	ldm	sp++,r7,pc
8000863a:	d7 03       	nop

8000863c <flashc_issue_command>:
8000863c:	eb cd 40 80 	pushm	r7,lr
80008640:	1a 97       	mov	r7,sp
80008642:	20 3d       	sub	sp,12
80008644:	ef 4c ff f8 	st.w	r7[-8],r12
80008648:	ef 4b ff f4 	st.w	r7[-12],r11
8000864c:	49 b8       	lddpc	r8,800086b8 <flashc_issue_command+0x7c>
8000864e:	70 08       	ld.w	r8,r8[0x0]
80008650:	5d 18       	icall	r8
80008652:	fe 68 14 00 	mov	r8,-125952
80008656:	70 18       	ld.w	r8,r8[0x4]
80008658:	ef 48 ff fc 	st.w	r7[-4],r8
8000865c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008660:	5c 58       	castu.b	r8
80008662:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80008666:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000866a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000866e:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80008672:	ef 48 ff fc 	st.w	r7[-4],r8
80008676:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000867a:	58 08       	cp.w	r8,0
8000867c:	c0 b5       	brlt	80008692 <flashc_issue_command+0x56>
8000867e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008682:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80008686:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000868a:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
8000868e:	ef 48 ff fc 	st.w	r7[-4],r8
80008692:	3a 58       	mov	r8,-91
80008694:	ef 68 ff fc 	st.b	r7[-4],r8
80008698:	fe 68 14 00 	mov	r8,-125952
8000869c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800086a0:	91 19       	st.w	r8[0x4],r9
800086a2:	f0 1f 00 07 	mcall	800086bc <flashc_issue_command+0x80>
800086a6:	18 99       	mov	r9,r12
800086a8:	48 68       	lddpc	r8,800086c0 <flashc_issue_command+0x84>
800086aa:	91 09       	st.w	r8[0x0],r9
800086ac:	48 38       	lddpc	r8,800086b8 <flashc_issue_command+0x7c>
800086ae:	70 08       	ld.w	r8,r8[0x0]
800086b0:	5d 18       	icall	r8
800086b2:	2f dd       	sub	sp,-12
800086b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800086b8:	00 00       	add	r0,r0
800086ba:	01 3c       	ld.ub	r12,r0++
800086bc:	80 00       	ld.sh	r0,r0[0x0]
800086be:	86 24       	ld.sh	r4,r3[0x4]
800086c0:	00 00       	add	r0,r0
800086c2:	06 9c       	mov	r12,r3

800086c4 <flashc_clear_page_buffer>:
800086c4:	eb cd 40 80 	pushm	r7,lr
800086c8:	1a 97       	mov	r7,sp
800086ca:	3f fb       	mov	r11,-1
800086cc:	30 3c       	mov	r12,3
800086ce:	f0 1f 00 03 	mcall	800086d8 <flashc_clear_page_buffer+0x14>
800086d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800086d6:	00 00       	add	r0,r0
800086d8:	80 00       	ld.sh	r0,r0[0x0]
800086da:	86 3c       	ld.sh	r12,r3[0x6]

800086dc <flashc_is_page_erased>:
800086dc:	eb cd 40 80 	pushm	r7,lr
800086e0:	1a 97       	mov	r7,sp
800086e2:	fe 68 14 00 	mov	r8,-125952
800086e6:	70 28       	ld.w	r8,r8[0x8]
800086e8:	e2 18 00 20 	andl	r8,0x20,COH
800086ec:	5f 18       	srne	r8
800086ee:	5c 58       	castu.b	r8
800086f0:	10 9c       	mov	r12,r8
800086f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800086f6:	d7 03       	nop

800086f8 <flashc_quick_page_read>:
800086f8:	eb cd 40 80 	pushm	r7,lr
800086fc:	1a 97       	mov	r7,sp
800086fe:	20 1d       	sub	sp,4
80008700:	ef 4c ff fc 	st.w	r7[-4],r12
80008704:	ee fb ff fc 	ld.w	r11,r7[-4]
80008708:	30 cc       	mov	r12,12
8000870a:	f0 1f 00 05 	mcall	8000871c <flashc_quick_page_read+0x24>
8000870e:	f0 1f 00 05 	mcall	80008720 <flashc_quick_page_read+0x28>
80008712:	18 98       	mov	r8,r12
80008714:	10 9c       	mov	r12,r8
80008716:	2f fd       	sub	sp,-4
80008718:	e3 cd 80 80 	ldm	sp++,r7,pc
8000871c:	80 00       	ld.sh	r0,r0[0x0]
8000871e:	86 3c       	ld.sh	r12,r3[0x6]
80008720:	80 00       	ld.sh	r0,r0[0x0]
80008722:	86 dc       	ld.uh	r12,r3[0xa]

80008724 <flashc_erase_page>:
80008724:	eb cd 40 80 	pushm	r7,lr
80008728:	1a 97       	mov	r7,sp
8000872a:	20 4d       	sub	sp,16
8000872c:	ef 4c ff f4 	st.w	r7[-12],r12
80008730:	16 98       	mov	r8,r11
80008732:	ef 68 ff f0 	st.b	r7[-16],r8
80008736:	30 18       	mov	r8,1
80008738:	ef 68 ff fb 	st.b	r7[-5],r8
8000873c:	ee fb ff f4 	ld.w	r11,r7[-12]
80008740:	30 2c       	mov	r12,2
80008742:	f0 1f 00 10 	mcall	80008780 <flashc_erase_page+0x5c>
80008746:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000874a:	30 08       	mov	r8,0
8000874c:	f0 09 18 00 	cp.b	r9,r8
80008750:	c1 20       	breq	80008774 <flashc_erase_page+0x50>
80008752:	48 d8       	lddpc	r8,80008784 <flashc_erase_page+0x60>
80008754:	70 08       	ld.w	r8,r8[0x0]
80008756:	ef 48 ff fc 	st.w	r7[-4],r8
8000875a:	3f fc       	mov	r12,-1
8000875c:	f0 1f 00 0b 	mcall	80008788 <flashc_erase_page+0x64>
80008760:	18 98       	mov	r8,r12
80008762:	ef 68 ff fb 	st.b	r7[-5],r8
80008766:	48 88       	lddpc	r8,80008784 <flashc_erase_page+0x60>
80008768:	70 09       	ld.w	r9,r8[0x0]
8000876a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000876e:	10 49       	or	r9,r8
80008770:	48 58       	lddpc	r8,80008784 <flashc_erase_page+0x60>
80008772:	91 09       	st.w	r8[0x0],r9
80008774:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80008778:	10 9c       	mov	r12,r8
8000877a:	2f cd       	sub	sp,-16
8000877c:	e3 cd 80 80 	ldm	sp++,r7,pc
80008780:	80 00       	ld.sh	r0,r0[0x0]
80008782:	86 3c       	ld.sh	r12,r3[0x6]
80008784:	00 00       	add	r0,r0
80008786:	06 9c       	mov	r12,r3
80008788:	80 00       	ld.sh	r0,r0[0x0]
8000878a:	86 f8       	ld.uh	r8,r3[0xe]

8000878c <flashc_write_page>:
8000878c:	eb cd 40 80 	pushm	r7,lr
80008790:	1a 97       	mov	r7,sp
80008792:	20 1d       	sub	sp,4
80008794:	ef 4c ff fc 	st.w	r7[-4],r12
80008798:	ee fb ff fc 	ld.w	r11,r7[-4]
8000879c:	30 1c       	mov	r12,1
8000879e:	f0 1f 00 03 	mcall	800087a8 <flashc_write_page+0x1c>
800087a2:	2f fd       	sub	sp,-4
800087a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800087a8:	80 00       	ld.sh	r0,r0[0x0]
800087aa:	86 3c       	ld.sh	r12,r3[0x6]

800087ac <flashc_quick_user_page_read>:
800087ac:	eb cd 40 80 	pushm	r7,lr
800087b0:	1a 97       	mov	r7,sp
800087b2:	3f fb       	mov	r11,-1
800087b4:	30 fc       	mov	r12,15
800087b6:	f0 1f 00 05 	mcall	800087c8 <flashc_quick_user_page_read+0x1c>
800087ba:	f0 1f 00 05 	mcall	800087cc <flashc_quick_user_page_read+0x20>
800087be:	18 98       	mov	r8,r12
800087c0:	10 9c       	mov	r12,r8
800087c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800087c6:	00 00       	add	r0,r0
800087c8:	80 00       	ld.sh	r0,r0[0x0]
800087ca:	86 3c       	ld.sh	r12,r3[0x6]
800087cc:	80 00       	ld.sh	r0,r0[0x0]
800087ce:	86 dc       	ld.uh	r12,r3[0xa]

800087d0 <flashc_erase_user_page>:
800087d0:	eb cd 40 80 	pushm	r7,lr
800087d4:	1a 97       	mov	r7,sp
800087d6:	20 1d       	sub	sp,4
800087d8:	18 98       	mov	r8,r12
800087da:	ef 68 ff fc 	st.b	r7[-4],r8
800087de:	3f fb       	mov	r11,-1
800087e0:	30 ec       	mov	r12,14
800087e2:	f0 1f 00 09 	mcall	80008804 <flashc_erase_user_page+0x34>
800087e6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800087ea:	30 08       	mov	r8,0
800087ec:	f0 09 18 00 	cp.b	r9,r8
800087f0:	c0 50       	breq	800087fa <flashc_erase_user_page+0x2a>
800087f2:	f0 1f 00 06 	mcall	80008808 <flashc_erase_user_page+0x38>
800087f6:	18 98       	mov	r8,r12
800087f8:	c0 28       	rjmp	800087fc <flashc_erase_user_page+0x2c>
800087fa:	30 18       	mov	r8,1
800087fc:	10 9c       	mov	r12,r8
800087fe:	2f fd       	sub	sp,-4
80008800:	e3 cd 80 80 	ldm	sp++,r7,pc
80008804:	80 00       	ld.sh	r0,r0[0x0]
80008806:	86 3c       	ld.sh	r12,r3[0x6]
80008808:	80 00       	ld.sh	r0,r0[0x0]
8000880a:	87 ac       	st.w	r3[0x28],r12

8000880c <flashc_write_user_page>:
8000880c:	eb cd 40 80 	pushm	r7,lr
80008810:	1a 97       	mov	r7,sp
80008812:	3f fb       	mov	r11,-1
80008814:	30 dc       	mov	r12,13
80008816:	f0 1f 00 03 	mcall	80008820 <flashc_write_user_page+0x14>
8000881a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000881e:	00 00       	add	r0,r0
80008820:	80 00       	ld.sh	r0,r0[0x0]
80008822:	86 3c       	ld.sh	r12,r3[0x6]

80008824 <flashc_memcpy>:
80008824:	eb cd 40 80 	pushm	r7,lr
80008828:	1a 97       	mov	r7,sp
8000882a:	20 bd       	sub	sp,44
8000882c:	ef 4c ff e0 	st.w	r7[-32],r12
80008830:	ef 4b ff dc 	st.w	r7[-36],r11
80008834:	ef 4a ff d8 	st.w	r7[-40],r10
80008838:	12 98       	mov	r8,r9
8000883a:	ef 68 ff d4 	st.b	r7[-44],r8
8000883e:	30 08       	mov	r8,0
80008840:	ef 48 ff f0 	st.w	r7[-16],r8
80008844:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008848:	ef 48 ff f8 	st.w	r7[-8],r8
8000884c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80008850:	ef 48 ff fc 	st.w	r7[-4],r8
80008854:	ee f8 ff e0 	ld.w	r8,r7[-32]
80008858:	e0 69 ff ff 	mov	r9,65535
8000885c:	ea 19 80 7f 	orh	r9,0x807f
80008860:	12 38       	cp.w	r8,r9
80008862:	5f b8       	srhi	r8
80008864:	ef 68 ff ef 	st.b	r7[-17],r8
80008868:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000886c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008870:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80008874:	f2 08 01 08 	sub	r8,r9,r8
80008878:	ef 48 ff f4 	st.w	r7[-12],r8
8000887c:	c9 18       	rjmp	8000899e <flashc_memcpy+0x17a>
8000887e:	f0 1f 00 50 	mcall	800089bc <flashc_memcpy+0x198>
80008882:	4d 08       	lddpc	r8,800089c0 <flashc_memcpy+0x19c>
80008884:	70 08       	ld.w	r8,r8[0x0]
80008886:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000888a:	f3 e8 10 08 	or	r8,r9,r8
8000888e:	ef 48 ff f0 	st.w	r7[-16],r8
80008892:	30 08       	mov	r8,0
80008894:	ef 58 ff ec 	st.h	r7[-20],r8
80008898:	c4 b8       	rjmp	8000892e <flashc_memcpy+0x10a>
8000889a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000889e:	f0 e8 00 00 	ld.d	r8,r8[0]
800088a2:	ee e9 ff e4 	st.d	r7[-28],r8
800088a6:	30 08       	mov	r8,0
800088a8:	ef 68 ff ee 	st.b	r7[-18],r8
800088ac:	c2 d8       	rjmp	80008906 <flashc_memcpy+0xe2>
800088ae:	ee f8 ff d8 	ld.w	r8,r7[-40]
800088b2:	58 08       	cp.w	r8,0
800088b4:	c1 f0       	breq	800088f2 <flashc_memcpy+0xce>
800088b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800088ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088be:	10 39       	cp.w	r9,r8
800088c0:	c1 91       	brne	800088f2 <flashc_memcpy+0xce>
800088c2:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800088c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800088ca:	11 88       	ld.ub	r8,r8[0x0]
800088cc:	ee 09 00 09 	add	r9,r7,r9
800088d0:	f3 68 ff e4 	st.b	r9[-28],r8
800088d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800088d8:	2f f8       	sub	r8,-1
800088da:	ef 48 ff fc 	st.w	r7[-4],r8
800088de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800088e2:	2f f8       	sub	r8,-1
800088e4:	ef 48 ff f8 	st.w	r7[-8],r8
800088e8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800088ec:	20 18       	sub	r8,1
800088ee:	ef 48 ff d8 	st.w	r7[-40],r8
800088f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800088f6:	2f f8       	sub	r8,-1
800088f8:	ef 48 ff f4 	st.w	r7[-12],r8
800088fc:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80008900:	2f f8       	sub	r8,-1
80008902:	ef 68 ff ee 	st.b	r7[-18],r8
80008906:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8000890a:	30 78       	mov	r8,7
8000890c:	f0 09 18 00 	cp.b	r9,r8
80008910:	fe 98 ff cf 	brls	800088ae <flashc_memcpy+0x8a>
80008914:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008918:	20 88       	sub	r8,8
8000891a:	10 9a       	mov	r10,r8
8000891c:	ee e8 ff e4 	ld.d	r8,r7[-28]
80008920:	f4 e9 00 00 	st.d	r10[0],r8
80008924:	ef 08 ff ec 	ld.sh	r8,r7[-20]
80008928:	2f 88       	sub	r8,-8
8000892a:	ef 58 ff ec 	st.h	r7[-20],r8
8000892e:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80008932:	e0 68 01 ff 	mov	r8,511
80008936:	f0 09 19 00 	cp.h	r9,r8
8000893a:	fe 98 ff b0 	brls	8000889a <flashc_memcpy+0x76>
8000893e:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80008942:	30 08       	mov	r8,0
80008944:	f0 09 18 00 	cp.b	r9,r8
80008948:	c1 70       	breq	80008976 <flashc_memcpy+0x152>
8000894a:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000894e:	30 08       	mov	r8,0
80008950:	f0 09 18 00 	cp.b	r9,r8
80008954:	c0 50       	breq	8000895e <flashc_memcpy+0x13a>
80008956:	30 0c       	mov	r12,0
80008958:	f0 1f 00 1b 	mcall	800089c4 <flashc_memcpy+0x1a0>
8000895c:	c0 58       	rjmp	80008966 <flashc_memcpy+0x142>
8000895e:	30 0b       	mov	r11,0
80008960:	3f fc       	mov	r12,-1
80008962:	f0 1f 00 1a 	mcall	800089c8 <flashc_memcpy+0x1a4>
80008966:	49 78       	lddpc	r8,800089c0 <flashc_memcpy+0x19c>
80008968:	70 08       	ld.w	r8,r8[0x0]
8000896a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000896e:	f3 e8 10 08 	or	r8,r9,r8
80008972:	ef 48 ff f0 	st.w	r7[-16],r8
80008976:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8000897a:	30 08       	mov	r8,0
8000897c:	f0 09 18 00 	cp.b	r9,r8
80008980:	c0 40       	breq	80008988 <flashc_memcpy+0x164>
80008982:	f0 1f 00 13 	mcall	800089cc <flashc_memcpy+0x1a8>
80008986:	c0 48       	rjmp	8000898e <flashc_memcpy+0x16a>
80008988:	3f fc       	mov	r12,-1
8000898a:	f0 1f 00 12 	mcall	800089d0 <flashc_memcpy+0x1ac>
8000898e:	48 d8       	lddpc	r8,800089c0 <flashc_memcpy+0x19c>
80008990:	70 08       	ld.w	r8,r8[0x0]
80008992:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008996:	f3 e8 10 08 	or	r8,r9,r8
8000899a:	ef 48 ff f0 	st.w	r7[-16],r8
8000899e:	ee f8 ff d8 	ld.w	r8,r7[-40]
800089a2:	58 08       	cp.w	r8,0
800089a4:	fe 91 ff 6d 	brne	8000887e <flashc_memcpy+0x5a>
800089a8:	48 68       	lddpc	r8,800089c0 <flashc_memcpy+0x19c>
800089aa:	ee f9 ff f0 	ld.w	r9,r7[-16]
800089ae:	91 09       	st.w	r8[0x0],r9
800089b0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800089b4:	10 9c       	mov	r12,r8
800089b6:	2f 5d       	sub	sp,-44
800089b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800089bc:	80 00       	ld.sh	r0,r0[0x0]
800089be:	86 c4       	ld.uh	r4,r3[0x8]
800089c0:	00 00       	add	r0,r0
800089c2:	06 9c       	mov	r12,r3
800089c4:	80 00       	ld.sh	r0,r0[0x0]
800089c6:	87 d0       	st.w	r3[0x34],r0
800089c8:	80 00       	ld.sh	r0,r0[0x0]
800089ca:	87 24       	st.w	r3[0x8],r4
800089cc:	80 00       	ld.sh	r0,r0[0x0]
800089ce:	88 0c       	ld.sh	r12,r4[0x0]
800089d0:	80 00       	ld.sh	r0,r0[0x0]
800089d2:	87 8c       	st.w	r3[0x20],r12

800089d4 <gpio_enable_module>:
800089d4:	eb cd 40 80 	pushm	r7,lr
800089d8:	1a 97       	mov	r7,sp
800089da:	20 4d       	sub	sp,16
800089dc:	ef 4c ff f4 	st.w	r7[-12],r12
800089e0:	ef 4b ff f0 	st.w	r7[-16],r11
800089e4:	30 08       	mov	r8,0
800089e6:	ef 48 ff f8 	st.w	r7[-8],r8
800089ea:	30 08       	mov	r8,0
800089ec:	ef 48 ff fc 	st.w	r7[-4],r8
800089f0:	c1 d8       	rjmp	80008a2a <gpio_enable_module+0x56>
800089f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800089f6:	11 98       	ld.ub	r8,r8[0x1]
800089f8:	10 99       	mov	r9,r8
800089fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800089fe:	11 88       	ld.ub	r8,r8[0x0]
80008a00:	12 9b       	mov	r11,r9
80008a02:	10 9c       	mov	r12,r8
80008a04:	f0 1f 00 10 	mcall	80008a44 <gpio_enable_module+0x70>
80008a08:	18 98       	mov	r8,r12
80008a0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008a0e:	f3 e8 10 08 	or	r8,r9,r8
80008a12:	ef 48 ff f8 	st.w	r7[-8],r8
80008a16:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008a1a:	2f e8       	sub	r8,-2
80008a1c:	ef 48 ff f4 	st.w	r7[-12],r8
80008a20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a24:	2f f8       	sub	r8,-1
80008a26:	ef 48 ff fc 	st.w	r7[-4],r8
80008a2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008a2e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008a32:	10 39       	cp.w	r9,r8
80008a34:	cd f3       	brcs	800089f2 <gpio_enable_module+0x1e>
80008a36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a3a:	10 9c       	mov	r12,r8
80008a3c:	2f cd       	sub	sp,-16
80008a3e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008a42:	00 00       	add	r0,r0
80008a44:	80 00       	ld.sh	r0,r0[0x0]
80008a46:	8a 48       	ld.sh	r8,r5[0x8]

80008a48 <gpio_enable_module_pin>:
80008a48:	eb cd 40 80 	pushm	r7,lr
80008a4c:	1a 97       	mov	r7,sp
80008a4e:	20 3d       	sub	sp,12
80008a50:	ef 4c ff f8 	st.w	r7[-8],r12
80008a54:	ef 4b ff f4 	st.w	r7[-12],r11
80008a58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a5c:	a5 98       	lsr	r8,0x5
80008a5e:	a9 68       	lsl	r8,0x8
80008a60:	e0 28 f0 00 	sub	r8,61440
80008a64:	ef 48 ff fc 	st.w	r7[-4],r8
80008a68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008a6c:	58 18       	cp.w	r8,1
80008a6e:	c1 e0       	breq	80008aaa <gpio_enable_module_pin+0x62>
80008a70:	c0 63       	brcs	80008a7c <gpio_enable_module_pin+0x34>
80008a72:	58 28       	cp.w	r8,2
80008a74:	c3 20       	breq	80008ad8 <gpio_enable_module_pin+0x90>
80008a76:	58 38       	cp.w	r8,3
80008a78:	c4 70       	breq	80008b06 <gpio_enable_module_pin+0xbe>
80008a7a:	c5 d8       	rjmp	80008b34 <gpio_enable_module_pin+0xec>
80008a7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a80:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a84:	30 19       	mov	r9,1
80008a86:	f2 08 09 48 	lsl	r8,r9,r8
80008a8a:	10 99       	mov	r9,r8
80008a8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008a90:	91 69       	st.w	r8[0x18],r9
80008a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008a96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008a9a:	30 19       	mov	r9,1
80008a9c:	f2 08 09 48 	lsl	r8,r9,r8
80008aa0:	10 99       	mov	r9,r8
80008aa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008aa6:	91 a9       	st.w	r8[0x28],r9
80008aa8:	c4 88       	rjmp	80008b38 <gpio_enable_module_pin+0xf0>
80008aaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008aae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ab2:	30 19       	mov	r9,1
80008ab4:	f2 08 09 48 	lsl	r8,r9,r8
80008ab8:	10 99       	mov	r9,r8
80008aba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008abe:	91 59       	st.w	r8[0x14],r9
80008ac0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ac4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ac8:	30 19       	mov	r9,1
80008aca:	f2 08 09 48 	lsl	r8,r9,r8
80008ace:	10 99       	mov	r9,r8
80008ad0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ad4:	91 a9       	st.w	r8[0x28],r9
80008ad6:	c3 18       	rjmp	80008b38 <gpio_enable_module_pin+0xf0>
80008ad8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008adc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ae0:	30 19       	mov	r9,1
80008ae2:	f2 08 09 48 	lsl	r8,r9,r8
80008ae6:	10 99       	mov	r9,r8
80008ae8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008aec:	91 69       	st.w	r8[0x18],r9
80008aee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008af2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008af6:	30 19       	mov	r9,1
80008af8:	f2 08 09 48 	lsl	r8,r9,r8
80008afc:	10 99       	mov	r9,r8
80008afe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b02:	91 99       	st.w	r8[0x24],r9
80008b04:	c1 a8       	rjmp	80008b38 <gpio_enable_module_pin+0xf0>
80008b06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b0a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b0e:	30 19       	mov	r9,1
80008b10:	f2 08 09 48 	lsl	r8,r9,r8
80008b14:	10 99       	mov	r9,r8
80008b16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b1a:	91 59       	st.w	r8[0x14],r9
80008b1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b20:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b24:	30 19       	mov	r9,1
80008b26:	f2 08 09 48 	lsl	r8,r9,r8
80008b2a:	10 99       	mov	r9,r8
80008b2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b30:	91 99       	st.w	r8[0x24],r9
80008b32:	c0 38       	rjmp	80008b38 <gpio_enable_module_pin+0xf0>
80008b34:	30 18       	mov	r8,1
80008b36:	c0 d8       	rjmp	80008b50 <gpio_enable_module_pin+0x108>
80008b38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b3c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b40:	30 19       	mov	r9,1
80008b42:	f2 08 09 48 	lsl	r8,r9,r8
80008b46:	10 99       	mov	r9,r8
80008b48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b4c:	91 29       	st.w	r8[0x8],r9
80008b4e:	30 08       	mov	r8,0
80008b50:	10 9c       	mov	r12,r8
80008b52:	2f dd       	sub	sp,-12
80008b54:	e3 cd 80 80 	ldm	sp++,r7,pc

80008b58 <gpio_enable_gpio_pin>:
80008b58:	eb cd 40 80 	pushm	r7,lr
80008b5c:	1a 97       	mov	r7,sp
80008b5e:	20 2d       	sub	sp,8
80008b60:	ef 4c ff f8 	st.w	r7[-8],r12
80008b64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b68:	a5 98       	lsr	r8,0x5
80008b6a:	a9 68       	lsl	r8,0x8
80008b6c:	e0 28 f0 00 	sub	r8,61440
80008b70:	ef 48 ff fc 	st.w	r7[-4],r8
80008b74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b78:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b7c:	30 19       	mov	r9,1
80008b7e:	f2 08 09 48 	lsl	r8,r9,r8
80008b82:	10 99       	mov	r9,r8
80008b84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008b88:	f1 49 00 48 	st.w	r8[72],r9
80008b8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008b90:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008b94:	30 19       	mov	r9,1
80008b96:	f2 08 09 48 	lsl	r8,r9,r8
80008b9a:	10 99       	mov	r9,r8
80008b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ba0:	91 19       	st.w	r8[0x4],r9
80008ba2:	2f ed       	sub	sp,-8
80008ba4:	e3 cd 80 80 	ldm	sp++,r7,pc

80008ba8 <gpio_enable_pin_pull_up>:
80008ba8:	eb cd 40 80 	pushm	r7,lr
80008bac:	1a 97       	mov	r7,sp
80008bae:	20 2d       	sub	sp,8
80008bb0:	ef 4c ff f8 	st.w	r7[-8],r12
80008bb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bb8:	a5 98       	lsr	r8,0x5
80008bba:	a9 68       	lsl	r8,0x8
80008bbc:	e0 28 f0 00 	sub	r8,61440
80008bc0:	ef 48 ff fc 	st.w	r7[-4],r8
80008bc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bc8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008bcc:	30 19       	mov	r9,1
80008bce:	f2 08 09 48 	lsl	r8,r9,r8
80008bd2:	10 99       	mov	r9,r8
80008bd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008bd8:	f1 49 00 74 	st.w	r8[116],r9
80008bdc:	2f ed       	sub	sp,-8
80008bde:	e3 cd 80 80 	ldm	sp++,r7,pc

80008be2 <gpio_configure_pin>:
80008be2:	eb cd 40 80 	pushm	r7,lr
80008be6:	1a 97       	mov	r7,sp
80008be8:	20 3d       	sub	sp,12
80008bea:	ef 4c ff f8 	st.w	r7[-8],r12
80008bee:	ef 4b ff f4 	st.w	r7[-12],r11
80008bf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008bf6:	a5 98       	lsr	r8,0x5
80008bf8:	a9 68       	lsl	r8,0x8
80008bfa:	e0 28 f0 00 	sub	r8,61440
80008bfe:	ef 48 ff fc 	st.w	r7[-4],r8
80008c02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008c06:	e2 18 00 04 	andl	r8,0x4,COH
80008c0a:	c0 e0       	breq	80008c26 <gpio_configure_pin+0x44>
80008c0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c10:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c14:	30 19       	mov	r9,1
80008c16:	f2 08 09 48 	lsl	r8,r9,r8
80008c1a:	10 99       	mov	r9,r8
80008c1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c20:	f1 49 00 74 	st.w	r8[116],r9
80008c24:	c0 d8       	rjmp	80008c3e <gpio_configure_pin+0x5c>
80008c26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c2a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c2e:	30 19       	mov	r9,1
80008c30:	f2 08 09 48 	lsl	r8,r9,r8
80008c34:	10 99       	mov	r9,r8
80008c36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c3a:	f1 49 00 78 	st.w	r8[120],r9
80008c3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008c42:	e2 18 00 80 	andl	r8,0x80,COH
80008c46:	c5 a0       	breq	80008cfa <gpio_configure_pin+0x118>
80008c48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008c4c:	e2 18 01 80 	andl	r8,0x180,COH
80008c50:	c1 a0       	breq	80008c84 <gpio_configure_pin+0xa2>
80008c52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c56:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c5a:	30 19       	mov	r9,1
80008c5c:	f2 08 09 48 	lsl	r8,r9,r8
80008c60:	10 99       	mov	r9,r8
80008c62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c66:	f1 49 00 a8 	st.w	r8[168],r9
80008c6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c6e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c72:	30 19       	mov	r9,1
80008c74:	f2 08 09 48 	lsl	r8,r9,r8
80008c78:	10 99       	mov	r9,r8
80008c7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008c7e:	f1 49 00 b8 	st.w	r8[184],r9
80008c82:	c3 c8       	rjmp	80008cfa <gpio_configure_pin+0x118>
80008c84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008c88:	e2 18 02 80 	andl	r8,0x280,COH
80008c8c:	c1 a0       	breq	80008cc0 <gpio_configure_pin+0xde>
80008c8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008c92:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008c96:	30 19       	mov	r9,1
80008c98:	f2 08 09 48 	lsl	r8,r9,r8
80008c9c:	10 99       	mov	r9,r8
80008c9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ca2:	f1 49 00 a4 	st.w	r8[164],r9
80008ca6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008caa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008cae:	30 19       	mov	r9,1
80008cb0:	f2 08 09 48 	lsl	r8,r9,r8
80008cb4:	10 99       	mov	r9,r8
80008cb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cba:	f1 49 00 b8 	st.w	r8[184],r9
80008cbe:	c1 e8       	rjmp	80008cfa <gpio_configure_pin+0x118>
80008cc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008cc4:	e2 18 03 80 	andl	r8,0x380,COH
80008cc8:	c1 90       	breq	80008cfa <gpio_configure_pin+0x118>
80008cca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008cce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008cd2:	30 19       	mov	r9,1
80008cd4:	f2 08 09 48 	lsl	r8,r9,r8
80008cd8:	10 99       	mov	r9,r8
80008cda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cde:	f1 49 00 a8 	st.w	r8[168],r9
80008ce2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ce6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008cea:	30 19       	mov	r9,1
80008cec:	f2 08 09 48 	lsl	r8,r9,r8
80008cf0:	10 99       	mov	r9,r8
80008cf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008cf6:	f1 49 00 b4 	st.w	r8[180],r9
80008cfa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008cfe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008d02:	5c 58       	castu.b	r8
80008d04:	c2 c0       	breq	80008d5c <gpio_configure_pin+0x17a>
80008d06:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008d0a:	e2 18 00 02 	andl	r8,0x2,COH
80008d0e:	c0 e0       	breq	80008d2a <gpio_configure_pin+0x148>
80008d10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d18:	30 19       	mov	r9,1
80008d1a:	f2 08 09 48 	lsl	r8,r9,r8
80008d1e:	10 99       	mov	r9,r8
80008d20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d24:	f1 49 00 54 	st.w	r8[84],r9
80008d28:	c0 d8       	rjmp	80008d42 <gpio_configure_pin+0x160>
80008d2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d2e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d32:	30 19       	mov	r9,1
80008d34:	f2 08 09 48 	lsl	r8,r9,r8
80008d38:	10 99       	mov	r9,r8
80008d3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d3e:	f1 49 00 58 	st.w	r8[88],r9
80008d42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d46:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d4a:	30 19       	mov	r9,1
80008d4c:	f2 08 09 48 	lsl	r8,r9,r8
80008d50:	10 99       	mov	r9,r8
80008d52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d56:	f1 49 00 44 	st.w	r8[68],r9
80008d5a:	c0 d8       	rjmp	80008d74 <gpio_configure_pin+0x192>
80008d5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d60:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d64:	30 19       	mov	r9,1
80008d66:	f2 08 09 48 	lsl	r8,r9,r8
80008d6a:	10 99       	mov	r9,r8
80008d6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d70:	f1 49 00 48 	st.w	r8[72],r9
80008d74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008d78:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008d7c:	30 19       	mov	r9,1
80008d7e:	f2 08 09 48 	lsl	r8,r9,r8
80008d82:	10 99       	mov	r9,r8
80008d84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008d88:	91 19       	st.w	r8[0x4],r9
80008d8a:	2f dd       	sub	sp,-12
80008d8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80008d90 <gpio_get_pin_value>:
80008d90:	eb cd 40 80 	pushm	r7,lr
80008d94:	1a 97       	mov	r7,sp
80008d96:	20 2d       	sub	sp,8
80008d98:	ef 4c ff f8 	st.w	r7[-8],r12
80008d9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008da0:	a5 98       	lsr	r8,0x5
80008da2:	a9 68       	lsl	r8,0x8
80008da4:	e0 28 f0 00 	sub	r8,61440
80008da8:	ef 48 ff fc 	st.w	r7[-4],r8
80008dac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008db0:	71 89       	ld.w	r9,r8[0x60]
80008db2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008db6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008dba:	f2 08 0a 48 	lsr	r8,r9,r8
80008dbe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008dc2:	10 9c       	mov	r12,r8
80008dc4:	2f ed       	sub	sp,-8
80008dc6:	e3 cd 80 80 	ldm	sp++,r7,pc

80008dca <gpio_set_gpio_pin>:
80008dca:	eb cd 40 80 	pushm	r7,lr
80008dce:	1a 97       	mov	r7,sp
80008dd0:	20 2d       	sub	sp,8
80008dd2:	ef 4c ff f8 	st.w	r7[-8],r12
80008dd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dda:	a5 98       	lsr	r8,0x5
80008ddc:	a9 68       	lsl	r8,0x8
80008dde:	e0 28 f0 00 	sub	r8,61440
80008de2:	ef 48 ff fc 	st.w	r7[-4],r8
80008de6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008dea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008dee:	30 19       	mov	r9,1
80008df0:	f2 08 09 48 	lsl	r8,r9,r8
80008df4:	10 99       	mov	r9,r8
80008df6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008dfa:	f1 49 00 54 	st.w	r8[84],r9
80008dfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e02:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e06:	30 19       	mov	r9,1
80008e08:	f2 08 09 48 	lsl	r8,r9,r8
80008e0c:	10 99       	mov	r9,r8
80008e0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e12:	f1 49 00 44 	st.w	r8[68],r9
80008e16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e1a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e1e:	30 19       	mov	r9,1
80008e20:	f2 08 09 48 	lsl	r8,r9,r8
80008e24:	10 99       	mov	r9,r8
80008e26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e2a:	91 19       	st.w	r8[0x4],r9
80008e2c:	2f ed       	sub	sp,-8
80008e2e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008e32 <gpio_clr_gpio_pin>:
80008e32:	eb cd 40 80 	pushm	r7,lr
80008e36:	1a 97       	mov	r7,sp
80008e38:	20 2d       	sub	sp,8
80008e3a:	ef 4c ff f8 	st.w	r7[-8],r12
80008e3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e42:	a5 98       	lsr	r8,0x5
80008e44:	a9 68       	lsl	r8,0x8
80008e46:	e0 28 f0 00 	sub	r8,61440
80008e4a:	ef 48 ff fc 	st.w	r7[-4],r8
80008e4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e52:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e56:	30 19       	mov	r9,1
80008e58:	f2 08 09 48 	lsl	r8,r9,r8
80008e5c:	10 99       	mov	r9,r8
80008e5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e62:	f1 49 00 58 	st.w	r8[88],r9
80008e66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e6a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e6e:	30 19       	mov	r9,1
80008e70:	f2 08 09 48 	lsl	r8,r9,r8
80008e74:	10 99       	mov	r9,r8
80008e76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e7a:	f1 49 00 44 	st.w	r8[68],r9
80008e7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008e86:	30 19       	mov	r9,1
80008e88:	f2 08 09 48 	lsl	r8,r9,r8
80008e8c:	10 99       	mov	r9,r8
80008e8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008e92:	91 19       	st.w	r8[0x4],r9
80008e94:	2f ed       	sub	sp,-8
80008e96:	e3 cd 80 80 	ldm	sp++,r7,pc

80008e9a <gpio_tgl_gpio_pin>:
80008e9a:	eb cd 40 80 	pushm	r7,lr
80008e9e:	1a 97       	mov	r7,sp
80008ea0:	20 2d       	sub	sp,8
80008ea2:	ef 4c ff f8 	st.w	r7[-8],r12
80008ea6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008eaa:	a5 98       	lsr	r8,0x5
80008eac:	a9 68       	lsl	r8,0x8
80008eae:	e0 28 f0 00 	sub	r8,61440
80008eb2:	ef 48 ff fc 	st.w	r7[-4],r8
80008eb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008eba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ebe:	30 19       	mov	r9,1
80008ec0:	f2 08 09 48 	lsl	r8,r9,r8
80008ec4:	10 99       	mov	r9,r8
80008ec6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008eca:	f1 49 00 5c 	st.w	r8[92],r9
80008ece:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ed2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008ed6:	30 19       	mov	r9,1
80008ed8:	f2 08 09 48 	lsl	r8,r9,r8
80008edc:	10 99       	mov	r9,r8
80008ede:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008ee2:	f1 49 00 44 	st.w	r8[68],r9
80008ee6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008eea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008eee:	30 19       	mov	r9,1
80008ef0:	f2 08 09 48 	lsl	r8,r9,r8
80008ef4:	10 99       	mov	r9,r8
80008ef6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008efa:	91 19       	st.w	r8[0x4],r9
80008efc:	2f ed       	sub	sp,-8
80008efe:	e3 cd 80 80 	ldm	sp++,r7,pc

80008f02 <_unhandled_interrupt>:
80008f02:	eb cd 40 80 	pushm	r7,lr
80008f06:	1a 97       	mov	r7,sp
80008f08:	c0 08       	rjmp	80008f08 <_unhandled_interrupt+0x6>
80008f0a:	d7 03       	nop

80008f0c <_get_interrupt_handler>:
80008f0c:	eb cd 40 80 	pushm	r7,lr
80008f10:	1a 97       	mov	r7,sp
80008f12:	20 3d       	sub	sp,12
80008f14:	ef 4c ff f4 	st.w	r7[-12],r12
80008f18:	fe 78 08 00 	mov	r8,-63488
80008f1c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008f20:	f2 09 11 03 	rsub	r9,r9,3
80008f24:	28 09       	sub	r9,-128
80008f26:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008f2a:	ef 48 ff f8 	st.w	r7[-8],r8
80008f2e:	fe 78 08 00 	mov	r8,-63488
80008f32:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008f36:	2c 09       	sub	r9,-64
80008f38:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008f3c:	ef 48 ff fc 	st.w	r7[-4],r8
80008f40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f44:	58 08       	cp.w	r8,0
80008f46:	c1 30       	breq	80008f6c <_get_interrupt_handler+0x60>
80008f48:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008f4c:	48 b8       	lddpc	r8,80008f78 <_get_interrupt_handler+0x6c>
80008f4e:	a1 79       	lsl	r9,0x1
80008f50:	2f f9       	sub	r9,-1
80008f52:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008f56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008f5a:	f0 08 12 00 	clz	r8,r8
80008f5e:	f0 08 11 1f 	rsub	r8,r8,31
80008f62:	a3 68       	lsl	r8,0x2
80008f64:	f2 08 00 08 	add	r8,r9,r8
80008f68:	70 08       	ld.w	r8,r8[0x0]
80008f6a:	c0 28       	rjmp	80008f6e <_get_interrupt_handler+0x62>
80008f6c:	30 08       	mov	r8,0
80008f6e:	10 9c       	mov	r12,r8
80008f70:	2f dd       	sub	sp,-12
80008f72:	e3 cd 80 80 	ldm	sp++,r7,pc
80008f76:	00 00       	add	r0,r0
80008f78:	80 00       	ld.sh	r0,r0[0x0]
80008f7a:	f0 fc eb cd 	ld.w	r12,r8[-5171]

80008f7c <INTC_init_evba>:
80008f7c:	eb cd 40 80 	pushm	r7,lr
80008f80:	1a 97       	mov	r7,sp
80008f82:	48 38       	lddpc	r8,80008f8c <INTC_init_evba+0x10>
80008f84:	e3 b8 00 01 	mtsr	0x4,r8
80008f88:	e3 cd 80 80 	ldm	sp++,r7,pc
80008f8c:	80 00       	ld.sh	r0,r0[0x0]
80008f8e:	ea 00       	*unknown*

80008f90 <INTC_init_interrupts>:
80008f90:	eb cd 40 80 	pushm	r7,lr
80008f94:	1a 97       	mov	r7,sp
80008f96:	20 2d       	sub	sp,8
80008f98:	f0 1f 00 1f 	mcall	80009014 <INTC_init_interrupts+0x84>
80008f9c:	30 08       	mov	r8,0
80008f9e:	ef 48 ff f8 	st.w	r7[-8],r8
80008fa2:	c3 18       	rjmp	80009004 <INTC_init_interrupts+0x74>
80008fa4:	30 08       	mov	r8,0
80008fa6:	ef 48 ff fc 	st.w	r7[-4],r8
80008faa:	c1 48       	rjmp	80008fd2 <INTC_init_interrupts+0x42>
80008fac:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008fb0:	49 a8       	lddpc	r8,80009018 <INTC_init_interrupts+0x88>
80008fb2:	a1 79       	lsl	r9,0x1
80008fb4:	2f f9       	sub	r9,-1
80008fb6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008fba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fbe:	a3 68       	lsl	r8,0x2
80008fc0:	f2 08 00 08 	add	r8,r9,r8
80008fc4:	49 69       	lddpc	r9,8000901c <INTC_init_interrupts+0x8c>
80008fc6:	91 09       	st.w	r8[0x0],r9
80008fc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fcc:	2f f8       	sub	r8,-1
80008fce:	ef 48 ff fc 	st.w	r7[-4],r8
80008fd2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008fd6:	49 18       	lddpc	r8,80009018 <INTC_init_interrupts+0x88>
80008fd8:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
80008fdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008fe0:	10 39       	cp.w	r9,r8
80008fe2:	fe 9b ff e5 	brhi	80008fac <INTC_init_interrupts+0x1c>
80008fe6:	fe 78 08 00 	mov	r8,-63488
80008fea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008fee:	48 db       	lddpc	r11,80009020 <INTC_init_interrupts+0x90>
80008ff0:	48 da       	lddpc	r10,80009024 <INTC_init_interrupts+0x94>
80008ff2:	f6 0a 01 0a 	sub	r10,r11,r10
80008ff6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80008ffa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008ffe:	2f f8       	sub	r8,-1
80009000:	ef 48 ff f8 	st.w	r7[-8],r8
80009004:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009008:	59 d8       	cp.w	r8,29
8000900a:	fe 98 ff cd 	brls	80008fa4 <INTC_init_interrupts+0x14>
8000900e:	2f ed       	sub	sp,-8
80009010:	e3 cd 80 80 	ldm	sp++,r7,pc
80009014:	80 00       	ld.sh	r0,r0[0x0]
80009016:	8f 7c       	st.w	r7[0x1c],r12
80009018:	80 00       	ld.sh	r0,r0[0x0]
8000901a:	f0 fc 80 00 	ld.w	r12,r8[-32768]
8000901e:	8f 02       	st.w	r7[0x0],r2
80009020:	80 00       	ld.sh	r0,r0[0x0]
80009022:	eb 04 80 00 	ld.sh	r4,r5[-32768]
80009026:	ea 00       	*unknown*

80009028 <INTC_register_interrupt>:
80009028:	eb cd 40 80 	pushm	r7,lr
8000902c:	1a 97       	mov	r7,sp
8000902e:	20 4d       	sub	sp,16
80009030:	ef 4c ff f8 	st.w	r7[-8],r12
80009034:	ef 4b ff f4 	st.w	r7[-12],r11
80009038:	ef 4a ff f0 	st.w	r7[-16],r10
8000903c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009040:	a5 98       	lsr	r8,0x5
80009042:	ef 48 ff fc 	st.w	r7[-4],r8
80009046:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000904a:	4a 78       	lddpc	r8,800090e4 <INTC_register_interrupt+0xbc>
8000904c:	a1 79       	lsl	r9,0x1
8000904e:	2f f9       	sub	r9,-1
80009050:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80009054:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009058:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000905c:	a3 68       	lsl	r8,0x2
8000905e:	f2 08 00 08 	add	r8,r9,r8
80009062:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009066:	91 09       	st.w	r8[0x0],r9
80009068:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000906c:	58 08       	cp.w	r8,0
8000906e:	c0 c1       	brne	80009086 <INTC_register_interrupt+0x5e>
80009070:	fe 78 08 00 	mov	r8,-63488
80009074:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009078:	49 cb       	lddpc	r11,800090e8 <INTC_register_interrupt+0xc0>
8000907a:	49 da       	lddpc	r10,800090ec <INTC_register_interrupt+0xc4>
8000907c:	f6 0a 01 0a 	sub	r10,r11,r10
80009080:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80009084:	c2 d8       	rjmp	800090de <INTC_register_interrupt+0xb6>
80009086:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000908a:	58 18       	cp.w	r8,1
8000908c:	c0 d1       	brne	800090a6 <INTC_register_interrupt+0x7e>
8000908e:	fe 78 08 00 	mov	r8,-63488
80009092:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009096:	49 7b       	lddpc	r11,800090f0 <INTC_register_interrupt+0xc8>
80009098:	49 5a       	lddpc	r10,800090ec <INTC_register_interrupt+0xc4>
8000909a:	f6 0a 01 0a 	sub	r10,r11,r10
8000909e:	bf aa       	sbr	r10,0x1e
800090a0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800090a4:	c1 d8       	rjmp	800090de <INTC_register_interrupt+0xb6>
800090a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800090aa:	58 28       	cp.w	r8,2
800090ac:	c0 d1       	brne	800090c6 <INTC_register_interrupt+0x9e>
800090ae:	fe 78 08 00 	mov	r8,-63488
800090b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800090b6:	49 0b       	lddpc	r11,800090f4 <INTC_register_interrupt+0xcc>
800090b8:	48 da       	lddpc	r10,800090ec <INTC_register_interrupt+0xc4>
800090ba:	f6 0a 01 0a 	sub	r10,r11,r10
800090be:	bf ba       	sbr	r10,0x1f
800090c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800090c4:	c0 d8       	rjmp	800090de <INTC_register_interrupt+0xb6>
800090c6:	fe 78 08 00 	mov	r8,-63488
800090ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
800090ce:	48 bb       	lddpc	r11,800090f8 <INTC_register_interrupt+0xd0>
800090d0:	48 7a       	lddpc	r10,800090ec <INTC_register_interrupt+0xc4>
800090d2:	f6 0a 01 0a 	sub	r10,r11,r10
800090d6:	ea 1a c0 00 	orh	r10,0xc000
800090da:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800090de:	2f cd       	sub	sp,-16
800090e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800090e4:	80 00       	ld.sh	r0,r0[0x0]
800090e6:	f0 fc 80 00 	ld.w	r12,r8[-32768]
800090ea:	eb 04 80 00 	ld.sh	r4,r5[-32768]
800090ee:	ea 00       	*unknown*
800090f0:	80 00       	ld.sh	r0,r0[0x0]
800090f2:	eb 12 80 00 	ld.uh	r2,r5[-32768]
800090f6:	eb 20 80 00 	ld.sb	r0,r5[-32768]
800090fa:	eb 2e eb cd 	ld.sb	lr,r5[-5171]

800090fc <mci_reset>:
800090fc:	eb cd 40 80 	pushm	r7,lr
80009100:	1a 97       	mov	r7,sp
80009102:	20 1d       	sub	sp,4
80009104:	ef 4c ff fc 	st.w	r7[-4],r12
80009108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000910c:	e0 69 00 80 	mov	r9,128
80009110:	91 09       	st.w	r8[0x0],r9
80009112:	2f fd       	sub	sp,-4
80009114:	e3 cd 80 80 	ldm	sp++,r7,pc

80009118 <mci_disable>:
80009118:	eb cd 40 80 	pushm	r7,lr
8000911c:	1a 97       	mov	r7,sp
8000911e:	20 1d       	sub	sp,4
80009120:	ef 4c ff fc 	st.w	r7[-4],r12
80009124:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009128:	30 a9       	mov	r9,10
8000912a:	91 09       	st.w	r8[0x0],r9
8000912c:	2f fd       	sub	sp,-4
8000912e:	e3 cd 80 80 	ldm	sp++,r7,pc

80009132 <mci_enable>:
80009132:	eb cd 40 80 	pushm	r7,lr
80009136:	1a 97       	mov	r7,sp
80009138:	20 1d       	sub	sp,4
8000913a:	ef 4c ff fc 	st.w	r7[-4],r12
8000913e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009142:	30 59       	mov	r9,5
80009144:	91 09       	st.w	r8[0x0],r9
80009146:	2f fd       	sub	sp,-4
80009148:	e3 cd 80 80 	ldm	sp++,r7,pc

8000914c <mci_set_speed>:
8000914c:	eb cd 40 80 	pushm	r7,lr
80009150:	1a 97       	mov	r7,sp
80009152:	20 7d       	sub	sp,28
80009154:	ef 4c ff ec 	st.w	r7[-20],r12
80009158:	ef 4b ff e8 	st.w	r7[-24],r11
8000915c:	ef 4a ff e4 	st.w	r7[-28],r10
80009160:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009164:	70 18       	ld.w	r8,r8[0x4]
80009166:	ef 48 ff f4 	st.w	r7[-12],r8
8000916a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000916e:	e0 69 78 40 	mov	r9,30784
80009172:	ea 19 01 7d 	orh	r9,0x17d
80009176:	12 38       	cp.w	r8,r9
80009178:	e0 88 00 14 	brls	800091a0 <mci_set_speed+0x54>
8000917c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009180:	71 58       	ld.w	r8,r8[0x54]
80009182:	ef 48 ff f0 	st.w	r7[-16],r8
80009186:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000918a:	30 19       	mov	r9,1
8000918c:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
80009190:	ef 48 ff f0 	st.w	r7[-16],r8
80009194:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009198:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000919c:	f1 49 00 54 	st.w	r8[84],r9
800091a0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800091a4:	58 08       	cp.w	r8,0
800091a6:	c2 90       	breq	800091f8 <mci_set_speed+0xac>
800091a8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800091ac:	f0 09 15 01 	lsl	r9,r8,0x1
800091b0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800091b4:	f0 09 0d 08 	divu	r8,r8,r9
800091b8:	ef 48 ff f8 	st.w	r7[-8],r8
800091bc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800091c0:	f0 09 15 01 	lsl	r9,r8,0x1
800091c4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800091c8:	f0 09 0d 08 	divu	r8,r8,r9
800091cc:	12 98       	mov	r8,r9
800091ce:	ef 48 ff fc 	st.w	r7[-4],r8
800091d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800091d6:	58 08       	cp.w	r8,0
800091d8:	c0 60       	breq	800091e4 <mci_set_speed+0x98>
800091da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091de:	2f f8       	sub	r8,-1
800091e0:	ef 48 ff f8 	st.w	r7[-8],r8
800091e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091e8:	58 08       	cp.w	r8,0
800091ea:	c0 b0       	breq	80009200 <mci_set_speed+0xb4>
800091ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800091f0:	20 18       	sub	r8,1
800091f2:	ef 48 ff f8 	st.w	r7[-8],r8
800091f6:	c0 68       	rjmp	80009202 <mci_set_speed+0xb6>
800091f8:	30 08       	mov	r8,0
800091fa:	ef 48 ff f8 	st.w	r7[-8],r8
800091fe:	c0 28       	rjmp	80009202 <mci_set_speed+0xb6>
80009200:	d7 03       	nop
80009202:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009206:	e0 18 ff 00 	andl	r8,0xff00
8000920a:	ef 48 ff f4 	st.w	r7[-12],r8
8000920e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009212:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009216:	f3 e8 10 08 	or	r8,r9,r8
8000921a:	ef 48 ff f4 	st.w	r7[-12],r8
8000921e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009222:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009226:	91 19       	st.w	r8[0x4],r9
80009228:	2f 9d       	sub	sp,-28
8000922a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000922e:	d7 03       	nop

80009230 <mci_init>:
80009230:	eb cd 40 80 	pushm	r7,lr
80009234:	1a 97       	mov	r7,sp
80009236:	20 3d       	sub	sp,12
80009238:	ef 4c ff fc 	st.w	r7[-4],r12
8000923c:	16 98       	mov	r8,r11
8000923e:	ef 4a ff f4 	st.w	r7[-12],r10
80009242:	ef 68 ff f8 	st.b	r7[-8],r8
80009246:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000924a:	30 18       	mov	r8,1
8000924c:	f0 09 18 00 	cp.b	r9,r8
80009250:	e0 88 00 04 	brls	80009258 <mci_init+0x28>
80009254:	30 18       	mov	r8,1
80009256:	c3 98       	rjmp	800092c8 <mci_init+0x98>
80009258:	49 e8       	lddpc	r8,800092d0 <mci_init+0xa0>
8000925a:	30 09       	mov	r9,0
8000925c:	91 09       	st.w	r8[0x0],r9
8000925e:	ee fc ff fc 	ld.w	r12,r7[-4]
80009262:	f0 1f 00 1d 	mcall	800092d4 <mci_init+0xa4>
80009266:	ee fc ff fc 	ld.w	r12,r7[-4]
8000926a:	f0 1f 00 1c 	mcall	800092d8 <mci_init+0xa8>
8000926e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009272:	3f f9       	mov	r9,-1
80009274:	f1 49 00 48 	st.w	r8[72],r9
80009278:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000927c:	30 09       	mov	r9,0
8000927e:	f1 49 00 54 	st.w	r8[84],r9
80009282:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009286:	30 09       	mov	r9,0
80009288:	91 19       	st.w	r8[0x4],r9
8000928a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000928e:	37 29       	mov	r9,114
80009290:	91 29       	st.w	r8[0x8],r9
80009292:	e2 7a 0d 40 	mov	r10,200000
80009296:	ee fb ff f4 	ld.w	r11,r7[-12]
8000929a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000929e:	f0 1f 00 10 	mcall	800092dc <mci_init+0xac>
800092a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800092a6:	70 18       	ld.w	r8,r8[0x4]
800092a8:	10 99       	mov	r9,r8
800092aa:	e8 19 1f 00 	orl	r9,0x1f00
800092ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800092b2:	91 19       	st.w	r8[0x4],r9
800092b4:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800092b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800092bc:	91 39       	st.w	r8[0xc],r9
800092be:	ee fc ff fc 	ld.w	r12,r7[-4]
800092c2:	f0 1f 00 08 	mcall	800092e0 <mci_init+0xb0>
800092c6:	30 08       	mov	r8,0
800092c8:	10 9c       	mov	r12,r8
800092ca:	2f dd       	sub	sp,-12
800092cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800092d0:	00 00       	add	r0,r0
800092d2:	07 b0       	ld.ub	r0,r3[0x3]
800092d4:	80 00       	ld.sh	r0,r0[0x0]
800092d6:	90 fc       	ld.uh	r12,r8[0xe]
800092d8:	80 00       	ld.sh	r0,r0[0x0]
800092da:	91 18       	st.w	r8[0x4],r8
800092dc:	80 00       	ld.sh	r0,r0[0x0]
800092de:	91 4c       	st.w	r8[0x10],r12
800092e0:	80 00       	ld.sh	r0,r0[0x0]
800092e2:	91 32       	st.w	r8[0xc],r2

800092e4 <mci_set_block_size>:
800092e4:	eb cd 40 80 	pushm	r7,lr
800092e8:	1a 97       	mov	r7,sp
800092ea:	20 3d       	sub	sp,12
800092ec:	ef 4c ff f8 	st.w	r7[-8],r12
800092f0:	16 98       	mov	r8,r11
800092f2:	ef 58 ff f4 	st.h	r7[-12],r8
800092f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800092fa:	70 18       	ld.w	r8,r8[0x4]
800092fc:	ef 48 ff fc 	st.w	r7[-4],r8
80009300:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009304:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80009308:	ef 48 ff fc 	st.w	r7[-4],r8
8000930c:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80009310:	b1 68       	lsl	r8,0x10
80009312:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009316:	f3 e8 10 08 	or	r8,r9,r8
8000931a:	ef 48 ff fc 	st.w	r7[-4],r8
8000931e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009322:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009326:	91 19       	st.w	r8[0x4],r9
80009328:	2f dd       	sub	sp,-12
8000932a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000932e <mci_set_block_count>:
8000932e:	eb cd 40 80 	pushm	r7,lr
80009332:	1a 97       	mov	r7,sp
80009334:	20 3d       	sub	sp,12
80009336:	ef 4c ff f8 	st.w	r7[-8],r12
8000933a:	16 98       	mov	r8,r11
8000933c:	ef 58 ff f4 	st.h	r7[-12],r8
80009340:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009344:	70 68       	ld.w	r8,r8[0x18]
80009346:	ef 48 ff fc 	st.w	r7[-4],r8
8000934a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000934e:	ef 58 ff fe 	st.h	r7[-2],r8
80009352:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009356:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000935a:	91 69       	st.w	r8[0x18],r9
8000935c:	2f dd       	sub	sp,-12
8000935e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009362:	d7 03       	nop

80009364 <mci_send_cmd>:
80009364:	eb cd 40 80 	pushm	r7,lr
80009368:	1a 97       	mov	r7,sp
8000936a:	20 7d       	sub	sp,28
8000936c:	ef 4c ff ec 	st.w	r7[-20],r12
80009370:	ef 4b ff e8 	st.w	r7[-24],r11
80009374:	ef 4a ff e4 	st.w	r7[-28],r10
80009378:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000937c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80009380:	91 49       	st.w	r8[0x10],r9
80009382:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009386:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000938a:	91 59       	st.w	r8[0x14],r9
8000938c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009390:	ef 48 ff f4 	st.w	r7[-12],r8
80009394:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009398:	ef 48 ff f8 	st.w	r7[-8],r8
8000939c:	4a 78       	lddpc	r8,80009438 <mci_send_cmd+0xd4>
8000939e:	70 08       	ld.w	r8,r8[0x0]
800093a0:	10 99       	mov	r9,r8
800093a2:	e6 19 01 e0 	andh	r9,0x1e0,COH
800093a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093aa:	71 08       	ld.w	r8,r8[0x40]
800093ac:	f3 e8 10 08 	or	r8,r9,r8
800093b0:	10 99       	mov	r9,r8
800093b2:	4a 28       	lddpc	r8,80009438 <mci_send_cmd+0xd4>
800093b4:	91 09       	st.w	r8[0x0],r9
800093b6:	4a 18       	lddpc	r8,80009438 <mci_send_cmd+0xd4>
800093b8:	70 08       	ld.w	r8,r8[0x0]
800093ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800093be:	ce 70       	breq	8000938c <mci_send_cmd+0x28>
800093c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800093c4:	ef 48 ff fc 	st.w	r7[-4],r8
800093c8:	49 c8       	lddpc	r8,80009438 <mci_send_cmd+0xd4>
800093ca:	70 08       	ld.w	r8,r8[0x0]
800093cc:	10 99       	mov	r9,r8
800093ce:	e6 19 01 e0 	andh	r9,0x1e0,COH
800093d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800093d6:	71 08       	ld.w	r8,r8[0x40]
800093d8:	f3 e8 10 08 	or	r8,r9,r8
800093dc:	10 99       	mov	r9,r8
800093de:	49 78       	lddpc	r8,80009438 <mci_send_cmd+0xd4>
800093e0:	91 09       	st.w	r8[0x0],r9
800093e2:	49 68       	lddpc	r8,80009438 <mci_send_cmd+0xd4>
800093e4:	70 08       	ld.w	r8,r8[0x0]
800093e6:	e6 18 c0 7f 	andh	r8,0xc07f,COH
800093ea:	ef 48 ff f0 	st.w	r7[-16],r8
800093ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800093f2:	58 08       	cp.w	r8,0
800093f4:	c1 d0       	breq	8000942e <mci_send_cmd+0xca>
800093f6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800093fa:	e0 48 00 69 	cp.w	r8,105
800093fe:	c0 f0       	breq	8000941c <mci_send_cmd+0xb8>
80009400:	ee f8 ff e8 	ld.w	r8,r7[-24]
80009404:	e0 48 08 41 	cp.w	r8,2113
80009408:	c0 a0       	breq	8000941c <mci_send_cmd+0xb8>
8000940a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000940e:	fc 19 00 10 	movh	r9,0x10
80009412:	12 38       	cp.w	r8,r9
80009414:	c0 c0       	breq	8000942c <mci_send_cmd+0xc8>
80009416:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000941a:	c0 b8       	rjmp	80009430 <mci_send_cmd+0xcc>
8000941c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009420:	e4 48 00 00 	cp.w	r8,262144
80009424:	c0 50       	breq	8000942e <mci_send_cmd+0xca>
80009426:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000942a:	c0 38       	rjmp	80009430 <mci_send_cmd+0xcc>
8000942c:	d7 03       	nop
8000942e:	30 08       	mov	r8,0
80009430:	10 9c       	mov	r12,r8
80009432:	2f 9d       	sub	sp,-28
80009434:	e3 cd 80 80 	ldm	sp++,r7,pc
80009438:	00 00       	add	r0,r0
8000943a:	07 b0       	ld.ub	r0,r3[0x3]

8000943c <mci_set_bus_size>:
8000943c:	eb cd 40 80 	pushm	r7,lr
80009440:	1a 97       	mov	r7,sp
80009442:	20 3d       	sub	sp,12
80009444:	ef 4c ff f8 	st.w	r7[-8],r12
80009448:	16 98       	mov	r8,r11
8000944a:	ef 68 ff f4 	st.b	r7[-12],r8
8000944e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009452:	30 38       	mov	r8,3
80009454:	f0 09 18 00 	cp.b	r9,r8
80009458:	e0 88 00 04 	brls	80009460 <mci_set_bus_size+0x24>
8000945c:	30 18       	mov	r8,1
8000945e:	c1 b8       	rjmp	80009494 <mci_set_bus_size+0x58>
80009460:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009464:	70 38       	ld.w	r8,r8[0xc]
80009466:	ef 48 ff fc 	st.w	r7[-4],r8
8000946a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000946e:	e0 18 ff 3f 	andl	r8,0xff3f
80009472:	ef 48 ff fc 	st.w	r7[-4],r8
80009476:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000947a:	a7 68       	lsl	r8,0x6
8000947c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009480:	f3 e8 10 08 	or	r8,r9,r8
80009484:	ef 48 ff fc 	st.w	r7[-4],r8
80009488:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000948c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009490:	91 39       	st.w	r8[0xc],r9
80009492:	30 08       	mov	r8,0
80009494:	10 9c       	mov	r12,r8
80009496:	2f dd       	sub	sp,-12
80009498:	e3 cd 80 80 	ldm	sp++,r7,pc

8000949c <mci_read_response>:
8000949c:	eb cd 40 80 	pushm	r7,lr
800094a0:	1a 97       	mov	r7,sp
800094a2:	20 1d       	sub	sp,4
800094a4:	ef 4c ff fc 	st.w	r7[-4],r12
800094a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800094ac:	70 88       	ld.w	r8,r8[0x20]
800094ae:	10 9c       	mov	r12,r8
800094b0:	2f fd       	sub	sp,-4
800094b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800094b6:	d7 03       	nop

800094b8 <mci_wait_busy_signal>:
800094b8:	eb cd 40 80 	pushm	r7,lr
800094bc:	1a 97       	mov	r7,sp
800094be:	20 2d       	sub	sp,8
800094c0:	ef 4c ff f8 	st.w	r7[-8],r12
800094c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800094c8:	ef 48 ff fc 	st.w	r7[-4],r8
800094cc:	48 b8       	lddpc	r8,800094f8 <mci_wait_busy_signal+0x40>
800094ce:	70 08       	ld.w	r8,r8[0x0]
800094d0:	10 99       	mov	r9,r8
800094d2:	e6 19 01 e0 	andh	r9,0x1e0,COH
800094d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800094da:	71 08       	ld.w	r8,r8[0x40]
800094dc:	f3 e8 10 08 	or	r8,r9,r8
800094e0:	10 99       	mov	r9,r8
800094e2:	48 68       	lddpc	r8,800094f8 <mci_wait_busy_signal+0x40>
800094e4:	91 09       	st.w	r8[0x0],r9
800094e6:	48 58       	lddpc	r8,800094f8 <mci_wait_busy_signal+0x40>
800094e8:	70 08       	ld.w	r8,r8[0x0]
800094ea:	e2 18 00 20 	andl	r8,0x20,COH
800094ee:	ce b0       	breq	800094c4 <mci_wait_busy_signal+0xc>
800094f0:	2f ed       	sub	sp,-8
800094f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800094f6:	00 00       	add	r0,r0
800094f8:	00 00       	add	r0,r0
800094fa:	07 b0       	ld.ub	r0,r3[0x3]

800094fc <mci_select_card>:
800094fc:	eb cd 40 80 	pushm	r7,lr
80009500:	1a 97       	mov	r7,sp
80009502:	20 3d       	sub	sp,12
80009504:	ef 4c ff fc 	st.w	r7[-4],r12
80009508:	16 99       	mov	r9,r11
8000950a:	14 98       	mov	r8,r10
8000950c:	ef 69 ff f8 	st.b	r7[-8],r9
80009510:	ef 68 ff f4 	st.b	r7[-12],r8
80009514:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009518:	30 18       	mov	r8,1
8000951a:	f0 09 18 00 	cp.b	r9,r8
8000951e:	e0 88 00 04 	brls	80009526 <mci_select_card+0x2a>
80009522:	30 18       	mov	r8,1
80009524:	c0 e8       	rjmp	80009540 <mci_select_card+0x44>
80009526:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000952a:	f0 09 15 06 	lsl	r9,r8,0x6
8000952e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009532:	f3 e8 10 08 	or	r8,r9,r8
80009536:	10 99       	mov	r9,r8
80009538:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000953c:	91 39       	st.w	r8[0xc],r9
8000953e:	30 08       	mov	r8,0
80009540:	10 9c       	mov	r12,r8
80009542:	2f dd       	sub	sp,-12
80009544:	e3 cd 80 80 	ldm	sp++,r7,pc

80009548 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80009548:	eb cd 40 80 	pushm	r7,lr
8000954c:	1a 97       	mov	r7,sp
8000954e:	20 1d       	sub	sp,4
80009550:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80009554:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009558:	e6 18 00 01 	andh	r8,0x1,COH
8000955c:	5f 08       	sreq	r8
8000955e:	5c 58       	castu.b	r8
}
80009560:	10 9c       	mov	r12,r8
80009562:	2f fd       	sub	sp,-4
80009564:	e3 cd 80 80 	ldm	sp++,r7,pc

80009568 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80009568:	eb cd 40 80 	pushm	r7,lr
8000956c:	1a 97       	mov	r7,sp
8000956e:	20 4d       	sub	sp,16
80009570:	ef 4c ff f8 	st.w	r7[-8],r12
80009574:	ef 4b ff f4 	st.w	r7[-12],r11
80009578:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000957c:	e1 b8 00 00 	mfsr	r8,0x0
80009580:	10 9c       	mov	r12,r8
80009582:	f0 1f 00 73 	mcall	8000974c <tc_configure_interrupts+0x1e4>
80009586:	18 98       	mov	r8,r12
80009588:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000958c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009590:	58 28       	cp.w	r8,2
80009592:	e0 88 00 04 	brls	8000959a <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
80009596:	3f f8       	mov	r8,-1
80009598:	cd 68       	rjmp	80009744 <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000959a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000959e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800095a2:	70 08       	ld.w	r8,r8[0x0]
800095a4:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800095a8:	5c 58       	castu.b	r8
800095aa:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
800095ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800095b2:	70 08       	ld.w	r8,r8[0x0]
800095b4:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800095b8:	5c 58       	castu.b	r8
800095ba:	a7 68       	lsl	r8,0x6
800095bc:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
800095be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800095c2:	70 08       	ld.w	r8,r8[0x0]
800095c4:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800095c8:	5c 58       	castu.b	r8
800095ca:	a5 78       	lsl	r8,0x5
800095cc:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
800095ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800095d2:	70 08       	ld.w	r8,r8[0x0]
800095d4:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
800095d8:	5c 58       	castu.b	r8
800095da:	a5 68       	lsl	r8,0x4
800095dc:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
800095de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800095e2:	70 08       	ld.w	r8,r8[0x0]
800095e4:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800095e8:	5c 58       	castu.b	r8
800095ea:	a3 78       	lsl	r8,0x3
800095ec:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
800095ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800095f2:	70 08       	ld.w	r8,r8[0x0]
800095f4:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800095f8:	5c 58       	castu.b	r8
800095fa:	a3 68       	lsl	r8,0x2
800095fc:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
800095fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009602:	70 08       	ld.w	r8,r8[0x0]
80009604:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80009608:	5c 58       	castu.b	r8
8000960a:	a1 78       	lsl	r8,0x1
8000960c:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
8000960e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009612:	70 08       	ld.w	r8,r8[0x0]
80009614:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009618:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
8000961a:	f3 e8 10 08 	or	r8,r9,r8
8000961e:	10 99       	mov	r9,r8
80009620:	ee fa ff f8 	ld.w	r10,r7[-8]
80009624:	f6 08 15 06 	lsl	r8,r11,0x6
80009628:	f4 08 00 08 	add	r8,r10,r8
8000962c:	2d c8       	sub	r8,-36
8000962e:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80009630:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009634:	30 08       	mov	r8,0
80009636:	f0 09 18 00 	cp.b	r9,r8
8000963a:	c0 20       	breq	8000963e <tc_configure_interrupts+0xd6>
8000963c:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000963e:	ee fb ff f4 	ld.w	r11,r7[-12]
80009642:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009646:	70 08       	ld.w	r8,r8[0x0]
80009648:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000964c:	5c 58       	castu.b	r8
8000964e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009652:	c0 41       	brne	8000965a <tc_configure_interrupts+0xf2>
80009654:	e0 69 00 80 	mov	r9,128
80009658:	c0 28       	rjmp	8000965c <tc_configure_interrupts+0xf4>
8000965a:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
8000965c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009660:	70 08       	ld.w	r8,r8[0x0]
80009662:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80009666:	5c 58       	castu.b	r8
80009668:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000966c:	c0 31       	brne	80009672 <tc_configure_interrupts+0x10a>
8000966e:	34 08       	mov	r8,64
80009670:	c0 28       	rjmp	80009674 <tc_configure_interrupts+0x10c>
80009672:	30 08       	mov	r8,0
80009674:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80009676:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000967a:	70 08       	ld.w	r8,r8[0x0]
8000967c:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80009680:	5c 58       	castu.b	r8
80009682:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009686:	c0 31       	brne	8000968c <tc_configure_interrupts+0x124>
80009688:	32 08       	mov	r8,32
8000968a:	c0 28       	rjmp	8000968e <tc_configure_interrupts+0x126>
8000968c:	30 08       	mov	r8,0
8000968e:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80009690:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009694:	70 08       	ld.w	r8,r8[0x0]
80009696:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
8000969a:	5c 58       	castu.b	r8
8000969c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800096a0:	c0 31       	brne	800096a6 <tc_configure_interrupts+0x13e>
800096a2:	31 08       	mov	r8,16
800096a4:	c0 28       	rjmp	800096a8 <tc_configure_interrupts+0x140>
800096a6:	30 08       	mov	r8,0
800096a8:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
800096aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096ae:	70 08       	ld.w	r8,r8[0x0]
800096b0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800096b4:	5c 58       	castu.b	r8
800096b6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800096ba:	c0 31       	brne	800096c0 <tc_configure_interrupts+0x158>
800096bc:	30 88       	mov	r8,8
800096be:	c0 28       	rjmp	800096c2 <tc_configure_interrupts+0x15a>
800096c0:	30 08       	mov	r8,0
800096c2:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
800096c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096c8:	70 08       	ld.w	r8,r8[0x0]
800096ca:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800096ce:	5c 58       	castu.b	r8
800096d0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800096d4:	c0 31       	brne	800096da <tc_configure_interrupts+0x172>
800096d6:	30 48       	mov	r8,4
800096d8:	c0 28       	rjmp	800096dc <tc_configure_interrupts+0x174>
800096da:	30 08       	mov	r8,0
800096dc:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800096de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096e2:	70 08       	ld.w	r8,r8[0x0]
800096e4:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800096e8:	5c 58       	castu.b	r8
800096ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800096ee:	c0 31       	brne	800096f4 <tc_configure_interrupts+0x18c>
800096f0:	30 28       	mov	r8,2
800096f2:	c0 28       	rjmp	800096f6 <tc_configure_interrupts+0x18e>
800096f4:	30 08       	mov	r8,0
800096f6:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
800096f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800096fc:	70 08       	ld.w	r8,r8[0x0]
800096fe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009702:	5c 58       	castu.b	r8
80009704:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009708:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000970a:	f3 e8 10 08 	or	r8,r9,r8
8000970e:	10 99       	mov	r9,r8
80009710:	ee fa ff f8 	ld.w	r10,r7[-8]
80009714:	f6 08 15 06 	lsl	r8,r11,0x6
80009718:	f4 08 00 08 	add	r8,r10,r8
8000971c:	2d 88       	sub	r8,-40
8000971e:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80009720:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009724:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009728:	a1 78       	lsl	r8,0x1
8000972a:	2f f8       	sub	r8,-1
8000972c:	a5 78       	lsl	r8,0x5
8000972e:	f2 08 00 08 	add	r8,r9,r8
80009732:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80009734:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009738:	30 08       	mov	r8,0
8000973a:	f0 09 18 00 	cp.b	r9,r8
8000973e:	c0 20       	breq	80009742 <tc_configure_interrupts+0x1da>
80009740:	d5 03       	csrf	0x10

  return 0;
80009742:	30 08       	mov	r8,0
}
80009744:	10 9c       	mov	r12,r8
80009746:	2f cd       	sub	sp,-16
80009748:	e3 cd 80 80 	ldm	sp++,r7,pc
8000974c:	80 00       	ld.sh	r0,r0[0x0]
8000974e:	95 48       	st.w	r10[0x10],r8

80009750 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80009750:	eb cd 40 80 	pushm	r7,lr
80009754:	1a 97       	mov	r7,sp
80009756:	20 2d       	sub	sp,8
80009758:	ef 4c ff fc 	st.w	r7[-4],r12
8000975c:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80009760:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009764:	70 08       	ld.w	r8,r8[0x0]
80009766:	58 28       	cp.w	r8,2
80009768:	e0 88 00 04 	brls	80009770 <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
8000976c:	3f f8       	mov	r8,-1
8000976e:	c9 78       	rjmp	8000989c <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80009770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009774:	70 09       	ld.w	r9,r8[0x0]
80009776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000977a:	70 18       	ld.w	r8,r8[0x4]
8000977c:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80009780:	5c 58       	castu.b	r8
80009782:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
80009786:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000978a:	70 18       	ld.w	r8,r8[0x4]
8000978c:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
80009790:	5c 58       	castu.b	r8
80009792:	bd 68       	lsl	r8,0x1c
80009794:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
80009796:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000979a:	70 18       	ld.w	r8,r8[0x4]
8000979c:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
800097a0:	5c 58       	castu.b	r8
800097a2:	bb 68       	lsl	r8,0x1a
800097a4:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
800097a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097aa:	70 18       	ld.w	r8,r8[0x4]
800097ac:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
800097b0:	5c 58       	castu.b	r8
800097b2:	b9 68       	lsl	r8,0x18
800097b4:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
800097b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097ba:	70 18       	ld.w	r8,r8[0x4]
800097bc:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
800097c0:	5c 58       	castu.b	r8
800097c2:	b7 68       	lsl	r8,0x16
800097c4:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
800097c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097ca:	70 18       	ld.w	r8,r8[0x4]
800097cc:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
800097d0:	5c 58       	castu.b	r8
800097d2:	b5 68       	lsl	r8,0x14
800097d4:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
800097d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097da:	70 18       	ld.w	r8,r8[0x4]
800097dc:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
800097e0:	5c 58       	castu.b	r8
800097e2:	b3 68       	lsl	r8,0x12
800097e4:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
800097e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800097ea:	70 18       	ld.w	r8,r8[0x4]
800097ec:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800097f0:	5c 58       	castu.b	r8
800097f2:	b1 68       	lsl	r8,0x10
800097f4:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
800097f8:	10 9a       	mov	r10,r8
800097fa:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
800097fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009800:	70 18       	ld.w	r8,r8[0x4]
80009802:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80009806:	5c 58       	castu.b	r8
80009808:	ad 78       	lsl	r8,0xd
8000980a:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
8000980c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009810:	70 18       	ld.w	r8,r8[0x4]
80009812:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
80009816:	5c 58       	castu.b	r8
80009818:	ad 68       	lsl	r8,0xc
8000981a:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
8000981c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009820:	70 18       	ld.w	r8,r8[0x4]
80009822:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
80009826:	5c 58       	castu.b	r8
80009828:	ab 68       	lsl	r8,0xa
8000982a:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
8000982c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009830:	70 18       	ld.w	r8,r8[0x4]
80009832:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
80009836:	5c 58       	castu.b	r8
80009838:	a9 68       	lsl	r8,0x8
8000983a:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
8000983c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009840:	70 18       	ld.w	r8,r8[0x4]
80009842:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80009846:	5c 58       	castu.b	r8
80009848:	a7 78       	lsl	r8,0x7
8000984a:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
8000984c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009850:	70 18       	ld.w	r8,r8[0x4]
80009852:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80009856:	5c 58       	castu.b	r8
80009858:	a7 68       	lsl	r8,0x6
8000985a:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
8000985c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009860:	70 18       	ld.w	r8,r8[0x4]
80009862:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
80009866:	5c 58       	castu.b	r8
80009868:	a5 68       	lsl	r8,0x4
8000986a:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
8000986c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009870:	70 18       	ld.w	r8,r8[0x4]
80009872:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80009876:	5c 58       	castu.b	r8
80009878:	a3 78       	lsl	r8,0x3
8000987a:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
8000987c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009880:	70 18       	ld.w	r8,r8[0x4]
80009882:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80009886:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80009888:	f5 e8 10 08 	or	r8,r10,r8
8000988c:	10 9a       	mov	r10,r8
8000988e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009892:	a5 69       	lsl	r9,0x4
80009894:	2f f9       	sub	r9,-1
80009896:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
8000989a:	30 08       	mov	r8,0
}
8000989c:	10 9c       	mov	r12,r8
8000989e:	2f ed       	sub	sp,-8
800098a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800098a4 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
800098a4:	eb cd 40 80 	pushm	r7,lr
800098a8:	1a 97       	mov	r7,sp
800098aa:	20 2d       	sub	sp,8
800098ac:	ef 4c ff fc 	st.w	r7[-4],r12
800098b0:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800098b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098b8:	58 28       	cp.w	r8,2
800098ba:	e0 88 00 04 	brls	800098c2 <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
800098be:	3f f8       	mov	r8,-1
800098c0:	c0 b8       	rjmp	800098d6 <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800098c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800098ca:	a7 68       	lsl	r8,0x6
800098cc:	f2 08 00 08 	add	r8,r9,r8
800098d0:	30 59       	mov	r9,5
800098d2:	91 09       	st.w	r8[0x0],r9

  return 0;
800098d4:	30 08       	mov	r8,0
}
800098d6:	10 9c       	mov	r12,r8
800098d8:	2f ed       	sub	sp,-8
800098da:	e3 cd 80 80 	ldm	sp++,r7,pc

800098de <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
800098de:	eb cd 40 80 	pushm	r7,lr
800098e2:	1a 97       	mov	r7,sp
800098e4:	20 2d       	sub	sp,8
800098e6:	ef 4c ff fc 	st.w	r7[-4],r12
800098ea:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800098ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800098f2:	58 28       	cp.w	r8,2
800098f4:	e0 88 00 04 	brls	800098fc <tc_read_sr+0x1e>
    return TC_INVALID_ARGUMENT;
800098f8:	3f f8       	mov	r8,-1
800098fa:	c0 b8       	rjmp	80009910 <tc_read_sr+0x32>

  return tc->channel[channel].sr;
800098fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009900:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009904:	a1 78       	lsl	r8,0x1
80009906:	2f f8       	sub	r8,-1
80009908:	a5 78       	lsl	r8,0x5
8000990a:	f2 08 00 08 	add	r8,r9,r8
8000990e:	70 08       	ld.w	r8,r8[0x0]
}
80009910:	10 9c       	mov	r12,r8
80009912:	2f ed       	sub	sp,-8
80009914:	e3 cd 80 80 	ldm	sp++,r7,pc

80009918 <tc_write_rc>:
  return value;
}


uint16_t tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, uint16_t value)
{
80009918:	eb cd 40 80 	pushm	r7,lr
8000991c:	1a 97       	mov	r7,sp
8000991e:	20 3d       	sub	sp,12
80009920:	ef 4c ff fc 	st.w	r7[-4],r12
80009924:	ef 4b ff f8 	st.w	r7[-8],r11
80009928:	14 98       	mov	r8,r10
8000992a:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000992e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009932:	58 28       	cp.w	r8,2
80009934:	e0 88 00 04 	brls	8000993c <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
80009938:	3f f8       	mov	r8,-1
8000993a:	c2 78       	rjmp	80009988 <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
8000993c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009940:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009944:	a5 69       	lsl	r9,0x4
80009946:	2f f9       	sub	r9,-1
80009948:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000994c:	e2 18 80 00 	andl	r8,0x8000,COH
80009950:	c1 a0       	breq	80009984 <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80009952:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009956:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000995a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000995e:	a7 69       	lsl	r9,0x6
80009960:	f4 09 00 09 	add	r9,r10,r9
80009964:	2e 49       	sub	r9,-28
80009966:	72 09       	ld.w	r9,r9[0x0]
80009968:	12 9a       	mov	r10,r9
8000996a:	e0 1a 00 00 	andl	r10,0x0
8000996e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80009972:	f5 e9 10 09 	or	r9,r10,r9
80009976:	ee fa ff fc 	ld.w	r10,r7[-4]
8000997a:	a7 68       	lsl	r8,0x6
8000997c:	f4 08 00 08 	add	r8,r10,r8
80009980:	2e 48       	sub	r8,-28
80009982:	91 09       	st.w	r8[0x0],r9

  return value;
80009984:	ef 08 ff f4 	ld.sh	r8,r7[-12]
}
80009988:	10 9c       	mov	r12,r8
8000998a:	2f dd       	sub	sp,-12
8000998c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009990 <cpu_irq_save>:
80009990:	eb cd 40 80 	pushm	r7,lr
80009994:	1a 97       	mov	r7,sp
80009996:	20 1d       	sub	sp,4
80009998:	e1 b8 00 00 	mfsr	r8,0x0
8000999c:	ef 48 ff fc 	st.w	r7[-4],r8
800099a0:	d3 03       	ssrf	0x10
800099a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800099a6:	10 9c       	mov	r12,r8
800099a8:	2f fd       	sub	sp,-4
800099aa:	e3 cd 80 80 	ldm	sp++,r7,pc

800099ae <cpu_irq_restore>:
800099ae:	eb cd 40 80 	pushm	r7,lr
800099b2:	1a 97       	mov	r7,sp
800099b4:	20 1d       	sub	sp,4
800099b6:	ef 4c ff fc 	st.w	r7[-4],r12
800099ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800099be:	e3 b8 00 00 	mtsr	0x0,r8
800099c2:	2f fd       	sub	sp,-4
800099c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800099c8 <sleepmgr_lock_mode>:
800099c8:	eb cd 40 80 	pushm	r7,lr
800099cc:	1a 97       	mov	r7,sp
800099ce:	20 2d       	sub	sp,8
800099d0:	ef 4c ff f8 	st.w	r7[-8],r12
800099d4:	f0 1f 00 0b 	mcall	80009a00 <sleepmgr_lock_mode+0x38>
800099d8:	18 98       	mov	r8,r12
800099da:	ef 48 ff fc 	st.w	r7[-4],r8
800099de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800099e2:	48 99       	lddpc	r9,80009a04 <sleepmgr_lock_mode+0x3c>
800099e4:	f2 08 07 09 	ld.ub	r9,r9[r8]
800099e8:	2f f9       	sub	r9,-1
800099ea:	5c 59       	castu.b	r9
800099ec:	48 6a       	lddpc	r10,80009a04 <sleepmgr_lock_mode+0x3c>
800099ee:	f4 08 0b 09 	st.b	r10[r8],r9
800099f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800099f6:	f0 1f 00 05 	mcall	80009a08 <sleepmgr_lock_mode+0x40>
800099fa:	2f ed       	sub	sp,-8
800099fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a00:	80 00       	ld.sh	r0,r0[0x0]
80009a02:	99 90       	st.w	r12[0x24],r0
80009a04:	00 00       	add	r0,r0
80009a06:	0d fc       	ld.ub	r12,r6[0x7]
80009a08:	80 00       	ld.sh	r0,r0[0x0]
80009a0a:	99 ae       	st.w	r12[0x28],lr

80009a0c <sleepmgr_unlock_mode>:
80009a0c:	eb cd 40 80 	pushm	r7,lr
80009a10:	1a 97       	mov	r7,sp
80009a12:	20 2d       	sub	sp,8
80009a14:	ef 4c ff f8 	st.w	r7[-8],r12
80009a18:	f0 1f 00 0b 	mcall	80009a44 <sleepmgr_unlock_mode+0x38>
80009a1c:	18 98       	mov	r8,r12
80009a1e:	ef 48 ff fc 	st.w	r7[-4],r8
80009a22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009a26:	48 99       	lddpc	r9,80009a48 <sleepmgr_unlock_mode+0x3c>
80009a28:	f2 08 07 09 	ld.ub	r9,r9[r8]
80009a2c:	20 19       	sub	r9,1
80009a2e:	5c 59       	castu.b	r9
80009a30:	48 6a       	lddpc	r10,80009a48 <sleepmgr_unlock_mode+0x3c>
80009a32:	f4 08 0b 09 	st.b	r10[r8],r9
80009a36:	ee fc ff fc 	ld.w	r12,r7[-4]
80009a3a:	f0 1f 00 05 	mcall	80009a4c <sleepmgr_unlock_mode+0x40>
80009a3e:	2f ed       	sub	sp,-8
80009a40:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a44:	80 00       	ld.sh	r0,r0[0x0]
80009a46:	99 90       	st.w	r12[0x24],r0
80009a48:	00 00       	add	r0,r0
80009a4a:	0d fc       	ld.ub	r12,r6[0x7]
80009a4c:	80 00       	ld.sh	r0,r0[0x0]
80009a4e:	99 ae       	st.w	r12[0x28],lr

80009a50 <udd_sleep_mode>:
80009a50:	eb cd 40 80 	pushm	r7,lr
80009a54:	1a 97       	mov	r7,sp
80009a56:	20 1d       	sub	sp,4
80009a58:	18 98       	mov	r8,r12
80009a5a:	ef 68 ff fc 	st.b	r7[-4],r8
80009a5e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009a62:	ec 18 00 01 	eorl	r8,0x1
80009a66:	5c 58       	castu.b	r8
80009a68:	c0 80       	breq	80009a78 <udd_sleep_mode+0x28>
80009a6a:	48 f8       	lddpc	r8,80009aa4 <udd_sleep_mode+0x54>
80009a6c:	11 88       	ld.ub	r8,r8[0x0]
80009a6e:	58 08       	cp.w	r8,0
80009a70:	c0 40       	breq	80009a78 <udd_sleep_mode+0x28>
80009a72:	30 1c       	mov	r12,1
80009a74:	f0 1f 00 0d 	mcall	80009aa8 <udd_sleep_mode+0x58>
80009a78:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009a7c:	30 08       	mov	r8,0
80009a7e:	f0 09 18 00 	cp.b	r9,r8
80009a82:	c0 a0       	breq	80009a96 <udd_sleep_mode+0x46>
80009a84:	48 88       	lddpc	r8,80009aa4 <udd_sleep_mode+0x54>
80009a86:	11 88       	ld.ub	r8,r8[0x0]
80009a88:	ec 18 00 01 	eorl	r8,0x1
80009a8c:	5c 58       	castu.b	r8
80009a8e:	c0 40       	breq	80009a96 <udd_sleep_mode+0x46>
80009a90:	30 1c       	mov	r12,1
80009a92:	f0 1f 00 07 	mcall	80009aac <udd_sleep_mode+0x5c>
80009a96:	48 49       	lddpc	r9,80009aa4 <udd_sleep_mode+0x54>
80009a98:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009a9c:	b2 88       	st.b	r9[0x0],r8
80009a9e:	2f fd       	sub	sp,-4
80009aa0:	e3 cd 80 80 	ldm	sp++,r7,pc
80009aa4:	00 00       	add	r0,r0
80009aa6:	07 b4       	ld.ub	r4,r3[0x3]
80009aa8:	80 00       	ld.sh	r0,r0[0x0]
80009aaa:	9a 0c       	ld.sh	r12,sp[0x0]
80009aac:	80 00       	ld.sh	r0,r0[0x0]
80009aae:	99 c8       	st.w	r12[0x30],r8

80009ab0 <udd_interrupt>:
80009ab0:	eb cd 40 80 	pushm	r7,lr
80009ab4:	1a 97       	mov	r7,sp
80009ab6:	fe 68 00 04 	mov	r8,-131068
80009aba:	70 08       	ld.w	r8,r8[0x0]
80009abc:	e2 18 00 04 	andl	r8,0x4,COH
80009ac0:	c1 10       	breq	80009ae2 <udd_interrupt+0x32>
80009ac2:	fe 68 00 08 	mov	r8,-131064
80009ac6:	30 49       	mov	r9,4
80009ac8:	91 09       	st.w	r8[0x0],r9
80009aca:	fe 68 08 04 	mov	r8,-129020
80009ace:	70 08       	ld.w	r8,r8[0x0]
80009ad0:	e2 18 30 00 	andl	r8,0x3000,COH
80009ad4:	ad 88       	lsr	r8,0xc
80009ad6:	c0 31       	brne	80009adc <udd_interrupt+0x2c>
80009ad8:	f0 1f 00 54 	mcall	80009c28 <udd_interrupt+0x178>
80009adc:	f0 1f 00 54 	mcall	80009c2c <udd_interrupt+0x17c>
80009ae0:	c9 d8       	rjmp	80009c1a <udd_interrupt+0x16a>
80009ae2:	fe 68 00 04 	mov	r8,-131068
80009ae6:	70 08       	ld.w	r8,r8[0x0]
80009ae8:	e2 18 00 02 	andl	r8,0x2,COH
80009aec:	c0 80       	breq	80009afc <udd_interrupt+0x4c>
80009aee:	fe 68 00 08 	mov	r8,-131064
80009af2:	30 29       	mov	r9,2
80009af4:	91 09       	st.w	r8[0x0],r9
80009af6:	f0 1f 00 4d 	mcall	80009c28 <udd_interrupt+0x178>
80009afa:	c9 08       	rjmp	80009c1a <udd_interrupt+0x16a>
80009afc:	f0 1f 00 4d 	mcall	80009c30 <udd_interrupt+0x180>
80009b00:	18 98       	mov	r8,r12
80009b02:	58 08       	cp.w	r8,0
80009b04:	e0 81 00 88 	brne	80009c14 <udd_interrupt+0x164>
80009b08:	f0 1f 00 4b 	mcall	80009c34 <udd_interrupt+0x184>
80009b0c:	18 98       	mov	r8,r12
80009b0e:	58 08       	cp.w	r8,0
80009b10:	e0 81 00 84 	brne	80009c18 <udd_interrupt+0x168>
80009b14:	fe 68 00 04 	mov	r8,-131068
80009b18:	70 08       	ld.w	r8,r8[0x0]
80009b1a:	e2 18 00 08 	andl	r8,0x8,COH
80009b1e:	c0 e0       	breq	80009b3a <udd_interrupt+0x8a>
80009b20:	fe 68 00 08 	mov	r8,-131064
80009b24:	30 89       	mov	r9,8
80009b26:	91 09       	st.w	r8[0x0],r9
80009b28:	f0 1f 00 44 	mcall	80009c38 <udd_interrupt+0x188>
80009b2c:	f0 1f 00 44 	mcall	80009c3c <udd_interrupt+0x18c>
80009b30:	f0 1f 00 44 	mcall	80009c40 <udd_interrupt+0x190>
80009b34:	f0 1f 00 44 	mcall	80009c44 <udd_interrupt+0x194>
80009b38:	c7 18       	rjmp	80009c1a <udd_interrupt+0x16a>
80009b3a:	fe 68 00 10 	mov	r8,-131056
80009b3e:	70 08       	ld.w	r8,r8[0x0]
80009b40:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009b44:	5c 58       	castu.b	r8
80009b46:	c2 40       	breq	80009b8e <udd_interrupt+0xde>
80009b48:	fe 68 00 04 	mov	r8,-131068
80009b4c:	70 08       	ld.w	r8,r8[0x0]
80009b4e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009b52:	5c 58       	castu.b	r8
80009b54:	c1 d0       	breq	80009b8e <udd_interrupt+0xde>
80009b56:	fe 68 08 00 	mov	r8,-129024
80009b5a:	fe 69 08 00 	mov	r9,-129024
80009b5e:	72 09       	ld.w	r9,r9[0x0]
80009b60:	af c9       	cbr	r9,0xe
80009b62:	91 09       	st.w	r8[0x0],r9
80009b64:	fe 68 00 14 	mov	r8,-131052
80009b68:	30 19       	mov	r9,1
80009b6a:	91 09       	st.w	r8[0x0],r9
80009b6c:	fe 68 00 18 	mov	r8,-131048
80009b70:	31 09       	mov	r9,16
80009b72:	91 09       	st.w	r8[0x0],r9
80009b74:	fe 68 08 00 	mov	r8,-129024
80009b78:	fe 69 08 00 	mov	r9,-129024
80009b7c:	72 09       	ld.w	r9,r9[0x0]
80009b7e:	af a9       	sbr	r9,0xe
80009b80:	91 09       	st.w	r8[0x0],r9
80009b82:	30 0c       	mov	r12,0
80009b84:	f0 1f 00 31 	mcall	80009c48 <udd_interrupt+0x198>
80009b88:	f0 1f 00 31 	mcall	80009c4c <udd_interrupt+0x19c>
80009b8c:	c4 78       	rjmp	80009c1a <udd_interrupt+0x16a>
80009b8e:	fe 68 00 10 	mov	r8,-131056
80009b92:	70 08       	ld.w	r8,r8[0x0]
80009b94:	e2 18 00 10 	andl	r8,0x10,COH
80009b98:	c1 c0       	breq	80009bd0 <udd_interrupt+0x120>
80009b9a:	fe 68 00 04 	mov	r8,-131068
80009b9e:	70 08       	ld.w	r8,r8[0x0]
80009ba0:	e2 18 00 10 	andl	r8,0x10,COH
80009ba4:	c1 60       	breq	80009bd0 <udd_interrupt+0x120>
80009ba6:	fe 68 08 00 	mov	r8,-129024
80009baa:	fe 69 08 00 	mov	r9,-129024
80009bae:	72 09       	ld.w	r9,r9[0x0]
80009bb0:	af c9       	cbr	r9,0xe
80009bb2:	91 09       	st.w	r8[0x0],r9
80009bb4:	fe 68 00 14 	mov	r8,-131052
80009bb8:	31 09       	mov	r9,16
80009bba:	91 09       	st.w	r8[0x0],r9
80009bbc:	fe 68 00 18 	mov	r8,-131048
80009bc0:	30 19       	mov	r9,1
80009bc2:	91 09       	st.w	r8[0x0],r9
80009bc4:	30 1c       	mov	r12,1
80009bc6:	f0 1f 00 21 	mcall	80009c48 <udd_interrupt+0x198>
80009bca:	f0 1f 00 22 	mcall	80009c50 <udd_interrupt+0x1a0>
80009bce:	c2 68       	rjmp	80009c1a <udd_interrupt+0x16a>
80009bd0:	fe 68 08 04 	mov	r8,-129020
80009bd4:	70 08       	ld.w	r8,r8[0x0]
80009bd6:	e2 18 00 02 	andl	r8,0x2,COH
80009bda:	c2 00       	breq	80009c1a <udd_interrupt+0x16a>
80009bdc:	fe 68 08 00 	mov	r8,-129024
80009be0:	fe 69 08 00 	mov	r9,-129024
80009be4:	72 09       	ld.w	r9,r9[0x0]
80009be6:	af c9       	cbr	r9,0xe
80009be8:	91 09       	st.w	r8[0x0],r9
80009bea:	fe 68 08 08 	mov	r8,-129016
80009bee:	30 29       	mov	r9,2
80009bf0:	91 09       	st.w	r8[0x0],r9
80009bf2:	fe 68 08 00 	mov	r8,-129024
80009bf6:	fe 69 08 00 	mov	r9,-129024
80009bfa:	72 09       	ld.w	r9,r9[0x0]
80009bfc:	af a9       	sbr	r9,0xe
80009bfe:	91 09       	st.w	r8[0x0],r9
80009c00:	fe 68 08 04 	mov	r8,-129020
80009c04:	70 08       	ld.w	r8,r8[0x0]
80009c06:	e2 18 08 00 	andl	r8,0x800,COH
80009c0a:	5f 18       	srne	r8
80009c0c:	10 9c       	mov	r12,r8
80009c0e:	f0 1f 00 12 	mcall	80009c54 <udd_interrupt+0x1a4>
80009c12:	c0 48       	rjmp	80009c1a <udd_interrupt+0x16a>
80009c14:	d7 03       	nop
80009c16:	c0 28       	rjmp	80009c1a <udd_interrupt+0x16a>
80009c18:	d7 03       	nop
80009c1a:	fe 68 00 00 	mov	r8,-131072
80009c1e:	f0 f8 08 18 	ld.w	r8,r8[2072]
80009c22:	e3 cd 40 80 	ldm	sp++,r7,lr
80009c26:	d6 03       	rete
80009c28:	80 00       	ld.sh	r0,r0[0x0]
80009c2a:	d4 cc       	*unknown*
80009c2c:	80 00       	ld.sh	r0,r0[0x0]
80009c2e:	e3 0c 80 00 	ld.sh	r12,r1[-32768]
80009c32:	b1 a4       	sbr	r4,0x10
80009c34:	80 00       	ld.sh	r0,r0[0x0]
80009c36:	b6 58       	st.h	r11[0xa],r8
80009c38:	80 00       	ld.sh	r0,r0[0x0]
80009c3a:	b2 d8       	st.b	r9[0x5],r8
80009c3c:	80 00       	ld.sh	r0,r0[0x0]
80009c3e:	d4 68       	*unknown*
80009c40:	80 00       	ld.sh	r0,r0[0x0]
80009c42:	aa 24       	st.h	r5[0x4],r4
80009c44:	80 00       	ld.sh	r0,r0[0x0]
80009c46:	ab 08       	ld.d	r8,r5
80009c48:	80 00       	ld.sh	r0,r0[0x0]
80009c4a:	9a 50       	ld.sh	r0,sp[0xa]
80009c4c:	80 00       	ld.sh	r0,r0[0x0]
80009c4e:	e2 e4 80 00 	ld.d	r4,r1[-32768]
80009c52:	e2 f8 80 00 	ld.w	r8,r1[-32768]
80009c56:	e2 b0 eb cd 	rcall	800873f0 <Stored_values_flash+0x475f0>

80009c58 <udd_include_vbus_monitoring>:
80009c58:	eb cd 40 80 	pushm	r7,lr
80009c5c:	1a 97       	mov	r7,sp
80009c5e:	30 18       	mov	r8,1
80009c60:	10 9c       	mov	r12,r8
80009c62:	e3 cd 80 80 	ldm	sp++,r7,pc
80009c66:	d7 03       	nop

80009c68 <udd_enable>:
80009c68:	eb cd 40 80 	pushm	r7,lr
80009c6c:	1a 97       	mov	r7,sp
80009c6e:	20 2d       	sub	sp,8
80009c70:	f0 1f 00 3e 	mcall	80009d68 <udd_enable+0x100>
80009c74:	18 98       	mov	r8,r12
80009c76:	ef 48 ff f8 	st.w	r7[-8],r8
80009c7a:	f0 1f 00 3d 	mcall	80009d6c <udd_enable+0x104>
80009c7e:	30 0a       	mov	r10,0
80009c80:	e0 6b 02 20 	mov	r11,544
80009c84:	4b bc       	lddpc	r12,80009d70 <udd_enable+0x108>
80009c86:	f0 1f 00 3c 	mcall	80009d74 <udd_enable+0x10c>
80009c8a:	30 18       	mov	r8,1
80009c8c:	ef 48 ff fc 	st.w	r7[-4],r8
80009c90:	fe 78 0c 00 	mov	r8,-62464
80009c94:	fe 79 0c 00 	mov	r9,-62464
80009c98:	f2 fa 01 44 	ld.w	r10,r9[324]
80009c9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009ca0:	f5 e9 10 09 	or	r9,r10,r9
80009ca4:	f1 49 01 44 	st.w	r8[324],r9
80009ca8:	fe 68 08 00 	mov	r8,-129024
80009cac:	fe 69 08 00 	mov	r9,-129024
80009cb0:	72 09       	ld.w	r9,r9[0x0]
80009cb2:	b9 c9       	cbr	r9,0x18
80009cb4:	91 09       	st.w	r8[0x0],r9
80009cb6:	fe 68 08 00 	mov	r8,-129024
80009cba:	fe 69 08 00 	mov	r9,-129024
80009cbe:	72 09       	ld.w	r9,r9[0x0]
80009cc0:	b9 b9       	sbr	r9,0x19
80009cc2:	91 09       	st.w	r8[0x0],r9
80009cc4:	fe 68 08 00 	mov	r8,-129024
80009cc8:	fe 69 08 00 	mov	r9,-129024
80009ccc:	72 09       	ld.w	r9,r9[0x0]
80009cce:	ad a9       	sbr	r9,0xc
80009cd0:	91 09       	st.w	r8[0x0],r9
80009cd2:	fe 68 08 00 	mov	r8,-129024
80009cd6:	fe 69 08 00 	mov	r9,-129024
80009cda:	72 09       	ld.w	r9,r9[0x0]
80009cdc:	af b9       	sbr	r9,0xf
80009cde:	91 09       	st.w	r8[0x0],r9
80009ce0:	fe 68 08 00 	mov	r8,-129024
80009ce4:	fe 69 08 00 	mov	r9,-129024
80009ce8:	72 09       	ld.w	r9,r9[0x0]
80009cea:	af c9       	cbr	r9,0xe
80009cec:	91 09       	st.w	r8[0x0],r9
80009cee:	fe 68 08 00 	mov	r8,-129024
80009cf2:	70 08       	ld.w	r8,r8[0x0]
80009cf4:	f0 1f 00 21 	mcall	80009d78 <udd_enable+0x110>
80009cf8:	fe 68 00 00 	mov	r8,-131072
80009cfc:	fe 69 00 00 	mov	r9,-131072
80009d00:	72 09       	ld.w	r9,r9[0x0]
80009d02:	ad c9       	cbr	r9,0xc
80009d04:	91 09       	st.w	r8[0x0],r9
80009d06:	fe 68 00 00 	mov	r8,-131072
80009d0a:	fe 69 00 00 	mov	r9,-131072
80009d0e:	72 09       	ld.w	r9,r9[0x0]
80009d10:	e0 19 f3 ff 	andl	r9,0xf3ff
80009d14:	91 09       	st.w	r8[0x0],r9
80009d16:	fe 68 08 08 	mov	r8,-129016
80009d1a:	30 29       	mov	r9,2
80009d1c:	91 09       	st.w	r8[0x0],r9
80009d1e:	fe 68 08 04 	mov	r8,-129020
80009d22:	70 08       	ld.w	r8,r8[0x0]
80009d24:	e2 18 08 00 	andl	r8,0x800,COH
80009d28:	c0 50       	breq	80009d32 <udd_enable+0xca>
80009d2a:	fe 68 08 0c 	mov	r8,-129012
80009d2e:	30 29       	mov	r9,2
80009d30:	91 09       	st.w	r8[0x0],r9
80009d32:	fe 68 08 00 	mov	r8,-129024
80009d36:	fe 69 08 00 	mov	r9,-129024
80009d3a:	72 09       	ld.w	r9,r9[0x0]
80009d3c:	a1 b9       	sbr	r9,0x1
80009d3e:	91 09       	st.w	r8[0x0],r9
80009d40:	fe 68 08 00 	mov	r8,-129024
80009d44:	fe 69 08 00 	mov	r9,-129024
80009d48:	72 09       	ld.w	r9,r9[0x0]
80009d4a:	af a9       	sbr	r9,0xe
80009d4c:	91 09       	st.w	r8[0x0],r9
80009d4e:	48 c9       	lddpc	r9,80009d7c <udd_enable+0x114>
80009d50:	30 08       	mov	r8,0
80009d52:	b2 88       	st.b	r9[0x0],r8
80009d54:	30 3c       	mov	r12,3
80009d56:	f0 1f 00 0b 	mcall	80009d80 <udd_enable+0x118>
80009d5a:	ee fc ff f8 	ld.w	r12,r7[-8]
80009d5e:	f0 1f 00 0a 	mcall	80009d84 <udd_enable+0x11c>
80009d62:	2f ed       	sub	sp,-8
80009d64:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d68:	80 00       	ld.sh	r0,r0[0x0]
80009d6a:	99 90       	st.w	r12[0x24],r0
80009d6c:	80 00       	ld.sh	r0,r0[0x0]
80009d6e:	c0 28       	rjmp	80009d72 <udd_enable+0x10a>
80009d70:	80 00       	ld.sh	r0,r0[0x0]
80009d72:	9a b0       	ld.uh	r0,sp[0x6]
80009d74:	80 00       	ld.sh	r0,r0[0x0]
80009d76:	90 28       	ld.sh	r8,r8[0x4]
80009d78:	80 00       	ld.sh	r0,r0[0x0]
80009d7a:	b2 6c       	st.h	r9[0xc],r12
80009d7c:	00 00       	add	r0,r0
80009d7e:	07 b4       	ld.ub	r4,r3[0x3]
80009d80:	80 00       	ld.sh	r0,r0[0x0]
80009d82:	99 c8       	st.w	r12[0x30],r8
80009d84:	80 00       	ld.sh	r0,r0[0x0]
80009d86:	99 ae       	st.w	r12[0x28],lr

80009d88 <udd_attach>:
80009d88:	eb cd 40 80 	pushm	r7,lr
80009d8c:	1a 97       	mov	r7,sp
80009d8e:	20 1d       	sub	sp,4
80009d90:	f0 1f 00 26 	mcall	80009e28 <udd_attach+0xa0>
80009d94:	18 98       	mov	r8,r12
80009d96:	ef 48 ff fc 	st.w	r7[-4],r8
80009d9a:	30 1c       	mov	r12,1
80009d9c:	f0 1f 00 24 	mcall	80009e2c <udd_attach+0xa4>
80009da0:	fe 68 08 00 	mov	r8,-129024
80009da4:	fe 69 08 00 	mov	r9,-129024
80009da8:	72 09       	ld.w	r9,r9[0x0]
80009daa:	af c9       	cbr	r9,0xe
80009dac:	91 09       	st.w	r8[0x0],r9
80009dae:	fe 68 00 00 	mov	r8,-131072
80009db2:	fe 69 00 00 	mov	r9,-131072
80009db6:	72 09       	ld.w	r9,r9[0x0]
80009db8:	a9 c9       	cbr	r9,0x8
80009dba:	91 09       	st.w	r8[0x0],r9
80009dbc:	fe 68 00 18 	mov	r8,-131048
80009dc0:	30 89       	mov	r9,8
80009dc2:	91 09       	st.w	r8[0x0],r9
80009dc4:	fe 68 00 18 	mov	r8,-131048
80009dc8:	30 19       	mov	r9,1
80009dca:	91 09       	st.w	r8[0x0],r9
80009dcc:	fe 68 00 18 	mov	r8,-131048
80009dd0:	31 09       	mov	r9,16
80009dd2:	91 09       	st.w	r8[0x0],r9
80009dd4:	fe 68 00 18 	mov	r8,-131048
80009dd8:	30 49       	mov	r9,4
80009dda:	91 09       	st.w	r8[0x0],r9
80009ddc:	fe 68 00 18 	mov	r8,-131048
80009de0:	30 29       	mov	r9,2
80009de2:	91 09       	st.w	r8[0x0],r9
80009de4:	fe 68 00 08 	mov	r8,-131064
80009de8:	30 89       	mov	r9,8
80009dea:	91 09       	st.w	r8[0x0],r9
80009dec:	fe 68 00 08 	mov	r8,-131064
80009df0:	30 49       	mov	r9,4
80009df2:	91 09       	st.w	r8[0x0],r9
80009df4:	fe 68 00 08 	mov	r8,-131064
80009df8:	30 29       	mov	r9,2
80009dfa:	91 09       	st.w	r8[0x0],r9
80009dfc:	fe 68 00 08 	mov	r8,-131064
80009e00:	30 19       	mov	r9,1
80009e02:	91 09       	st.w	r8[0x0],r9
80009e04:	fe 68 00 08 	mov	r8,-131064
80009e08:	31 09       	mov	r9,16
80009e0a:	91 09       	st.w	r8[0x0],r9
80009e0c:	fe 68 08 00 	mov	r8,-129024
80009e10:	fe 69 08 00 	mov	r9,-129024
80009e14:	72 09       	ld.w	r9,r9[0x0]
80009e16:	af a9       	sbr	r9,0xe
80009e18:	91 09       	st.w	r8[0x0],r9
80009e1a:	ee fc ff fc 	ld.w	r12,r7[-4]
80009e1e:	f0 1f 00 05 	mcall	80009e30 <udd_attach+0xa8>
80009e22:	2f fd       	sub	sp,-4
80009e24:	e3 cd 80 80 	ldm	sp++,r7,pc
80009e28:	80 00       	ld.sh	r0,r0[0x0]
80009e2a:	99 90       	st.w	r12[0x24],r0
80009e2c:	80 00       	ld.sh	r0,r0[0x0]
80009e2e:	9a 50       	ld.sh	r0,sp[0xa]
80009e30:	80 00       	ld.sh	r0,r0[0x0]
80009e32:	99 ae       	st.w	r12[0x28],lr

80009e34 <udd_detach>:
80009e34:	eb cd 40 80 	pushm	r7,lr
80009e38:	1a 97       	mov	r7,sp
80009e3a:	fe 68 08 00 	mov	r8,-129024
80009e3e:	fe 69 08 00 	mov	r9,-129024
80009e42:	72 09       	ld.w	r9,r9[0x0]
80009e44:	af c9       	cbr	r9,0xe
80009e46:	91 09       	st.w	r8[0x0],r9
80009e48:	fe 68 00 00 	mov	r8,-131072
80009e4c:	fe 69 00 00 	mov	r9,-131072
80009e50:	72 09       	ld.w	r9,r9[0x0]
80009e52:	a9 a9       	sbr	r9,0x8
80009e54:	91 09       	st.w	r8[0x0],r9
80009e56:	fe 68 08 00 	mov	r8,-129024
80009e5a:	fe 69 08 00 	mov	r9,-129024
80009e5e:	72 09       	ld.w	r9,r9[0x0]
80009e60:	af a9       	sbr	r9,0xe
80009e62:	91 09       	st.w	r8[0x0],r9
80009e64:	30 0c       	mov	r12,0
80009e66:	f0 1f 00 03 	mcall	80009e70 <udd_detach+0x3c>
80009e6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80009e6e:	00 00       	add	r0,r0
80009e70:	80 00       	ld.sh	r0,r0[0x0]
80009e72:	9a 50       	ld.sh	r0,sp[0xa]

80009e74 <udd_is_high_speed>:
80009e74:	eb cd 40 80 	pushm	r7,lr
80009e78:	1a 97       	mov	r7,sp
80009e7a:	fe 68 08 04 	mov	r8,-129020
80009e7e:	70 08       	ld.w	r8,r8[0x0]
80009e80:	e2 18 30 00 	andl	r8,0x3000,COH
80009e84:	ad 88       	lsr	r8,0xc
80009e86:	5f 18       	srne	r8
80009e88:	5c 58       	castu.b	r8
80009e8a:	10 9c       	mov	r12,r8
80009e8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009e90 <udd_set_address>:
80009e90:	eb cd 40 80 	pushm	r7,lr
80009e94:	1a 97       	mov	r7,sp
80009e96:	20 1d       	sub	sp,4
80009e98:	18 98       	mov	r8,r12
80009e9a:	ef 68 ff fc 	st.b	r7[-4],r8
80009e9e:	fe 68 00 00 	mov	r8,-131072
80009ea2:	fe 69 00 00 	mov	r9,-131072
80009ea6:	72 09       	ld.w	r9,r9[0x0]
80009ea8:	a7 d9       	cbr	r9,0x7
80009eaa:	91 09       	st.w	r8[0x0],r9
80009eac:	fe 68 00 00 	mov	r8,-131072
80009eb0:	fe 69 00 00 	mov	r9,-131072
80009eb4:	72 09       	ld.w	r9,r9[0x0]
80009eb6:	12 9a       	mov	r10,r9
80009eb8:	e0 1a ff 80 	andl	r10,0xff80
80009ebc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80009ec0:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80009ec4:	f5 e9 10 09 	or	r9,r10,r9
80009ec8:	91 09       	st.w	r8[0x0],r9
80009eca:	fe 68 00 00 	mov	r8,-131072
80009ece:	fe 69 00 00 	mov	r9,-131072
80009ed2:	72 09       	ld.w	r9,r9[0x0]
80009ed4:	a7 b9       	sbr	r9,0x7
80009ed6:	91 09       	st.w	r8[0x0],r9
80009ed8:	2f fd       	sub	sp,-4
80009eda:	e3 cd 80 80 	ldm	sp++,r7,pc

80009ede <udd_getaddress>:
80009ede:	eb cd 40 80 	pushm	r7,lr
80009ee2:	1a 97       	mov	r7,sp
80009ee4:	fe 68 00 00 	mov	r8,-131072
80009ee8:	70 08       	ld.w	r8,r8[0x0]
80009eea:	5c 58       	castu.b	r8
80009eec:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
80009ef0:	10 9c       	mov	r12,r8
80009ef2:	e3 cd 80 80 	ldm	sp++,r7,pc

80009ef6 <udd_get_frame_number>:
80009ef6:	eb cd 40 80 	pushm	r7,lr
80009efa:	1a 97       	mov	r7,sp
80009efc:	fe 68 00 20 	mov	r8,-131040
80009f00:	70 08       	ld.w	r8,r8[0x0]
80009f02:	e2 18 3f f8 	andl	r8,0x3ff8,COH
80009f06:	a3 98       	lsr	r8,0x3
80009f08:	5c 88       	casts.h	r8
80009f0a:	10 9c       	mov	r12,r8
80009f0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80009f10 <udd_set_setup_payload>:
80009f10:	eb cd 40 80 	pushm	r7,lr
80009f14:	1a 97       	mov	r7,sp
80009f16:	20 2d       	sub	sp,8
80009f18:	ef 4c ff fc 	st.w	r7[-4],r12
80009f1c:	16 98       	mov	r8,r11
80009f1e:	ef 58 ff f8 	st.h	r7[-8],r8
80009f22:	48 68       	lddpc	r8,80009f38 <udd_set_setup_payload+0x28>
80009f24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009f28:	91 29       	st.w	r8[0x8],r9
80009f2a:	48 49       	lddpc	r9,80009f38 <udd_set_setup_payload+0x28>
80009f2c:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80009f30:	b2 68       	st.h	r9[0xc],r8
80009f32:	2f ed       	sub	sp,-8
80009f34:	e3 cd 80 80 	ldm	sp++,r7,pc
80009f38:	00 00       	add	r0,r0
80009f3a:	0d e4       	ld.ub	r4,r6[0x6]

80009f3c <udd_ep_alloc>:
80009f3c:	eb cd 40 80 	pushm	r7,lr
80009f40:	1a 97       	mov	r7,sp
80009f42:	20 dd       	sub	sp,52
80009f44:	16 99       	mov	r9,r11
80009f46:	14 98       	mov	r8,r10
80009f48:	18 9a       	mov	r10,r12
80009f4a:	ef 6a ff d4 	st.b	r7[-44],r10
80009f4e:	ef 69 ff d0 	st.b	r7[-48],r9
80009f52:	ef 58 ff cc 	st.h	r7[-52],r8
80009f56:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009f5a:	a7 98       	lsr	r8,0x7
80009f5c:	ef 68 ff db 	st.b	r7[-37],r8
80009f60:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009f64:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009f68:	ef 68 ff d4 	st.b	r7[-44],r8
80009f6c:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80009f70:	30 28       	mov	r8,2
80009f72:	f0 09 18 00 	cp.b	r9,r8
80009f76:	e0 88 00 04 	brls	80009f7e <udd_ep_alloc+0x42>
80009f7a:	30 08       	mov	r8,0
80009f7c:	c7 f9       	rjmp	8000a27a <udd_ep_alloc+0x33e>
80009f7e:	fe 68 00 00 	mov	r8,-131072
80009f82:	70 79       	ld.w	r9,r8[0x1c]
80009f84:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009f88:	30 1a       	mov	r10,1
80009f8a:	f4 08 09 48 	lsl	r8,r10,r8
80009f8e:	f3 e8 00 08 	and	r8,r9,r8
80009f92:	c0 30       	breq	80009f98 <udd_ep_alloc+0x5c>
80009f94:	30 08       	mov	r8,0
80009f96:	c7 29       	rjmp	8000a27a <udd_ep_alloc+0x33e>
80009f98:	ef 38 ff d0 	ld.ub	r8,r7[-48]
80009f9c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80009fa0:	58 28       	cp.w	r8,2
80009fa2:	c0 d0       	breq	80009fbc <udd_ep_alloc+0x80>
80009fa4:	58 38       	cp.w	r8,3
80009fa6:	c0 70       	breq	80009fb4 <udd_ep_alloc+0x78>
80009fa8:	58 18       	cp.w	r8,1
80009faa:	c0 d1       	brne	80009fc4 <udd_ep_alloc+0x88>
80009fac:	30 28       	mov	r8,2
80009fae:	ef 68 ff de 	st.b	r7[-34],r8
80009fb2:	c0 b8       	rjmp	80009fc8 <udd_ep_alloc+0x8c>
80009fb4:	30 18       	mov	r8,1
80009fb6:	ef 68 ff de 	st.b	r7[-34],r8
80009fba:	c0 78       	rjmp	80009fc8 <udd_ep_alloc+0x8c>
80009fbc:	30 28       	mov	r8,2
80009fbe:	ef 68 ff de 	st.b	r7[-34],r8
80009fc2:	c0 38       	rjmp	80009fc8 <udd_ep_alloc+0x8c>
80009fc4:	30 08       	mov	r8,0
80009fc6:	c5 a9       	rjmp	8000a27a <udd_ep_alloc+0x33e>
80009fc8:	ef 38 ff de 	ld.ub	r8,r7[-34]
80009fcc:	58 28       	cp.w	r8,2
80009fce:	c0 90       	breq	80009fe0 <udd_ep_alloc+0xa4>
80009fd0:	58 38       	cp.w	r8,3
80009fd2:	c0 b0       	breq	80009fe8 <udd_ep_alloc+0xac>
80009fd4:	58 18       	cp.w	r8,1
80009fd6:	c0 d1       	brne	80009ff0 <udd_ep_alloc+0xb4>
80009fd8:	30 08       	mov	r8,0
80009fda:	ef 68 ff de 	st.b	r7[-34],r8
80009fde:	c0 b8       	rjmp	80009ff4 <udd_ep_alloc+0xb8>
80009fe0:	30 18       	mov	r8,1
80009fe2:	ef 68 ff de 	st.b	r7[-34],r8
80009fe6:	c0 78       	rjmp	80009ff4 <udd_ep_alloc+0xb8>
80009fe8:	30 28       	mov	r8,2
80009fea:	ef 68 ff de 	st.b	r7[-34],r8
80009fee:	c0 38       	rjmp	80009ff4 <udd_ep_alloc+0xb8>
80009ff0:	30 08       	mov	r8,0
80009ff2:	c4 49       	rjmp	8000a27a <udd_ep_alloc+0x33e>
80009ff4:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80009ff8:	a3 68       	lsl	r8,0x2
80009ffa:	e0 38 ff 00 	sub	r8,130816
80009ffe:	ef 39 ff d4 	ld.ub	r9,r7[-44]
8000a002:	a3 69       	lsl	r9,0x2
8000a004:	e0 39 ff 00 	sub	r9,130816
8000a008:	72 09       	ld.w	r9,r9[0x0]
8000a00a:	12 9a       	mov	r10,r9
8000a00c:	e0 1a e6 83 	andl	r10,0xe683
8000a010:	ef 39 ff d0 	ld.ub	r9,r7[-48]
8000a014:	ab 79       	lsl	r9,0xb
8000a016:	12 9b       	mov	r11,r9
8000a018:	e2 1b 18 00 	andl	r11,0x1800,COH
8000a01c:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000a020:	a9 69       	lsl	r9,0x8
8000a022:	e2 19 01 00 	andl	r9,0x100,COH
8000a026:	12 4b       	or	r11,r9
8000a028:	ef 19 ff cc 	ld.uh	r9,r7[-52]
8000a02c:	ef 49 ff f0 	st.w	r7[-16],r9
8000a030:	30 89       	mov	r9,8
8000a032:	ef 49 ff f4 	st.w	r7[-12],r9
8000a036:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a03a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000a03e:	f2 0c 0c 49 	max	r9,r9,r12
8000a042:	ef 49 ff ec 	st.w	r7[-20],r9
8000a046:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a04a:	ef 49 ff e4 	st.w	r7[-28],r9
8000a04e:	e0 69 04 00 	mov	r9,1024
8000a052:	ef 49 ff e8 	st.w	r7[-24],r9
8000a056:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a05a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000a05e:	f2 0c 0d 49 	min	r9,r9,r12
8000a062:	ef 49 ff e0 	st.w	r7[-32],r9
8000a066:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000a06a:	a1 79       	lsl	r9,0x1
8000a06c:	20 19       	sub	r9,1
8000a06e:	f2 09 12 00 	clz	r9,r9
8000a072:	f2 09 11 1c 	rsub	r9,r9,28
8000a076:	a5 69       	lsl	r9,0x4
8000a078:	12 4b       	or	r11,r9
8000a07a:	ef 39 ff de 	ld.ub	r9,r7[-34]
8000a07e:	a3 69       	lsl	r9,0x2
8000a080:	e2 19 00 0c 	andl	r9,0xc,COH
8000a084:	f7 e9 10 09 	or	r9,r11,r9
8000a088:	e2 19 19 7c 	andl	r9,0x197c,COH
8000a08c:	f5 e9 10 09 	or	r9,r10,r9
8000a090:	91 09       	st.w	r8[0x0],r9
8000a092:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a096:	30 19       	mov	r9,1
8000a098:	f2 08 09 48 	lsl	r8,r9,r8
8000a09c:	ef 58 ff dc 	st.h	r7[-36],r8
8000a0a0:	30 28       	mov	r8,2
8000a0a2:	ef 68 ff df 	st.b	r7[-33],r8
8000a0a6:	c3 a8       	rjmp	8000a11a <udd_ep_alloc+0x1de>
8000a0a8:	fe 68 00 00 	mov	r8,-131072
8000a0ac:	70 79       	ld.w	r9,r8[0x1c]
8000a0ae:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a0b2:	30 1a       	mov	r10,1
8000a0b4:	f4 08 09 48 	lsl	r8,r10,r8
8000a0b8:	f3 e8 00 08 	and	r8,r9,r8
8000a0bc:	c2 a0       	breq	8000a110 <udd_ep_alloc+0x1d4>
8000a0be:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a0c2:	30 19       	mov	r9,1
8000a0c4:	f2 08 09 48 	lsl	r8,r9,r8
8000a0c8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000a0cc:	ef 08 ff dc 	ld.sh	r8,r7[-36]
8000a0d0:	f3 e8 10 08 	or	r8,r9,r8
8000a0d4:	5c 88       	casts.h	r8
8000a0d6:	ef 58 ff dc 	st.h	r7[-36],r8
8000a0da:	fe 68 00 00 	mov	r8,-131072
8000a0de:	fe 69 00 00 	mov	r9,-131072
8000a0e2:	72 7a       	ld.w	r10,r9[0x1c]
8000a0e4:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a0e8:	30 1b       	mov	r11,1
8000a0ea:	f6 09 09 49 	lsl	r9,r11,r9
8000a0ee:	5c d9       	com	r9
8000a0f0:	f5 e9 00 09 	and	r9,r10,r9
8000a0f4:	91 79       	st.w	r8[0x1c],r9
8000a0f6:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a0fa:	a3 68       	lsl	r8,0x2
8000a0fc:	e0 38 ff 00 	sub	r8,130816
8000a100:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a104:	a3 69       	lsl	r9,0x2
8000a106:	e0 39 ff 00 	sub	r9,130816
8000a10a:	72 09       	ld.w	r9,r9[0x0]
8000a10c:	a1 d9       	cbr	r9,0x1
8000a10e:	91 09       	st.w	r8[0x0],r9
8000a110:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a114:	20 18       	sub	r8,1
8000a116:	ef 68 ff df 	st.b	r7[-33],r8
8000a11a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a11e:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a122:	f0 09 18 00 	cp.b	r9,r8
8000a126:	fe 9b ff c1 	brhi	8000a0a8 <udd_ep_alloc+0x16c>
8000a12a:	ef 38 ff d4 	ld.ub	r8,r7[-44]
8000a12e:	ef 68 ff df 	st.b	r7[-33],r8
8000a132:	c9 c8       	rjmp	8000a26a <udd_ep_alloc+0x32e>
8000a134:	ef 19 ff dc 	ld.uh	r9,r7[-36]
8000a138:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a13c:	f2 08 08 48 	asr	r8,r9,r8
8000a140:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a144:	5c 58       	castu.b	r8
8000a146:	e0 80 00 8d 	breq	8000a260 <udd_ep_alloc+0x324>
8000a14a:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a14e:	f0 c9 00 01 	sub	r9,r8,1
8000a152:	12 98       	mov	r8,r9
8000a154:	a3 68       	lsl	r8,0x2
8000a156:	12 08       	add	r8,r9
8000a158:	a3 68       	lsl	r8,0x2
8000a15a:	10 99       	mov	r9,r8
8000a15c:	4c a8       	lddpc	r8,8000a284 <udd_ep_alloc+0x348>
8000a15e:	f2 08 00 08 	add	r8,r9,r8
8000a162:	ef 48 ff f8 	st.w	r7[-8],r8
8000a166:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a16a:	70 08       	ld.w	r8,r8[0x0]
8000a16c:	e6 18 80 00 	andh	r8,0x8000,COH
8000a170:	5f 18       	srne	r8
8000a172:	ef 68 ff ff 	st.b	r7[-1],r8
8000a176:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a17a:	72 08       	ld.w	r8,r9[0x0]
8000a17c:	30 0a       	mov	r10,0
8000a17e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a182:	93 08       	st.w	r9[0x0],r8
8000a184:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a188:	a3 68       	lsl	r8,0x2
8000a18a:	e0 38 ff 00 	sub	r8,130816
8000a18e:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a192:	a3 69       	lsl	r9,0x2
8000a194:	e0 39 ff 00 	sub	r9,130816
8000a198:	72 09       	ld.w	r9,r9[0x0]
8000a19a:	a1 b9       	sbr	r9,0x1
8000a19c:	91 09       	st.w	r8[0x0],r9
8000a19e:	fe 68 00 00 	mov	r8,-131072
8000a1a2:	fe 69 00 00 	mov	r9,-131072
8000a1a6:	72 7a       	ld.w	r10,r9[0x1c]
8000a1a8:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a1ac:	30 1b       	mov	r11,1
8000a1ae:	f6 09 09 49 	lsl	r9,r11,r9
8000a1b2:	f5 e9 10 09 	or	r9,r10,r9
8000a1b6:	91 79       	st.w	r8[0x1c],r9
8000a1b8:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a1bc:	a3 68       	lsl	r8,0x2
8000a1be:	e0 38 fe d0 	sub	r8,130768
8000a1c2:	70 08       	ld.w	r8,r8[0x0]
8000a1c4:	e6 18 00 04 	andh	r8,0x4,COH
8000a1c8:	c2 61       	brne	8000a214 <udd_ep_alloc+0x2d8>
8000a1ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a1ce:	70 48       	ld.w	r8,r8[0x10]
8000a1d0:	58 08       	cp.w	r8,0
8000a1d2:	c0 31       	brne	8000a1d8 <udd_ep_alloc+0x29c>
8000a1d4:	30 08       	mov	r8,0
8000a1d6:	c5 28       	rjmp	8000a27a <udd_ep_alloc+0x33e>
8000a1d8:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a1dc:	a3 68       	lsl	r8,0x2
8000a1de:	e0 38 ff 00 	sub	r8,130816
8000a1e2:	70 08       	ld.w	r8,r8[0x0]
8000a1e4:	e2 18 01 00 	andl	r8,0x100,COH
8000a1e8:	c0 90       	breq	8000a1fa <udd_ep_alloc+0x2be>
8000a1ea:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a1ee:	ea 18 ff ff 	orh	r8,0xffff
8000a1f2:	e8 18 ff 80 	orl	r8,0xff80
8000a1f6:	ef 68 ff df 	st.b	r7[-33],r8
8000a1fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a1fe:	70 48       	ld.w	r8,r8[0x10]
8000a200:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000a204:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a208:	72 29       	ld.w	r9,r9[0x8]
8000a20a:	12 9b       	mov	r11,r9
8000a20c:	30 1c       	mov	r12,1
8000a20e:	5d 18       	icall	r8
8000a210:	30 08       	mov	r8,0
8000a212:	c3 48       	rjmp	8000a27a <udd_ep_alloc+0x33e>
8000a214:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a218:	a3 68       	lsl	r8,0x2
8000a21a:	e0 38 ff 00 	sub	r8,130816
8000a21e:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a222:	a3 69       	lsl	r9,0x2
8000a224:	e0 39 ff 00 	sub	r9,130816
8000a228:	72 09       	ld.w	r9,r9[0x0]
8000a22a:	a9 b9       	sbr	r9,0x9
8000a22c:	91 09       	st.w	r8[0x0],r9
8000a22e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a232:	30 08       	mov	r8,0
8000a234:	f0 09 18 00 	cp.b	r9,r8
8000a238:	c1 40       	breq	8000a260 <udd_ep_alloc+0x324>
8000a23a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a23e:	70 48       	ld.w	r8,r8[0x10]
8000a240:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a244:	72 29       	ld.w	r9,r9[0x8]
8000a246:	ee fa ff f8 	ld.w	r10,r7[-8]
8000a24a:	74 1a       	ld.w	r10,r10[0x4]
8000a24c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a250:	76 0b       	ld.w	r11,r11[0x0]
8000a252:	e6 1b 40 00 	andh	r11,0x4000,COH
8000a256:	5f 1b       	srne	r11
8000a258:	ef 3c ff df 	ld.ub	r12,r7[-33]
8000a25c:	f0 1f 00 0b 	mcall	8000a288 <udd_ep_alloc+0x34c>
8000a260:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000a264:	2f f8       	sub	r8,-1
8000a266:	ef 68 ff df 	st.b	r7[-33],r8
8000a26a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000a26e:	30 28       	mov	r8,2
8000a270:	f0 09 18 00 	cp.b	r9,r8
8000a274:	fe 98 ff 60 	brls	8000a134 <udd_ep_alloc+0x1f8>
8000a278:	30 18       	mov	r8,1
8000a27a:	10 9c       	mov	r12,r8
8000a27c:	2f 3d       	sub	sp,-52
8000a27e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a282:	00 00       	add	r0,r0
8000a284:	00 00       	add	r0,r0
8000a286:	07 c0       	ld.ub	r0,r3[0x4]
8000a288:	80 00       	ld.sh	r0,r0[0x0]
8000a28a:	a5 ac       	sbr	r12,0x4

8000a28c <udd_ep_free>:
8000a28c:	eb cd 40 80 	pushm	r7,lr
8000a290:	1a 97       	mov	r7,sp
8000a292:	20 2d       	sub	sp,8
8000a294:	18 98       	mov	r8,r12
8000a296:	ef 68 ff f8 	st.b	r7[-8],r8
8000a29a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a29e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a2a2:	ef 68 ff ff 	st.b	r7[-1],r8
8000a2a6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a2aa:	30 28       	mov	r8,2
8000a2ac:	f0 09 18 00 	cp.b	r9,r8
8000a2b0:	e0 8b 00 33 	brhi	8000a316 <udd_ep_free+0x8a>
8000a2b4:	fe 68 00 00 	mov	r8,-131072
8000a2b8:	fe 69 00 00 	mov	r9,-131072
8000a2bc:	72 7a       	ld.w	r10,r9[0x1c]
8000a2be:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a2c2:	30 1b       	mov	r11,1
8000a2c4:	f6 09 09 49 	lsl	r9,r11,r9
8000a2c8:	5c d9       	com	r9
8000a2ca:	f5 e9 00 09 	and	r9,r10,r9
8000a2ce:	91 79       	st.w	r8[0x1c],r9
8000a2d0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2d4:	a3 68       	lsl	r8,0x2
8000a2d6:	e0 38 ff 00 	sub	r8,130816
8000a2da:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a2de:	a3 69       	lsl	r9,0x2
8000a2e0:	e0 39 ff 00 	sub	r9,130816
8000a2e4:	72 09       	ld.w	r9,r9[0x0]
8000a2e6:	a1 d9       	cbr	r9,0x1
8000a2e8:	91 09       	st.w	r8[0x0],r9
8000a2ea:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a2ee:	10 9c       	mov	r12,r8
8000a2f0:	f0 1f 00 0c 	mcall	8000a320 <udd_ep_free+0x94>
8000a2f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a2f8:	f0 c9 00 01 	sub	r9,r8,1
8000a2fc:	48 aa       	lddpc	r10,8000a324 <udd_ep_free+0x98>
8000a2fe:	12 98       	mov	r8,r9
8000a300:	a3 68       	lsl	r8,0x2
8000a302:	12 08       	add	r8,r9
8000a304:	a3 68       	lsl	r8,0x2
8000a306:	f4 08 00 09 	add	r9,r10,r8
8000a30a:	72 08       	ld.w	r8,r9[0x0]
8000a30c:	30 0a       	mov	r10,0
8000a30e:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a312:	93 08       	st.w	r9[0x0],r8
8000a314:	c0 28       	rjmp	8000a318 <udd_ep_free+0x8c>
8000a316:	d7 03       	nop
8000a318:	2f ed       	sub	sp,-8
8000a31a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a31e:	00 00       	add	r0,r0
8000a320:	80 00       	ld.sh	r0,r0[0x0]
8000a322:	b3 34       	mul	r4,r9
8000a324:	00 00       	add	r0,r0
8000a326:	07 c0       	ld.ub	r0,r3[0x4]

8000a328 <udd_ep_is_halted>:
8000a328:	eb cd 40 80 	pushm	r7,lr
8000a32c:	1a 97       	mov	r7,sp
8000a32e:	20 1d       	sub	sp,4
8000a330:	18 98       	mov	r8,r12
8000a332:	ef 68 ff fc 	st.b	r7[-4],r8
8000a336:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a33a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a33e:	a3 68       	lsl	r8,0x2
8000a340:	e0 38 fe 40 	sub	r8,130624
8000a344:	70 08       	ld.w	r8,r8[0x0]
8000a346:	e6 18 00 08 	andh	r8,0x8,COH
8000a34a:	5f 18       	srne	r8
8000a34c:	5c 58       	castu.b	r8
8000a34e:	10 9c       	mov	r12,r8
8000a350:	2f fd       	sub	sp,-4
8000a352:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a356:	d7 03       	nop

8000a358 <udd_ep_set_halt>:
8000a358:	eb cd 40 80 	pushm	r7,lr
8000a35c:	1a 97       	mov	r7,sp
8000a35e:	20 3d       	sub	sp,12
8000a360:	18 98       	mov	r8,r12
8000a362:	ef 68 ff f4 	st.b	r7[-12],r8
8000a366:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a36a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a36e:	ef 68 ff ff 	st.b	r7[-1],r8
8000a372:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a376:	30 28       	mov	r8,2
8000a378:	f0 09 18 00 	cp.b	r9,r8
8000a37c:	e0 88 00 04 	brls	8000a384 <udd_ep_set_halt+0x2c>
8000a380:	30 08       	mov	r8,0
8000a382:	c6 f8       	rjmp	8000a460 <udd_ep_set_halt+0x108>
8000a384:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a388:	f0 c9 00 01 	sub	r9,r8,1
8000a38c:	12 98       	mov	r8,r9
8000a38e:	a3 68       	lsl	r8,0x2
8000a390:	12 08       	add	r8,r9
8000a392:	a3 68       	lsl	r8,0x2
8000a394:	10 99       	mov	r9,r8
8000a396:	4b 58       	lddpc	r8,8000a468 <udd_ep_set_halt+0x110>
8000a398:	f2 08 00 08 	add	r8,r9,r8
8000a39c:	ef 48 ff f8 	st.w	r7[-8],r8
8000a3a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a3a4:	a3 68       	lsl	r8,0x2
8000a3a6:	e0 38 fe 40 	sub	r8,130624
8000a3aa:	70 08       	ld.w	r8,r8[0x0]
8000a3ac:	e6 18 00 08 	andh	r8,0x8,COH
8000a3b0:	c0 71       	brne	8000a3be <udd_ep_set_halt+0x66>
8000a3b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a3b6:	70 08       	ld.w	r8,r8[0x0]
8000a3b8:	e6 18 20 00 	andh	r8,0x2000,COH
8000a3bc:	c0 30       	breq	8000a3c2 <udd_ep_set_halt+0x6a>
8000a3be:	30 18       	mov	r8,1
8000a3c0:	c5 08       	rjmp	8000a460 <udd_ep_set_halt+0x108>
8000a3c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a3c6:	70 08       	ld.w	r8,r8[0x0]
8000a3c8:	e6 18 80 00 	andh	r8,0x8000,COH
8000a3cc:	c0 30       	breq	8000a3d2 <udd_ep_set_halt+0x7a>
8000a3ce:	30 08       	mov	r8,0
8000a3d0:	c4 88       	rjmp	8000a460 <udd_ep_set_halt+0x108>
8000a3d2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a3d6:	30 08       	mov	r8,0
8000a3d8:	f0 09 18 00 	cp.b	r9,r8
8000a3dc:	c2 54       	brge	8000a426 <udd_ep_set_halt+0xce>
8000a3de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a3e2:	a3 68       	lsl	r8,0x2
8000a3e4:	e0 38 fe d0 	sub	r8,130768
8000a3e8:	70 08       	ld.w	r8,r8[0x0]
8000a3ea:	e2 18 30 00 	andl	r8,0x3000,COH
8000a3ee:	ad 88       	lsr	r8,0xc
8000a3f0:	c1 b0       	breq	8000a426 <udd_ep_set_halt+0xce>
8000a3f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a3f6:	72 08       	ld.w	r8,r9[0x0]
8000a3f8:	30 1a       	mov	r10,1
8000a3fa:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a3fe:	93 08       	st.w	r9[0x0],r8
8000a400:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a404:	a3 68       	lsl	r8,0x2
8000a406:	e0 38 fe 10 	sub	r8,130576
8000a40a:	e0 69 10 00 	mov	r9,4096
8000a40e:	91 09       	st.w	r8[0x0],r9
8000a410:	fe 68 00 00 	mov	r8,-131072
8000a414:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a418:	e0 6a 10 00 	mov	r10,4096
8000a41c:	f4 09 09 49 	lsl	r9,r10,r9
8000a420:	91 69       	st.w	r8[0x18],r9
8000a422:	30 18       	mov	r8,1
8000a424:	c1 e8       	rjmp	8000a460 <udd_ep_set_halt+0x108>
8000a426:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a42a:	a3 68       	lsl	r8,0x2
8000a42c:	e0 38 ff 00 	sub	r8,130816
8000a430:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a434:	a3 69       	lsl	r9,0x2
8000a436:	e0 39 ff 00 	sub	r9,130816
8000a43a:	72 09       	ld.w	r9,r9[0x0]
8000a43c:	a9 d9       	cbr	r9,0x9
8000a43e:	91 09       	st.w	r8[0x0],r9
8000a440:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a444:	a3 68       	lsl	r8,0x2
8000a446:	e0 38 fe a0 	sub	r8,130720
8000a44a:	34 09       	mov	r9,64
8000a44c:	91 09       	st.w	r8[0x0],r9
8000a44e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a452:	a3 68       	lsl	r8,0x2
8000a454:	e0 38 fe 10 	sub	r8,130576
8000a458:	e8 69 00 00 	mov	r9,524288
8000a45c:	91 09       	st.w	r8[0x0],r9
8000a45e:	30 18       	mov	r8,1
8000a460:	10 9c       	mov	r12,r8
8000a462:	2f dd       	sub	sp,-12
8000a464:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a468:	00 00       	add	r0,r0
8000a46a:	07 c0       	ld.ub	r0,r3[0x4]

8000a46c <udd_ep_clear_halt>:
8000a46c:	eb cd 40 80 	pushm	r7,lr
8000a470:	1a 97       	mov	r7,sp
8000a472:	20 3d       	sub	sp,12
8000a474:	18 98       	mov	r8,r12
8000a476:	ef 68 ff f4 	st.b	r7[-12],r8
8000a47a:	30 08       	mov	r8,0
8000a47c:	ef 68 ff fb 	st.b	r7[-5],r8
8000a480:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a484:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a488:	ef 68 ff f4 	st.b	r7[-12],r8
8000a48c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a490:	30 28       	mov	r8,2
8000a492:	f0 09 18 00 	cp.b	r9,r8
8000a496:	e0 88 00 04 	brls	8000a49e <udd_ep_clear_halt+0x32>
8000a49a:	30 08       	mov	r8,0
8000a49c:	c8 18       	rjmp	8000a59e <udd_ep_clear_halt+0x132>
8000a49e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a4a2:	f0 c9 00 01 	sub	r9,r8,1
8000a4a6:	12 98       	mov	r8,r9
8000a4a8:	a3 68       	lsl	r8,0x2
8000a4aa:	12 08       	add	r8,r9
8000a4ac:	a3 68       	lsl	r8,0x2
8000a4ae:	10 99       	mov	r9,r8
8000a4b0:	4b e8       	lddpc	r8,8000a5a8 <udd_ep_clear_halt+0x13c>
8000a4b2:	f2 08 00 08 	add	r8,r9,r8
8000a4b6:	ef 48 ff fc 	st.w	r7[-4],r8
8000a4ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a4be:	70 08       	ld.w	r8,r8[0x0]
8000a4c0:	e6 18 20 00 	andh	r8,0x2000,COH
8000a4c4:	c1 c0       	breq	8000a4fc <udd_ep_clear_halt+0x90>
8000a4c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a4ca:	72 08       	ld.w	r8,r9[0x0]
8000a4cc:	30 0a       	mov	r10,0
8000a4ce:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a4d2:	93 08       	st.w	r9[0x0],r8
8000a4d4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a4d8:	a3 68       	lsl	r8,0x2
8000a4da:	e0 38 fd e0 	sub	r8,130528
8000a4de:	e0 69 10 00 	mov	r9,4096
8000a4e2:	91 09       	st.w	r8[0x0],r9
8000a4e4:	fe 68 00 00 	mov	r8,-131072
8000a4e8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a4ec:	e0 6a 10 00 	mov	r10,4096
8000a4f0:	f4 09 09 49 	lsl	r9,r10,r9
8000a4f4:	91 59       	st.w	r8[0x14],r9
8000a4f6:	30 18       	mov	r8,1
8000a4f8:	ef 68 ff fb 	st.b	r7[-5],r8
8000a4fc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a500:	a3 68       	lsl	r8,0x2
8000a502:	e0 38 fe 40 	sub	r8,130624
8000a506:	70 08       	ld.w	r8,r8[0x0]
8000a508:	e6 18 00 08 	andh	r8,0x8,COH
8000a50c:	c3 10       	breq	8000a56e <udd_ep_clear_halt+0x102>
8000a50e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a512:	a3 68       	lsl	r8,0x2
8000a514:	e0 38 fe d0 	sub	r8,130768
8000a518:	70 08       	ld.w	r8,r8[0x0]
8000a51a:	e2 18 00 40 	andl	r8,0x40,COH
8000a51e:	c1 00       	breq	8000a53e <udd_ep_clear_halt+0xd2>
8000a520:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a524:	a3 68       	lsl	r8,0x2
8000a526:	e0 38 fe a0 	sub	r8,130720
8000a52a:	34 09       	mov	r9,64
8000a52c:	91 09       	st.w	r8[0x0],r9
8000a52e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a532:	a3 68       	lsl	r8,0x2
8000a534:	e0 38 fe 10 	sub	r8,130576
8000a538:	e4 69 00 00 	mov	r9,262144
8000a53c:	91 09       	st.w	r8[0x0],r9
8000a53e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a542:	a3 68       	lsl	r8,0x2
8000a544:	e0 38 fd e0 	sub	r8,130528
8000a548:	e8 69 00 00 	mov	r9,524288
8000a54c:	91 09       	st.w	r8[0x0],r9
8000a54e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a552:	a3 68       	lsl	r8,0x2
8000a554:	e0 38 ff 00 	sub	r8,130816
8000a558:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a55c:	a3 69       	lsl	r9,0x2
8000a55e:	e0 39 ff 00 	sub	r9,130816
8000a562:	72 09       	ld.w	r9,r9[0x0]
8000a564:	a9 b9       	sbr	r9,0x9
8000a566:	91 09       	st.w	r8[0x0],r9
8000a568:	30 18       	mov	r8,1
8000a56a:	ef 68 ff fb 	st.b	r7[-5],r8
8000a56e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000a572:	30 08       	mov	r8,0
8000a574:	f0 09 18 00 	cp.b	r9,r8
8000a578:	c1 20       	breq	8000a59c <udd_ep_clear_halt+0x130>
8000a57a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a57e:	70 08       	ld.w	r8,r8[0x0]
8000a580:	e6 18 80 00 	andh	r8,0x8000,COH
8000a584:	c0 c0       	breq	8000a59c <udd_ep_clear_halt+0x130>
8000a586:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a58a:	72 08       	ld.w	r8,r9[0x0]
8000a58c:	30 0a       	mov	r10,0
8000a58e:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a592:	93 08       	st.w	r9[0x0],r8
8000a594:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a598:	70 48       	ld.w	r8,r8[0x10]
8000a59a:	5d 18       	icall	r8
8000a59c:	30 18       	mov	r8,1
8000a59e:	10 9c       	mov	r12,r8
8000a5a0:	2f dd       	sub	sp,-12
8000a5a2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a5a6:	00 00       	add	r0,r0
8000a5a8:	00 00       	add	r0,r0
8000a5aa:	07 c0       	ld.ub	r0,r3[0x4]

8000a5ac <udd_ep_run>:
8000a5ac:	eb cd 40 80 	pushm	r7,lr
8000a5b0:	1a 97       	mov	r7,sp
8000a5b2:	20 7d       	sub	sp,28
8000a5b4:	ef 4a ff ec 	st.w	r7[-20],r10
8000a5b8:	ef 49 ff e8 	st.w	r7[-24],r9
8000a5bc:	ef 48 ff e4 	st.w	r7[-28],r8
8000a5c0:	18 98       	mov	r8,r12
8000a5c2:	ef 68 ff f4 	st.b	r7[-12],r8
8000a5c6:	16 98       	mov	r8,r11
8000a5c8:	ef 68 ff f0 	st.b	r7[-16],r8
8000a5cc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a5d0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a5d4:	ef 68 ff f4 	st.b	r7[-12],r8
8000a5d8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000a5dc:	30 28       	mov	r8,2
8000a5de:	f0 09 18 00 	cp.b	r9,r8
8000a5e2:	e0 88 00 04 	brls	8000a5ea <udd_ep_run+0x3e>
8000a5e6:	30 08       	mov	r8,0
8000a5e8:	c6 88       	rjmp	8000a6b8 <udd_ep_run+0x10c>
8000a5ea:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a5ee:	f0 c9 00 01 	sub	r9,r8,1
8000a5f2:	12 98       	mov	r8,r9
8000a5f4:	a3 68       	lsl	r8,0x2
8000a5f6:	12 08       	add	r8,r9
8000a5f8:	a3 68       	lsl	r8,0x2
8000a5fa:	10 99       	mov	r9,r8
8000a5fc:	4b 18       	lddpc	r8,8000a6c0 <udd_ep_run+0x114>
8000a5fe:	f2 08 00 08 	add	r8,r9,r8
8000a602:	ef 48 ff f8 	st.w	r7[-8],r8
8000a606:	fe 68 00 00 	mov	r8,-131072
8000a60a:	70 79       	ld.w	r9,r8[0x1c]
8000a60c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a610:	30 1a       	mov	r10,1
8000a612:	f4 08 09 48 	lsl	r8,r10,r8
8000a616:	f3 e8 00 08 	and	r8,r9,r8
8000a61a:	c1 00       	breq	8000a63a <udd_ep_run+0x8e>
8000a61c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a620:	a3 68       	lsl	r8,0x2
8000a622:	e0 38 fe 40 	sub	r8,130624
8000a626:	70 08       	ld.w	r8,r8[0x0]
8000a628:	e6 18 00 08 	andh	r8,0x8,COH
8000a62c:	c0 71       	brne	8000a63a <udd_ep_run+0x8e>
8000a62e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a632:	70 08       	ld.w	r8,r8[0x0]
8000a634:	e6 18 20 00 	andh	r8,0x2000,COH
8000a638:	c0 30       	breq	8000a63e <udd_ep_run+0x92>
8000a63a:	30 08       	mov	r8,0
8000a63c:	c3 e8       	rjmp	8000a6b8 <udd_ep_run+0x10c>
8000a63e:	f0 1f 00 22 	mcall	8000a6c4 <udd_ep_run+0x118>
8000a642:	18 98       	mov	r8,r12
8000a644:	ef 48 ff fc 	st.w	r7[-4],r8
8000a648:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a64c:	70 08       	ld.w	r8,r8[0x0]
8000a64e:	e6 18 80 00 	andh	r8,0x8000,COH
8000a652:	c0 70       	breq	8000a660 <udd_ep_run+0xb4>
8000a654:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a658:	f0 1f 00 1c 	mcall	8000a6c8 <udd_ep_run+0x11c>
8000a65c:	30 08       	mov	r8,0
8000a65e:	c2 d8       	rjmp	8000a6b8 <udd_ep_run+0x10c>
8000a660:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a664:	72 08       	ld.w	r8,r9[0x0]
8000a666:	30 1a       	mov	r10,1
8000a668:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a66c:	93 08       	st.w	r9[0x0],r8
8000a66e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a672:	f0 1f 00 16 	mcall	8000a6c8 <udd_ep_run+0x11c>
8000a676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a67a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a67e:	91 19       	st.w	r8[0x4],r9
8000a680:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a684:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a688:	91 29       	st.w	r8[0x8],r9
8000a68a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a68e:	30 09       	mov	r9,0
8000a690:	91 39       	st.w	r8[0xc],r9
8000a692:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a696:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a69a:	91 49       	st.w	r8[0x10],r9
8000a69c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a6a0:	72 08       	ld.w	r8,r9[0x0]
8000a6a2:	ef 3a ff f0 	ld.ub	r10,r7[-16]
8000a6a6:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000a6aa:	93 08       	st.w	r9[0x0],r8
8000a6ac:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a6b0:	10 9c       	mov	r12,r8
8000a6b2:	f0 1f 00 07 	mcall	8000a6cc <udd_ep_run+0x120>
8000a6b6:	30 18       	mov	r8,1
8000a6b8:	10 9c       	mov	r12,r8
8000a6ba:	2f 9d       	sub	sp,-28
8000a6bc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a6c0:	00 00       	add	r0,r0
8000a6c2:	07 c0       	ld.ub	r0,r3[0x4]
8000a6c4:	80 00       	ld.sh	r0,r0[0x0]
8000a6c6:	99 90       	st.w	r12[0x24],r0
8000a6c8:	80 00       	ld.sh	r0,r0[0x0]
8000a6ca:	99 ae       	st.w	r12[0x28],lr
8000a6cc:	80 00       	ld.sh	r0,r0[0x0]
8000a6ce:	b4 04       	st.h	r10[0x0],r4

8000a6d0 <udd_ep_abort>:
8000a6d0:	eb cd 40 80 	pushm	r7,lr
8000a6d4:	1a 97       	mov	r7,sp
8000a6d6:	20 2d       	sub	sp,8
8000a6d8:	18 98       	mov	r8,r12
8000a6da:	ef 68 ff f8 	st.b	r7[-8],r8
8000a6de:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a6e2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a6e6:	ef 68 ff ff 	st.b	r7[-1],r8
8000a6ea:	fe 68 00 00 	mov	r8,-131072
8000a6ee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a6f2:	20 19       	sub	r9,1
8000a6f4:	fc 1a 02 00 	movh	r10,0x200
8000a6f8:	f4 09 09 49 	lsl	r9,r10,r9
8000a6fc:	91 59       	st.w	r8[0x14],r9
8000a6fe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a702:	a5 68       	lsl	r8,0x4
8000a704:	e0 38 fd 00 	sub	r8,130304
8000a708:	30 09       	mov	r9,0
8000a70a:	91 29       	st.w	r8[0x8],r9
8000a70c:	fe 68 00 00 	mov	r8,-131072
8000a710:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000a714:	e0 6a 10 00 	mov	r10,4096
8000a718:	f4 09 09 49 	lsl	r9,r10,r9
8000a71c:	91 59       	st.w	r8[0x14],r9
8000a71e:	c1 28       	rjmp	8000a742 <udd_ep_abort+0x72>
8000a720:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a724:	a3 68       	lsl	r8,0x2
8000a726:	e0 38 fe 10 	sub	r8,130576
8000a72a:	e0 69 20 00 	mov	r9,8192
8000a72e:	91 09       	st.w	r8[0x0],r9
8000a730:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a734:	a3 68       	lsl	r8,0x2
8000a736:	e0 38 fe 40 	sub	r8,130624
8000a73a:	70 08       	ld.w	r8,r8[0x0]
8000a73c:	e2 18 20 00 	andl	r8,0x2000,COH
8000a740:	cf 81       	brne	8000a730 <udd_ep_abort+0x60>
8000a742:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000a746:	a3 68       	lsl	r8,0x2
8000a748:	e0 38 fe d0 	sub	r8,130768
8000a74c:	70 08       	ld.w	r8,r8[0x0]
8000a74e:	e2 18 30 00 	andl	r8,0x3000,COH
8000a752:	ad 88       	lsr	r8,0xc
8000a754:	ce 61       	brne	8000a720 <udd_ep_abort+0x50>
8000a756:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a75a:	10 9c       	mov	r12,r8
8000a75c:	f0 1f 00 03 	mcall	8000a768 <udd_ep_abort+0x98>
8000a760:	2f ed       	sub	sp,-8
8000a762:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a766:	00 00       	add	r0,r0
8000a768:	80 00       	ld.sh	r0,r0[0x0]
8000a76a:	b3 34       	mul	r4,r9

8000a76c <udd_ep_wait_stall_clear>:
8000a76c:	eb cd 40 80 	pushm	r7,lr
8000a770:	1a 97       	mov	r7,sp
8000a772:	20 3d       	sub	sp,12
8000a774:	18 98       	mov	r8,r12
8000a776:	ef 4b ff f4 	st.w	r7[-12],r11
8000a77a:	ef 68 ff f8 	st.b	r7[-8],r8
8000a77e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a782:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a786:	ef 68 ff f8 	st.b	r7[-8],r8
8000a78a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000a78e:	30 28       	mov	r8,2
8000a790:	f0 09 18 00 	cp.b	r9,r8
8000a794:	e0 88 00 04 	brls	8000a79c <udd_ep_wait_stall_clear+0x30>
8000a798:	30 08       	mov	r8,0
8000a79a:	c4 48       	rjmp	8000a822 <udd_ep_wait_stall_clear+0xb6>
8000a79c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a7a0:	f0 c9 00 01 	sub	r9,r8,1
8000a7a4:	12 98       	mov	r8,r9
8000a7a6:	a3 68       	lsl	r8,0x2
8000a7a8:	12 08       	add	r8,r9
8000a7aa:	a3 68       	lsl	r8,0x2
8000a7ac:	10 99       	mov	r9,r8
8000a7ae:	4a 08       	lddpc	r8,8000a82c <udd_ep_wait_stall_clear+0xc0>
8000a7b0:	f2 08 00 08 	add	r8,r9,r8
8000a7b4:	ef 48 ff fc 	st.w	r7[-4],r8
8000a7b8:	fe 68 00 00 	mov	r8,-131072
8000a7bc:	70 79       	ld.w	r9,r8[0x1c]
8000a7be:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a7c2:	30 1a       	mov	r10,1
8000a7c4:	f4 08 09 48 	lsl	r8,r10,r8
8000a7c8:	f3 e8 00 08 	and	r8,r9,r8
8000a7cc:	c0 31       	brne	8000a7d2 <udd_ep_wait_stall_clear+0x66>
8000a7ce:	30 08       	mov	r8,0
8000a7d0:	c2 98       	rjmp	8000a822 <udd_ep_wait_stall_clear+0xb6>
8000a7d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a7d6:	70 08       	ld.w	r8,r8[0x0]
8000a7d8:	e6 18 80 00 	andh	r8,0x8000,COH
8000a7dc:	c0 30       	breq	8000a7e2 <udd_ep_wait_stall_clear+0x76>
8000a7de:	30 08       	mov	r8,0
8000a7e0:	c2 18       	rjmp	8000a822 <udd_ep_wait_stall_clear+0xb6>
8000a7e2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000a7e6:	a3 68       	lsl	r8,0x2
8000a7e8:	e0 38 fe 40 	sub	r8,130624
8000a7ec:	70 08       	ld.w	r8,r8[0x0]
8000a7ee:	e6 18 00 08 	andh	r8,0x8,COH
8000a7f2:	c0 71       	brne	8000a800 <udd_ep_wait_stall_clear+0x94>
8000a7f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a7f8:	70 08       	ld.w	r8,r8[0x0]
8000a7fa:	e6 18 20 00 	andh	r8,0x2000,COH
8000a7fe:	c0 e0       	breq	8000a81a <udd_ep_wait_stall_clear+0xae>
8000a800:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a804:	72 08       	ld.w	r8,r9[0x0]
8000a806:	30 1a       	mov	r10,1
8000a808:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000a80c:	93 08       	st.w	r9[0x0],r8
8000a80e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a812:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a816:	91 49       	st.w	r8[0x10],r9
8000a818:	c0 48       	rjmp	8000a820 <udd_ep_wait_stall_clear+0xb4>
8000a81a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a81e:	5d 18       	icall	r8
8000a820:	30 18       	mov	r8,1
8000a822:	10 9c       	mov	r12,r8
8000a824:	2f dd       	sub	sp,-12
8000a826:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a82a:	00 00       	add	r0,r0
8000a82c:	00 00       	add	r0,r0
8000a82e:	07 c0       	ld.ub	r0,r3[0x4]

8000a830 <udd_test_mode_j>:
8000a830:	eb cd 40 80 	pushm	r7,lr
8000a834:	1a 97       	mov	r7,sp
8000a836:	fe 68 00 00 	mov	r8,-131072
8000a83a:	fe 69 00 00 	mov	r9,-131072
8000a83e:	72 09       	ld.w	r9,r9[0x0]
8000a840:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a844:	ab b9       	sbr	r9,0xb
8000a846:	91 09       	st.w	r8[0x0],r9
8000a848:	fe 68 00 00 	mov	r8,-131072
8000a84c:	fe 69 00 00 	mov	r9,-131072
8000a850:	72 09       	ld.w	r9,r9[0x0]
8000a852:	ad b9       	sbr	r9,0xd
8000a854:	91 09       	st.w	r8[0x0],r9
8000a856:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a85a <udd_test_mode_k>:
8000a85a:	eb cd 40 80 	pushm	r7,lr
8000a85e:	1a 97       	mov	r7,sp
8000a860:	fe 68 00 00 	mov	r8,-131072
8000a864:	fe 69 00 00 	mov	r9,-131072
8000a868:	72 09       	ld.w	r9,r9[0x0]
8000a86a:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a86e:	ab b9       	sbr	r9,0xb
8000a870:	91 09       	st.w	r8[0x0],r9
8000a872:	fe 68 00 00 	mov	r8,-131072
8000a876:	fe 69 00 00 	mov	r9,-131072
8000a87a:	72 09       	ld.w	r9,r9[0x0]
8000a87c:	af a9       	sbr	r9,0xe
8000a87e:	91 09       	st.w	r8[0x0],r9
8000a880:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a884 <udd_test_mode_se0_nak>:
8000a884:	eb cd 40 80 	pushm	r7,lr
8000a888:	1a 97       	mov	r7,sp
8000a88a:	fe 68 00 00 	mov	r8,-131072
8000a88e:	fe 69 00 00 	mov	r9,-131072
8000a892:	72 09       	ld.w	r9,r9[0x0]
8000a894:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a898:	ab b9       	sbr	r9,0xb
8000a89a:	91 09       	st.w	r8[0x0],r9
8000a89c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a8a0 <udd_test_mode_packet>:
8000a8a0:	eb cd 40 80 	pushm	r7,lr
8000a8a4:	1a 97       	mov	r7,sp
8000a8a6:	21 7d       	sub	sp,92
8000a8a8:	4d c9       	lddpc	r9,8000aa18 <udd_test_mode_packet+0x178>
8000a8aa:	ee c8 00 5c 	sub	r8,r7,92
8000a8ae:	f2 ea 00 00 	ld.d	r10,r9[0]
8000a8b2:	f0 eb 00 00 	st.d	r8[0],r10
8000a8b6:	f2 ea 00 08 	ld.d	r10,r9[8]
8000a8ba:	f0 eb 00 08 	st.d	r8[8],r10
8000a8be:	f2 ea 00 10 	ld.d	r10,r9[16]
8000a8c2:	f0 eb 00 10 	st.d	r8[16],r10
8000a8c6:	f2 ea 00 18 	ld.d	r10,r9[24]
8000a8ca:	f0 eb 00 18 	st.d	r8[24],r10
8000a8ce:	f2 ea 00 20 	ld.d	r10,r9[32]
8000a8d2:	f0 eb 00 20 	st.d	r8[32],r10
8000a8d6:	f2 ea 00 28 	ld.d	r10,r9[40]
8000a8da:	f0 eb 00 28 	st.d	r8[40],r10
8000a8de:	72 ca       	ld.w	r10,r9[0x30]
8000a8e0:	91 ca       	st.w	r8[0x30],r10
8000a8e2:	f3 39 00 34 	ld.ub	r9,r9[52]
8000a8e6:	f1 69 00 34 	st.b	r8[52],r9
8000a8ea:	fe 68 00 00 	mov	r8,-131072
8000a8ee:	fe 69 00 00 	mov	r9,-131072
8000a8f2:	72 79       	ld.w	r9,r9[0x1c]
8000a8f4:	a1 c9       	cbr	r9,0x0
8000a8f6:	91 79       	st.w	r8[0x1c],r9
8000a8f8:	fe 68 01 00 	mov	r8,-130816
8000a8fc:	fe 69 01 00 	mov	r9,-130816
8000a900:	72 09       	ld.w	r9,r9[0x0]
8000a902:	12 9a       	mov	r10,r9
8000a904:	e0 1a e6 83 	andl	r10,0xe683
8000a908:	34 09       	mov	r9,64
8000a90a:	ef 49 ff f8 	st.w	r7[-8],r9
8000a90e:	30 89       	mov	r9,8
8000a910:	ef 49 ff fc 	st.w	r7[-4],r9
8000a914:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a918:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a91c:	f2 0b 0c 49 	max	r9,r9,r11
8000a920:	ef 49 ff f4 	st.w	r7[-12],r9
8000a924:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a928:	ef 49 ff ec 	st.w	r7[-20],r9
8000a92c:	e0 69 04 00 	mov	r9,1024
8000a930:	ef 49 ff f0 	st.w	r7[-16],r9
8000a934:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000a938:	ee fb ff f0 	ld.w	r11,r7[-16]
8000a93c:	f2 0b 0d 49 	min	r9,r9,r11
8000a940:	ef 49 ff e8 	st.w	r7[-24],r9
8000a944:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a948:	a1 79       	lsl	r9,0x1
8000a94a:	20 19       	sub	r9,1
8000a94c:	f2 09 12 00 	clz	r9,r9
8000a950:	f2 09 11 1c 	rsub	r9,r9,28
8000a954:	a5 69       	lsl	r9,0x4
8000a956:	e2 19 08 7c 	andl	r9,0x87c,COH
8000a95a:	f5 e9 10 09 	or	r9,r10,r9
8000a95e:	e8 19 11 00 	orl	r9,0x1100
8000a962:	91 09       	st.w	r8[0x0],r9
8000a964:	fe 68 01 00 	mov	r8,-130816
8000a968:	fe 69 01 00 	mov	r9,-130816
8000a96c:	72 09       	ld.w	r9,r9[0x0]
8000a96e:	a1 b9       	sbr	r9,0x1
8000a970:	91 09       	st.w	r8[0x0],r9
8000a972:	fe 68 00 00 	mov	r8,-131072
8000a976:	fe 69 00 00 	mov	r9,-131072
8000a97a:	72 79       	ld.w	r9,r9[0x1c]
8000a97c:	a1 a9       	sbr	r9,0x0
8000a97e:	91 79       	st.w	r8[0x1c],r9
8000a980:	fe 68 00 00 	mov	r8,-131072
8000a984:	fe 69 00 00 	mov	r9,-131072
8000a988:	72 09       	ld.w	r9,r9[0x0]
8000a98a:	e0 19 f3 ff 	andl	r9,0xf3ff
8000a98e:	ab b9       	sbr	r9,0xb
8000a990:	91 09       	st.w	r8[0x0],r9
8000a992:	fe 68 00 00 	mov	r8,-131072
8000a996:	fe 69 00 00 	mov	r9,-131072
8000a99a:	72 09       	ld.w	r9,r9[0x0]
8000a99c:	af b9       	sbr	r9,0xf
8000a99e:	91 09       	st.w	r8[0x0],r9
8000a9a0:	fc 18 e0 00 	movh	r8,0xe000
8000a9a4:	ef 48 ff dc 	st.w	r7[-36],r8
8000a9a8:	ee c8 00 5c 	sub	r8,r7,92
8000a9ac:	ef 48 ff e0 	st.w	r7[-32],r8
8000a9b0:	30 08       	mov	r8,0
8000a9b2:	ef 68 ff db 	st.b	r7[-37],r8
8000a9b6:	c1 68       	rjmp	8000a9e2 <udd_test_mode_packet+0x142>
8000a9b8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a9bc:	11 88       	ld.ub	r8,r8[0x0]
8000a9be:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000a9c2:	b2 88       	st.b	r9[0x0],r8
8000a9c4:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a9c8:	2f f8       	sub	r8,-1
8000a9ca:	ef 48 ff dc 	st.w	r7[-36],r8
8000a9ce:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a9d2:	2f f8       	sub	r8,-1
8000a9d4:	ef 48 ff e0 	st.w	r7[-32],r8
8000a9d8:	ef 38 ff db 	ld.ub	r8,r7[-37]
8000a9dc:	2f f8       	sub	r8,-1
8000a9de:	ef 68 ff db 	st.b	r7[-37],r8
8000a9e2:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000a9e6:	33 48       	mov	r8,52
8000a9e8:	f0 09 18 00 	cp.b	r9,r8
8000a9ec:	fe 98 ff e6 	brls	8000a9b8 <udd_test_mode_packet+0x118>
8000a9f0:	f0 1f 00 0b 	mcall	8000aa1c <udd_test_mode_packet+0x17c>
8000a9f4:	18 98       	mov	r8,r12
8000a9f6:	ef 48 ff e4 	st.w	r7[-28],r8
8000a9fa:	fe 68 01 f0 	mov	r8,-130576
8000a9fe:	30 19       	mov	r9,1
8000aa00:	91 09       	st.w	r8[0x0],r9
8000aa02:	ee fc ff e4 	ld.w	r12,r7[-28]
8000aa06:	f0 1f 00 07 	mcall	8000aa20 <udd_test_mode_packet+0x180>
8000aa0a:	fe 68 01 60 	mov	r8,-130720
8000aa0e:	30 19       	mov	r9,1
8000aa10:	91 09       	st.w	r8[0x0],r9
8000aa12:	2e 9d       	sub	sp,-92
8000aa14:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa18:	80 00       	ld.sh	r0,r0[0x0]
8000aa1a:	f1 ec 80 00 	sthh.w	r0[r0],r8:b,r12:b
8000aa1e:	99 90       	st.w	r12[0x24],r0
8000aa20:	80 00       	ld.sh	r0,r0[0x0]
8000aa22:	99 ae       	st.w	r12[0x28],lr

8000aa24 <udd_reset_ep_ctrl>:
8000aa24:	eb cd 40 80 	pushm	r7,lr
8000aa28:	1a 97       	mov	r7,sp
8000aa2a:	20 7d       	sub	sp,28
8000aa2c:	fe 68 00 00 	mov	r8,-131072
8000aa30:	fe 69 00 00 	mov	r9,-131072
8000aa34:	72 09       	ld.w	r9,r9[0x0]
8000aa36:	e0 19 ff 80 	andl	r9,0xff80
8000aa3a:	91 09       	st.w	r8[0x0],r9
8000aa3c:	fe 68 00 00 	mov	r8,-131072
8000aa40:	fe 69 00 00 	mov	r9,-131072
8000aa44:	72 09       	ld.w	r9,r9[0x0]
8000aa46:	a7 b9       	sbr	r9,0x7
8000aa48:	91 09       	st.w	r8[0x0],r9
8000aa4a:	fe 68 01 00 	mov	r8,-130816
8000aa4e:	fe 69 01 00 	mov	r9,-130816
8000aa52:	72 09       	ld.w	r9,r9[0x0]
8000aa54:	12 9a       	mov	r10,r9
8000aa56:	e0 1a e6 83 	andl	r10,0xe683
8000aa5a:	34 09       	mov	r9,64
8000aa5c:	ef 49 ff f8 	st.w	r7[-8],r9
8000aa60:	30 89       	mov	r9,8
8000aa62:	ef 49 ff fc 	st.w	r7[-4],r9
8000aa66:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000aa6a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000aa6e:	f2 0b 0c 49 	max	r9,r9,r11
8000aa72:	ef 49 ff f4 	st.w	r7[-12],r9
8000aa76:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000aa7a:	ef 49 ff ec 	st.w	r7[-20],r9
8000aa7e:	e0 69 04 00 	mov	r9,1024
8000aa82:	ef 49 ff f0 	st.w	r7[-16],r9
8000aa86:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000aa8a:	ee fb ff f0 	ld.w	r11,r7[-16]
8000aa8e:	f2 0b 0d 49 	min	r9,r9,r11
8000aa92:	ef 49 ff e8 	st.w	r7[-24],r9
8000aa96:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000aa9a:	a1 79       	lsl	r9,0x1
8000aa9c:	20 19       	sub	r9,1
8000aa9e:	f2 09 12 00 	clz	r9,r9
8000aaa2:	f2 09 11 1c 	rsub	r9,r9,28
8000aaa6:	a5 69       	lsl	r9,0x4
8000aaa8:	e2 19 19 7c 	andl	r9,0x197c,COH
8000aaac:	f5 e9 10 09 	or	r9,r10,r9
8000aab0:	91 09       	st.w	r8[0x0],r9
8000aab2:	fe 68 01 00 	mov	r8,-130816
8000aab6:	fe 69 01 00 	mov	r9,-130816
8000aaba:	72 09       	ld.w	r9,r9[0x0]
8000aabc:	a1 b9       	sbr	r9,0x1
8000aabe:	91 09       	st.w	r8[0x0],r9
8000aac0:	fe 68 00 00 	mov	r8,-131072
8000aac4:	fe 69 00 00 	mov	r9,-131072
8000aac8:	72 79       	ld.w	r9,r9[0x1c]
8000aaca:	a1 a9       	sbr	r9,0x0
8000aacc:	91 79       	st.w	r8[0x1c],r9
8000aace:	f0 1f 00 0d 	mcall	8000ab00 <udd_reset_ep_ctrl+0xdc>
8000aad2:	18 98       	mov	r8,r12
8000aad4:	ef 48 ff e4 	st.w	r7[-28],r8
8000aad8:	fe 68 01 f0 	mov	r8,-130576
8000aadc:	30 49       	mov	r9,4
8000aade:	91 09       	st.w	r8[0x0],r9
8000aae0:	fe 68 01 f0 	mov	r8,-130576
8000aae4:	30 29       	mov	r9,2
8000aae6:	91 09       	st.w	r8[0x0],r9
8000aae8:	fe 68 00 00 	mov	r8,-131072
8000aaec:	e0 69 10 00 	mov	r9,4096
8000aaf0:	91 69       	st.w	r8[0x18],r9
8000aaf2:	ee fc ff e4 	ld.w	r12,r7[-28]
8000aaf6:	f0 1f 00 04 	mcall	8000ab04 <udd_reset_ep_ctrl+0xe0>
8000aafa:	2f 9d       	sub	sp,-28
8000aafc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab00:	80 00       	ld.sh	r0,r0[0x0]
8000ab02:	99 90       	st.w	r12[0x24],r0
8000ab04:	80 00       	ld.sh	r0,r0[0x0]
8000ab06:	99 ae       	st.w	r12[0x28],lr

8000ab08 <udd_ctrl_init>:
8000ab08:	eb cd 40 80 	pushm	r7,lr
8000ab0c:	1a 97       	mov	r7,sp
8000ab0e:	20 1d       	sub	sp,4
8000ab10:	f0 1f 00 10 	mcall	8000ab50 <udd_ctrl_init+0x48>
8000ab14:	18 98       	mov	r8,r12
8000ab16:	ef 48 ff fc 	st.w	r7[-4],r8
8000ab1a:	fe 68 02 20 	mov	r8,-130528
8000ab1e:	30 19       	mov	r9,1
8000ab20:	91 09       	st.w	r8[0x0],r9
8000ab22:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ab26:	f0 1f 00 0c 	mcall	8000ab54 <udd_ctrl_init+0x4c>
8000ab2a:	fe 68 01 60 	mov	r8,-130720
8000ab2e:	30 29       	mov	r9,2
8000ab30:	91 09       	st.w	r8[0x0],r9
8000ab32:	48 a8       	lddpc	r8,8000ab58 <udd_ctrl_init+0x50>
8000ab34:	30 09       	mov	r9,0
8000ab36:	91 49       	st.w	r8[0x10],r9
8000ab38:	48 88       	lddpc	r8,8000ab58 <udd_ctrl_init+0x50>
8000ab3a:	30 09       	mov	r9,0
8000ab3c:	91 59       	st.w	r8[0x14],r9
8000ab3e:	48 79       	lddpc	r9,8000ab58 <udd_ctrl_init+0x50>
8000ab40:	30 08       	mov	r8,0
8000ab42:	b2 68       	st.h	r9[0xc],r8
8000ab44:	48 68       	lddpc	r8,8000ab5c <udd_ctrl_init+0x54>
8000ab46:	30 09       	mov	r9,0
8000ab48:	91 09       	st.w	r8[0x0],r9
8000ab4a:	2f fd       	sub	sp,-4
8000ab4c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab50:	80 00       	ld.sh	r0,r0[0x0]
8000ab52:	99 90       	st.w	r12[0x24],r0
8000ab54:	80 00       	ld.sh	r0,r0[0x0]
8000ab56:	99 ae       	st.w	r12[0x28],lr
8000ab58:	00 00       	add	r0,r0
8000ab5a:	0d e4       	ld.ub	r4,r6[0x6]
8000ab5c:	00 00       	add	r0,r0
8000ab5e:	07 b8       	ld.ub	r8,r3[0x3]

8000ab60 <udd_ctrl_setup_received>:
8000ab60:	eb cd 40 80 	pushm	r7,lr
8000ab64:	1a 97       	mov	r7,sp
8000ab66:	20 3d       	sub	sp,12
8000ab68:	4c b8       	lddpc	r8,8000ac94 <udd_ctrl_setup_received+0x134>
8000ab6a:	70 08       	ld.w	r8,r8[0x0]
8000ab6c:	58 08       	cp.w	r8,0
8000ab6e:	c0 50       	breq	8000ab78 <udd_ctrl_setup_received+0x18>
8000ab70:	f0 1f 00 4a 	mcall	8000ac98 <udd_ctrl_setup_received+0x138>
8000ab74:	f0 1f 00 4a 	mcall	8000ac9c <udd_ctrl_setup_received+0x13c>
8000ab78:	fe 68 01 30 	mov	r8,-130768
8000ab7c:	70 08       	ld.w	r8,r8[0x0]
8000ab7e:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000ab82:	b5 88       	lsr	r8,0x14
8000ab84:	58 88       	cp.w	r8,8
8000ab86:	c0 80       	breq	8000ab96 <udd_ctrl_setup_received+0x36>
8000ab88:	f0 1f 00 46 	mcall	8000aca0 <udd_ctrl_setup_received+0x140>
8000ab8c:	fe 68 01 60 	mov	r8,-130720
8000ab90:	30 49       	mov	r9,4
8000ab92:	91 09       	st.w	r8[0x0],r9
8000ab94:	c7 d8       	rjmp	8000ac8e <udd_ctrl_setup_received+0x12e>
8000ab96:	fc 18 e0 00 	movh	r8,0xe000
8000ab9a:	ef 48 ff fc 	st.w	r7[-4],r8
8000ab9e:	30 08       	mov	r8,0
8000aba0:	ef 68 ff fb 	st.b	r7[-5],r8
8000aba4:	c1 38       	rjmp	8000abca <udd_ctrl_setup_received+0x6a>
8000aba6:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000abaa:	4b f8       	lddpc	r8,8000aca4 <udd_ctrl_setup_received+0x144>
8000abac:	10 09       	add	r9,r8
8000abae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000abb2:	11 88       	ld.ub	r8,r8[0x0]
8000abb4:	b2 88       	st.b	r9[0x0],r8
8000abb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000abba:	2f f8       	sub	r8,-1
8000abbc:	ef 48 ff fc 	st.w	r7[-4],r8
8000abc0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000abc4:	2f f8       	sub	r8,-1
8000abc6:	ef 68 ff fb 	st.b	r7[-5],r8
8000abca:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000abce:	30 78       	mov	r8,7
8000abd0:	f0 09 18 00 	cp.b	r9,r8
8000abd4:	fe 98 ff e9 	brls	8000aba6 <udd_ctrl_setup_received+0x46>
8000abd8:	4b 38       	lddpc	r8,8000aca4 <udd_ctrl_setup_received+0x144>
8000abda:	90 18       	ld.sh	r8,r8[0x2]
8000abdc:	5c 88       	casts.h	r8
8000abde:	5c c8       	swap.bh	r8
8000abe0:	5c 88       	casts.h	r8
8000abe2:	4b 19       	lddpc	r9,8000aca4 <udd_ctrl_setup_received+0x144>
8000abe4:	b2 18       	st.h	r9[0x2],r8
8000abe6:	4b 08       	lddpc	r8,8000aca4 <udd_ctrl_setup_received+0x144>
8000abe8:	90 28       	ld.sh	r8,r8[0x4]
8000abea:	5c 88       	casts.h	r8
8000abec:	5c c8       	swap.bh	r8
8000abee:	5c 88       	casts.h	r8
8000abf0:	4a d9       	lddpc	r9,8000aca4 <udd_ctrl_setup_received+0x144>
8000abf2:	b2 28       	st.h	r9[0x4],r8
8000abf4:	4a c8       	lddpc	r8,8000aca4 <udd_ctrl_setup_received+0x144>
8000abf6:	90 38       	ld.sh	r8,r8[0x6]
8000abf8:	5c 88       	casts.h	r8
8000abfa:	5c c8       	swap.bh	r8
8000abfc:	5c 88       	casts.h	r8
8000abfe:	4a a9       	lddpc	r9,8000aca4 <udd_ctrl_setup_received+0x144>
8000ac00:	b2 38       	st.h	r9[0x6],r8
8000ac02:	f0 1f 00 2a 	mcall	8000aca8 <udd_ctrl_setup_received+0x148>
8000ac06:	18 98       	mov	r8,r12
8000ac08:	ec 18 00 01 	eorl	r8,0x1
8000ac0c:	5c 58       	castu.b	r8
8000ac0e:	c0 80       	breq	8000ac1e <udd_ctrl_setup_received+0xbe>
8000ac10:	f0 1f 00 24 	mcall	8000aca0 <udd_ctrl_setup_received+0x140>
8000ac14:	fe 68 01 60 	mov	r8,-130720
8000ac18:	30 49       	mov	r9,4
8000ac1a:	91 09       	st.w	r8[0x0],r9
8000ac1c:	c3 98       	rjmp	8000ac8e <udd_ctrl_setup_received+0x12e>
8000ac1e:	fe 68 01 60 	mov	r8,-130720
8000ac22:	30 49       	mov	r9,4
8000ac24:	91 09       	st.w	r8[0x0],r9
8000ac26:	4a 08       	lddpc	r8,8000aca4 <udd_ctrl_setup_received+0x144>
8000ac28:	11 88       	ld.ub	r8,r8[0x0]
8000ac2a:	10 99       	mov	r9,r8
8000ac2c:	30 08       	mov	r8,0
8000ac2e:	f0 09 18 00 	cp.b	r9,r8
8000ac32:	c0 d4       	brge	8000ac4c <udd_ctrl_setup_received+0xec>
8000ac34:	49 e9       	lddpc	r9,8000acac <udd_ctrl_setup_received+0x14c>
8000ac36:	30 08       	mov	r8,0
8000ac38:	b2 08       	st.h	r9[0x0],r8
8000ac3a:	49 e9       	lddpc	r9,8000acb0 <udd_ctrl_setup_received+0x150>
8000ac3c:	30 08       	mov	r8,0
8000ac3e:	b2 08       	st.h	r9[0x0],r8
8000ac40:	49 58       	lddpc	r8,8000ac94 <udd_ctrl_setup_received+0x134>
8000ac42:	30 29       	mov	r9,2
8000ac44:	91 09       	st.w	r8[0x0],r9
8000ac46:	f0 1f 00 1c 	mcall	8000acb4 <udd_ctrl_setup_received+0x154>
8000ac4a:	c2 28       	rjmp	8000ac8e <udd_ctrl_setup_received+0x12e>
8000ac4c:	49 68       	lddpc	r8,8000aca4 <udd_ctrl_setup_received+0x144>
8000ac4e:	90 38       	ld.sh	r8,r8[0x6]
8000ac50:	58 08       	cp.w	r8,0
8000ac52:	c0 41       	brne	8000ac5a <udd_ctrl_setup_received+0xfa>
8000ac54:	f0 1f 00 19 	mcall	8000acb8 <udd_ctrl_setup_received+0x158>
8000ac58:	c1 b8       	rjmp	8000ac8e <udd_ctrl_setup_received+0x12e>
8000ac5a:	49 59       	lddpc	r9,8000acac <udd_ctrl_setup_received+0x14c>
8000ac5c:	30 08       	mov	r8,0
8000ac5e:	b2 08       	st.h	r9[0x0],r8
8000ac60:	49 49       	lddpc	r9,8000acb0 <udd_ctrl_setup_received+0x150>
8000ac62:	30 08       	mov	r8,0
8000ac64:	b2 08       	st.h	r9[0x0],r8
8000ac66:	48 c8       	lddpc	r8,8000ac94 <udd_ctrl_setup_received+0x134>
8000ac68:	30 19       	mov	r9,1
8000ac6a:	91 09       	st.w	r8[0x0],r9
8000ac6c:	fe 68 01 60 	mov	r8,-130720
8000ac70:	31 09       	mov	r9,16
8000ac72:	91 09       	st.w	r8[0x0],r9
8000ac74:	f0 1f 00 12 	mcall	8000acbc <udd_ctrl_setup_received+0x15c>
8000ac78:	18 98       	mov	r8,r12
8000ac7a:	ef 48 ff f4 	st.w	r7[-12],r8
8000ac7e:	fe 68 01 f0 	mov	r8,-130576
8000ac82:	31 09       	mov	r9,16
8000ac84:	91 09       	st.w	r8[0x0],r9
8000ac86:	ee fc ff f4 	ld.w	r12,r7[-12]
8000ac8a:	f0 1f 00 0e 	mcall	8000acc0 <udd_ctrl_setup_received+0x160>
8000ac8e:	2f dd       	sub	sp,-12
8000ac90:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ac94:	00 00       	add	r0,r0
8000ac96:	07 b8       	ld.ub	r8,r3[0x3]
8000ac98:	80 00       	ld.sh	r0,r0[0x0]
8000ac9a:	b1 88       	lsr	r8,0x10
8000ac9c:	80 00       	ld.sh	r0,r0[0x0]
8000ac9e:	ab 08       	ld.d	r8,r5
8000aca0:	80 00       	ld.sh	r0,r0[0x0]
8000aca2:	b0 d0       	st.b	r8[0x5],r0
8000aca4:	00 00       	add	r0,r0
8000aca6:	0d e4       	ld.ub	r4,r6[0x6]
8000aca8:	80 00       	ld.sh	r0,r0[0x0]
8000acaa:	df 60       	acall	0x3d8
8000acac:	00 00       	add	r0,r0
8000acae:	07 bc       	ld.ub	r12,r3[0x3]
8000acb0:	00 00       	add	r0,r0
8000acb2:	07 be       	ld.ub	lr,r3[0x3]
8000acb4:	80 00       	ld.sh	r0,r0[0x0]
8000acb6:	ac c4       	st.b	r6[0x4],r4
8000acb8:	80 00       	ld.sh	r0,r0[0x0]
8000acba:	b0 f0       	st.b	r8[0x7],r0
8000acbc:	80 00       	ld.sh	r0,r0[0x0]
8000acbe:	99 90       	st.w	r12[0x24],r0
8000acc0:	80 00       	ld.sh	r0,r0[0x0]
8000acc2:	99 ae       	st.w	r12[0x28],lr

8000acc4 <udd_ctrl_in_sent>:
8000acc4:	eb cd 40 80 	pushm	r7,lr
8000acc8:	1a 97       	mov	r7,sp
8000acca:	20 4d       	sub	sp,16
8000accc:	f0 1f 00 5c 	mcall	8000ae3c <udd_ctrl_in_sent+0x178>
8000acd0:	18 98       	mov	r8,r12
8000acd2:	ef 48 ff fc 	st.w	r7[-4],r8
8000acd6:	fe 68 02 20 	mov	r8,-130528
8000acda:	30 19       	mov	r9,1
8000acdc:	91 09       	st.w	r8[0x0],r9
8000acde:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ace2:	f0 1f 00 58 	mcall	8000ae40 <udd_ctrl_in_sent+0x17c>
8000ace6:	4d 88       	lddpc	r8,8000ae44 <udd_ctrl_in_sent+0x180>
8000ace8:	70 08       	ld.w	r8,r8[0x0]
8000acea:	58 38       	cp.w	r8,3
8000acec:	c0 61       	brne	8000acf8 <udd_ctrl_in_sent+0x34>
8000acee:	f0 1f 00 57 	mcall	8000ae48 <udd_ctrl_in_sent+0x184>
8000acf2:	f0 1f 00 57 	mcall	8000ae4c <udd_ctrl_in_sent+0x188>
8000acf6:	c9 f8       	rjmp	8000ae34 <udd_ctrl_in_sent+0x170>
8000acf8:	4d 68       	lddpc	r8,8000ae50 <udd_ctrl_in_sent+0x18c>
8000acfa:	90 69       	ld.sh	r9,r8[0xc]
8000acfc:	4d 68       	lddpc	r8,8000ae54 <udd_ctrl_in_sent+0x190>
8000acfe:	90 08       	ld.sh	r8,r8[0x0]
8000ad00:	10 19       	sub	r9,r8
8000ad02:	ef 59 ff f0 	st.h	r7[-16],r9
8000ad06:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ad0a:	30 08       	mov	r8,0
8000ad0c:	f0 09 19 00 	cp.h	r9,r8
8000ad10:	c2 b1       	brne	8000ad66 <udd_ctrl_in_sent+0xa2>
8000ad12:	4d 28       	lddpc	r8,8000ae58 <udd_ctrl_in_sent+0x194>
8000ad14:	90 09       	ld.sh	r9,r8[0x0]
8000ad16:	4d 08       	lddpc	r8,8000ae54 <udd_ctrl_in_sent+0x190>
8000ad18:	90 08       	ld.sh	r8,r8[0x0]
8000ad1a:	f2 08 00 08 	add	r8,r9,r8
8000ad1e:	5c 88       	casts.h	r8
8000ad20:	4c e9       	lddpc	r9,8000ae58 <udd_ctrl_in_sent+0x194>
8000ad22:	b2 08       	st.h	r9[0x0],r8
8000ad24:	4c b8       	lddpc	r8,8000ae50 <udd_ctrl_in_sent+0x18c>
8000ad26:	90 39       	ld.sh	r9,r8[0x6]
8000ad28:	4c c8       	lddpc	r8,8000ae58 <udd_ctrl_in_sent+0x194>
8000ad2a:	90 08       	ld.sh	r8,r8[0x0]
8000ad2c:	f0 09 19 00 	cp.h	r9,r8
8000ad30:	c0 50       	breq	8000ad3a <udd_ctrl_in_sent+0x76>
8000ad32:	4c b8       	lddpc	r8,8000ae5c <udd_ctrl_in_sent+0x198>
8000ad34:	11 88       	ld.ub	r8,r8[0x0]
8000ad36:	58 08       	cp.w	r8,0
8000ad38:	c0 40       	breq	8000ad40 <udd_ctrl_in_sent+0x7c>
8000ad3a:	f0 1f 00 4a 	mcall	8000ae60 <udd_ctrl_in_sent+0x19c>
8000ad3e:	c7 b8       	rjmp	8000ae34 <udd_ctrl_in_sent+0x170>
8000ad40:	4c 48       	lddpc	r8,8000ae50 <udd_ctrl_in_sent+0x18c>
8000ad42:	70 58       	ld.w	r8,r8[0x14]
8000ad44:	58 08       	cp.w	r8,0
8000ad46:	c1 00       	breq	8000ad66 <udd_ctrl_in_sent+0xa2>
8000ad48:	4c 28       	lddpc	r8,8000ae50 <udd_ctrl_in_sent+0x18c>
8000ad4a:	70 58       	ld.w	r8,r8[0x14]
8000ad4c:	5d 18       	icall	r8
8000ad4e:	18 98       	mov	r8,r12
8000ad50:	ec 18 00 01 	eorl	r8,0x1
8000ad54:	5c 58       	castu.b	r8
8000ad56:	c0 81       	brne	8000ad66 <udd_ctrl_in_sent+0xa2>
8000ad58:	4b f9       	lddpc	r9,8000ae54 <udd_ctrl_in_sent+0x190>
8000ad5a:	30 08       	mov	r8,0
8000ad5c:	b2 08       	st.h	r9[0x0],r8
8000ad5e:	4b d8       	lddpc	r8,8000ae50 <udd_ctrl_in_sent+0x18c>
8000ad60:	90 68       	ld.sh	r8,r8[0xc]
8000ad62:	ef 58 ff f0 	st.h	r7[-16],r8
8000ad66:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ad6a:	33 f8       	mov	r8,63
8000ad6c:	f0 09 19 00 	cp.h	r9,r8
8000ad70:	e0 88 00 09 	brls	8000ad82 <udd_ctrl_in_sent+0xbe>
8000ad74:	34 08       	mov	r8,64
8000ad76:	ef 58 ff f0 	st.h	r7[-16],r8
8000ad7a:	4b 99       	lddpc	r9,8000ae5c <udd_ctrl_in_sent+0x198>
8000ad7c:	30 08       	mov	r8,0
8000ad7e:	b2 88       	st.b	r9[0x0],r8
8000ad80:	c0 48       	rjmp	8000ad88 <udd_ctrl_in_sent+0xc4>
8000ad82:	4b 79       	lddpc	r9,8000ae5c <udd_ctrl_in_sent+0x198>
8000ad84:	30 18       	mov	r8,1
8000ad86:	b2 88       	st.b	r9[0x0],r8
8000ad88:	fc 18 e0 00 	movh	r8,0xe000
8000ad8c:	ef 48 ff f4 	st.w	r7[-12],r8
8000ad90:	4b 08       	lddpc	r8,8000ae50 <udd_ctrl_in_sent+0x18c>
8000ad92:	70 29       	ld.w	r9,r8[0x8]
8000ad94:	4b 08       	lddpc	r8,8000ae54 <udd_ctrl_in_sent+0x190>
8000ad96:	90 08       	ld.sh	r8,r8[0x0]
8000ad98:	5c 78       	castu.h	r8
8000ad9a:	f2 08 00 08 	add	r8,r9,r8
8000ad9e:	ef 48 ff f8 	st.w	r7[-8],r8
8000ada2:	f0 1f 00 27 	mcall	8000ae3c <udd_ctrl_in_sent+0x178>
8000ada6:	18 98       	mov	r8,r12
8000ada8:	ef 48 ff fc 	st.w	r7[-4],r8
8000adac:	fe 68 01 30 	mov	r8,-130768
8000adb0:	70 08       	ld.w	r8,r8[0x0]
8000adb2:	e2 18 00 02 	andl	r8,0x2,COH
8000adb6:	c0 90       	breq	8000adc8 <udd_ctrl_in_sent+0x104>
8000adb8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000adbc:	f0 1f 00 21 	mcall	8000ae40 <udd_ctrl_in_sent+0x17c>
8000adc0:	4a 18       	lddpc	r8,8000ae44 <udd_ctrl_in_sent+0x180>
8000adc2:	30 49       	mov	r9,4
8000adc4:	91 09       	st.w	r8[0x0],r9
8000adc6:	c3 78       	rjmp	8000ae34 <udd_ctrl_in_sent+0x170>
8000adc8:	30 08       	mov	r8,0
8000adca:	ef 68 ff f3 	st.b	r7[-13],r8
8000adce:	c1 68       	rjmp	8000adfa <udd_ctrl_in_sent+0x136>
8000add0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000add4:	11 88       	ld.ub	r8,r8[0x0]
8000add6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000adda:	b2 88       	st.b	r9[0x0],r8
8000addc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ade0:	2f f8       	sub	r8,-1
8000ade2:	ef 48 ff f4 	st.w	r7[-12],r8
8000ade6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000adea:	2f f8       	sub	r8,-1
8000adec:	ef 48 ff f8 	st.w	r7[-8],r8
8000adf0:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000adf4:	2f f8       	sub	r8,-1
8000adf6:	ef 68 ff f3 	st.b	r7[-13],r8
8000adfa:	ef 38 ff f3 	ld.ub	r8,r7[-13]
8000adfe:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ae02:	f0 09 19 00 	cp.h	r9,r8
8000ae06:	fe 9b ff e5 	brhi	8000add0 <udd_ctrl_in_sent+0x10c>
8000ae0a:	49 38       	lddpc	r8,8000ae54 <udd_ctrl_in_sent+0x190>
8000ae0c:	90 08       	ld.sh	r8,r8[0x0]
8000ae0e:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000ae12:	f2 08 00 08 	add	r8,r9,r8
8000ae16:	5c 88       	casts.h	r8
8000ae18:	48 f9       	lddpc	r9,8000ae54 <udd_ctrl_in_sent+0x190>
8000ae1a:	b2 08       	st.h	r9[0x0],r8
8000ae1c:	fe 68 01 60 	mov	r8,-130720
8000ae20:	30 19       	mov	r9,1
8000ae22:	91 09       	st.w	r8[0x0],r9
8000ae24:	fe 68 01 f0 	mov	r8,-130576
8000ae28:	30 19       	mov	r9,1
8000ae2a:	91 09       	st.w	r8[0x0],r9
8000ae2c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ae30:	f0 1f 00 04 	mcall	8000ae40 <udd_ctrl_in_sent+0x17c>
8000ae34:	2f cd       	sub	sp,-16
8000ae36:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ae3a:	00 00       	add	r0,r0
8000ae3c:	80 00       	ld.sh	r0,r0[0x0]
8000ae3e:	99 90       	st.w	r12[0x24],r0
8000ae40:	80 00       	ld.sh	r0,r0[0x0]
8000ae42:	99 ae       	st.w	r12[0x28],lr
8000ae44:	00 00       	add	r0,r0
8000ae46:	07 b8       	ld.ub	r8,r3[0x3]
8000ae48:	80 00       	ld.sh	r0,r0[0x0]
8000ae4a:	b1 88       	lsr	r8,0x10
8000ae4c:	80 00       	ld.sh	r0,r0[0x0]
8000ae4e:	ab 08       	ld.d	r8,r5
8000ae50:	00 00       	add	r0,r0
8000ae52:	0d e4       	ld.ub	r4,r6[0x6]
8000ae54:	00 00       	add	r0,r0
8000ae56:	07 be       	ld.ub	lr,r3[0x3]
8000ae58:	00 00       	add	r0,r0
8000ae5a:	07 bc       	ld.ub	r12,r3[0x3]
8000ae5c:	00 00       	add	r0,r0
8000ae5e:	07 e8       	ld.ub	r8,r3[0x6]
8000ae60:	80 00       	ld.sh	r0,r0[0x0]
8000ae62:	b1 44       	asr	r4,0x10

8000ae64 <udd_ctrl_out_received>:
8000ae64:	eb cd 40 80 	pushm	r7,lr
8000ae68:	1a 97       	mov	r7,sp
8000ae6a:	20 4d       	sub	sp,16
8000ae6c:	4f 18       	lddpc	r8,8000b030 <udd_ctrl_out_received+0x1cc>
8000ae6e:	70 08       	ld.w	r8,r8[0x0]
8000ae70:	58 18       	cp.w	r8,1
8000ae72:	c1 10       	breq	8000ae94 <udd_ctrl_out_received+0x30>
8000ae74:	4e f8       	lddpc	r8,8000b030 <udd_ctrl_out_received+0x1cc>
8000ae76:	70 08       	ld.w	r8,r8[0x0]
8000ae78:	58 28       	cp.w	r8,2
8000ae7a:	c0 50       	breq	8000ae84 <udd_ctrl_out_received+0x20>
8000ae7c:	4e d8       	lddpc	r8,8000b030 <udd_ctrl_out_received+0x1cc>
8000ae7e:	70 08       	ld.w	r8,r8[0x0]
8000ae80:	58 48       	cp.w	r8,4
8000ae82:	c0 41       	brne	8000ae8a <udd_ctrl_out_received+0x26>
8000ae84:	f0 1f 00 6c 	mcall	8000b034 <udd_ctrl_out_received+0x1d0>
8000ae88:	c0 38       	rjmp	8000ae8e <udd_ctrl_out_received+0x2a>
8000ae8a:	f0 1f 00 6c 	mcall	8000b038 <udd_ctrl_out_received+0x1d4>
8000ae8e:	f0 1f 00 6c 	mcall	8000b03c <udd_ctrl_out_received+0x1d8>
8000ae92:	cc b8       	rjmp	8000b028 <udd_ctrl_out_received+0x1c4>
8000ae94:	fe 68 01 30 	mov	r8,-130768
8000ae98:	70 08       	ld.w	r8,r8[0x0]
8000ae9a:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000ae9e:	b5 88       	lsr	r8,0x14
8000aea0:	ef 58 ff f6 	st.h	r7[-10],r8
8000aea4:	4e 78       	lddpc	r8,8000b040 <udd_ctrl_out_received+0x1dc>
8000aea6:	90 68       	ld.sh	r8,r8[0xc]
8000aea8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000aeac:	4e 68       	lddpc	r8,8000b044 <udd_ctrl_out_received+0x1e0>
8000aeae:	90 08       	ld.sh	r8,r8[0x0]
8000aeb0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000aeb4:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000aeb8:	f4 08 00 08 	add	r8,r10,r8
8000aebc:	10 39       	cp.w	r9,r8
8000aebe:	c0 84       	brge	8000aece <udd_ctrl_out_received+0x6a>
8000aec0:	4e 08       	lddpc	r8,8000b040 <udd_ctrl_out_received+0x1dc>
8000aec2:	90 69       	ld.sh	r9,r8[0xc]
8000aec4:	4e 08       	lddpc	r8,8000b044 <udd_ctrl_out_received+0x1e0>
8000aec6:	90 08       	ld.sh	r8,r8[0x0]
8000aec8:	10 19       	sub	r9,r8
8000aeca:	ef 59 ff f6 	st.h	r7[-10],r9
8000aece:	fc 18 e0 00 	movh	r8,0xe000
8000aed2:	ef 48 ff f8 	st.w	r7[-8],r8
8000aed6:	4d b8       	lddpc	r8,8000b040 <udd_ctrl_out_received+0x1dc>
8000aed8:	70 29       	ld.w	r9,r8[0x8]
8000aeda:	4d b8       	lddpc	r8,8000b044 <udd_ctrl_out_received+0x1e0>
8000aedc:	90 08       	ld.sh	r8,r8[0x0]
8000aede:	5c 78       	castu.h	r8
8000aee0:	f2 08 00 08 	add	r8,r9,r8
8000aee4:	ef 48 ff fc 	st.w	r7[-4],r8
8000aee8:	30 08       	mov	r8,0
8000aeea:	ef 68 ff f5 	st.b	r7[-11],r8
8000aeee:	c1 68       	rjmp	8000af1a <udd_ctrl_out_received+0xb6>
8000aef0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aef4:	11 88       	ld.ub	r8,r8[0x0]
8000aef6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aefa:	b2 88       	st.b	r9[0x0],r8
8000aefc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af00:	2f f8       	sub	r8,-1
8000af02:	ef 48 ff fc 	st.w	r7[-4],r8
8000af06:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af0a:	2f f8       	sub	r8,-1
8000af0c:	ef 48 ff f8 	st.w	r7[-8],r8
8000af10:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000af14:	2f f8       	sub	r8,-1
8000af16:	ef 68 ff f5 	st.b	r7[-11],r8
8000af1a:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000af1e:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000af22:	f0 09 19 00 	cp.h	r9,r8
8000af26:	fe 9b ff e5 	brhi	8000aef0 <udd_ctrl_out_received+0x8c>
8000af2a:	4c 78       	lddpc	r8,8000b044 <udd_ctrl_out_received+0x1e0>
8000af2c:	90 08       	ld.sh	r8,r8[0x0]
8000af2e:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000af32:	f2 08 00 08 	add	r8,r9,r8
8000af36:	5c 88       	casts.h	r8
8000af38:	4c 39       	lddpc	r9,8000b044 <udd_ctrl_out_received+0x1e0>
8000af3a:	b2 08       	st.h	r9[0x0],r8
8000af3c:	ef 09 ff f6 	ld.sh	r9,r7[-10]
8000af40:	34 08       	mov	r8,64
8000af42:	f0 09 19 00 	cp.h	r9,r8
8000af46:	c1 11       	brne	8000af68 <udd_ctrl_out_received+0x104>
8000af48:	4b e8       	lddpc	r8,8000b040 <udd_ctrl_out_received+0x1dc>
8000af4a:	90 38       	ld.sh	r8,r8[0x6]
8000af4c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000af50:	4b e8       	lddpc	r8,8000b048 <udd_ctrl_out_received+0x1e4>
8000af52:	90 08       	ld.sh	r8,r8[0x0]
8000af54:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000af58:	4b b8       	lddpc	r8,8000b044 <udd_ctrl_out_received+0x1e0>
8000af5a:	90 08       	ld.sh	r8,r8[0x0]
8000af5c:	5c 78       	castu.h	r8
8000af5e:	f4 08 00 08 	add	r8,r10,r8
8000af62:	10 39       	cp.w	r9,r8
8000af64:	e0 89 00 20 	brgt	8000afa4 <udd_ctrl_out_received+0x140>
8000af68:	4b 78       	lddpc	r8,8000b044 <udd_ctrl_out_received+0x1e0>
8000af6a:	90 08       	ld.sh	r8,r8[0x0]
8000af6c:	4b 59       	lddpc	r9,8000b040 <udd_ctrl_out_received+0x1dc>
8000af6e:	b2 68       	st.h	r9[0xc],r8
8000af70:	4b 48       	lddpc	r8,8000b040 <udd_ctrl_out_received+0x1dc>
8000af72:	70 58       	ld.w	r8,r8[0x14]
8000af74:	58 08       	cp.w	r8,0
8000af76:	c1 00       	breq	8000af96 <udd_ctrl_out_received+0x132>
8000af78:	4b 28       	lddpc	r8,8000b040 <udd_ctrl_out_received+0x1dc>
8000af7a:	70 58       	ld.w	r8,r8[0x14]
8000af7c:	5d 18       	icall	r8
8000af7e:	18 98       	mov	r8,r12
8000af80:	ec 18 00 01 	eorl	r8,0x1
8000af84:	5c 58       	castu.b	r8
8000af86:	c0 80       	breq	8000af96 <udd_ctrl_out_received+0x132>
8000af88:	f0 1f 00 2c 	mcall	8000b038 <udd_ctrl_out_received+0x1d4>
8000af8c:	fe 68 01 60 	mov	r8,-130720
8000af90:	30 29       	mov	r9,2
8000af92:	91 09       	st.w	r8[0x0],r9
8000af94:	c4 a8       	rjmp	8000b028 <udd_ctrl_out_received+0x1c4>
8000af96:	fe 68 01 60 	mov	r8,-130720
8000af9a:	30 29       	mov	r9,2
8000af9c:	91 09       	st.w	r8[0x0],r9
8000af9e:	f0 1f 00 2c 	mcall	8000b04c <udd_ctrl_out_received+0x1e8>
8000afa2:	c4 38       	rjmp	8000b028 <udd_ctrl_out_received+0x1c4>
8000afa4:	4a 78       	lddpc	r8,8000b040 <udd_ctrl_out_received+0x1dc>
8000afa6:	90 69       	ld.sh	r9,r8[0xc]
8000afa8:	4a 78       	lddpc	r8,8000b044 <udd_ctrl_out_received+0x1e0>
8000afaa:	90 08       	ld.sh	r8,r8[0x0]
8000afac:	f0 09 19 00 	cp.h	r9,r8
8000afb0:	c2 71       	brne	8000affe <udd_ctrl_out_received+0x19a>
8000afb2:	4a 48       	lddpc	r8,8000b040 <udd_ctrl_out_received+0x1dc>
8000afb4:	70 58       	ld.w	r8,r8[0x14]
8000afb6:	58 08       	cp.w	r8,0
8000afb8:	c0 81       	brne	8000afc8 <udd_ctrl_out_received+0x164>
8000afba:	f0 1f 00 20 	mcall	8000b038 <udd_ctrl_out_received+0x1d4>
8000afbe:	fe 68 01 60 	mov	r8,-130720
8000afc2:	30 29       	mov	r9,2
8000afc4:	91 09       	st.w	r8[0x0],r9
8000afc6:	c3 18       	rjmp	8000b028 <udd_ctrl_out_received+0x1c4>
8000afc8:	49 e8       	lddpc	r8,8000b040 <udd_ctrl_out_received+0x1dc>
8000afca:	70 58       	ld.w	r8,r8[0x14]
8000afcc:	5d 18       	icall	r8
8000afce:	18 98       	mov	r8,r12
8000afd0:	ec 18 00 01 	eorl	r8,0x1
8000afd4:	5c 58       	castu.b	r8
8000afd6:	c0 80       	breq	8000afe6 <udd_ctrl_out_received+0x182>
8000afd8:	f0 1f 00 18 	mcall	8000b038 <udd_ctrl_out_received+0x1d4>
8000afdc:	fe 68 01 60 	mov	r8,-130720
8000afe0:	30 29       	mov	r9,2
8000afe2:	91 09       	st.w	r8[0x0],r9
8000afe4:	c2 28       	rjmp	8000b028 <udd_ctrl_out_received+0x1c4>
8000afe6:	49 98       	lddpc	r8,8000b048 <udd_ctrl_out_received+0x1e4>
8000afe8:	90 09       	ld.sh	r9,r8[0x0]
8000afea:	49 78       	lddpc	r8,8000b044 <udd_ctrl_out_received+0x1e0>
8000afec:	90 08       	ld.sh	r8,r8[0x0]
8000afee:	f2 08 00 08 	add	r8,r9,r8
8000aff2:	5c 88       	casts.h	r8
8000aff4:	49 59       	lddpc	r9,8000b048 <udd_ctrl_out_received+0x1e4>
8000aff6:	b2 08       	st.h	r9[0x0],r8
8000aff8:	49 39       	lddpc	r9,8000b044 <udd_ctrl_out_received+0x1e0>
8000affa:	30 08       	mov	r8,0
8000affc:	b2 08       	st.h	r9[0x0],r8
8000affe:	fe 68 01 60 	mov	r8,-130720
8000b002:	30 29       	mov	r9,2
8000b004:	91 09       	st.w	r8[0x0],r9
8000b006:	fe 68 01 60 	mov	r8,-130720
8000b00a:	31 09       	mov	r9,16
8000b00c:	91 09       	st.w	r8[0x0],r9
8000b00e:	f0 1f 00 11 	mcall	8000b050 <udd_ctrl_out_received+0x1ec>
8000b012:	18 98       	mov	r8,r12
8000b014:	ef 48 ff f0 	st.w	r7[-16],r8
8000b018:	fe 68 01 f0 	mov	r8,-130576
8000b01c:	31 09       	mov	r9,16
8000b01e:	91 09       	st.w	r8[0x0],r9
8000b020:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b024:	f0 1f 00 0c 	mcall	8000b054 <udd_ctrl_out_received+0x1f0>
8000b028:	2f cd       	sub	sp,-16
8000b02a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b02e:	00 00       	add	r0,r0
8000b030:	00 00       	add	r0,r0
8000b032:	07 b8       	ld.ub	r8,r3[0x3]
8000b034:	80 00       	ld.sh	r0,r0[0x0]
8000b036:	b1 88       	lsr	r8,0x10
8000b038:	80 00       	ld.sh	r0,r0[0x0]
8000b03a:	b0 d0       	st.b	r8[0x5],r0
8000b03c:	80 00       	ld.sh	r0,r0[0x0]
8000b03e:	ab 08       	ld.d	r8,r5
8000b040:	00 00       	add	r0,r0
8000b042:	0d e4       	ld.ub	r4,r6[0x6]
8000b044:	00 00       	add	r0,r0
8000b046:	07 be       	ld.ub	lr,r3[0x3]
8000b048:	00 00       	add	r0,r0
8000b04a:	07 bc       	ld.ub	r12,r3[0x3]
8000b04c:	80 00       	ld.sh	r0,r0[0x0]
8000b04e:	b0 f0       	st.b	r8[0x7],r0
8000b050:	80 00       	ld.sh	r0,r0[0x0]
8000b052:	99 90       	st.w	r12[0x24],r0
8000b054:	80 00       	ld.sh	r0,r0[0x0]
8000b056:	99 ae       	st.w	r12[0x28],lr

8000b058 <udd_ctrl_underflow>:
8000b058:	eb cd 40 80 	pushm	r7,lr
8000b05c:	1a 97       	mov	r7,sp
8000b05e:	fe 68 01 30 	mov	r8,-130768
8000b062:	70 08       	ld.w	r8,r8[0x0]
8000b064:	e2 18 00 02 	andl	r8,0x2,COH
8000b068:	c1 21       	brne	8000b08c <udd_ctrl_underflow+0x34>
8000b06a:	48 b8       	lddpc	r8,8000b094 <udd_ctrl_underflow+0x3c>
8000b06c:	70 08       	ld.w	r8,r8[0x0]
8000b06e:	58 18       	cp.w	r8,1
8000b070:	c0 41       	brne	8000b078 <udd_ctrl_underflow+0x20>
8000b072:	f0 1f 00 0a 	mcall	8000b098 <udd_ctrl_underflow+0x40>
8000b076:	c0 c8       	rjmp	8000b08e <udd_ctrl_underflow+0x36>
8000b078:	48 78       	lddpc	r8,8000b094 <udd_ctrl_underflow+0x3c>
8000b07a:	70 08       	ld.w	r8,r8[0x0]
8000b07c:	58 48       	cp.w	r8,4
8000b07e:	c0 81       	brne	8000b08e <udd_ctrl_underflow+0x36>
8000b080:	fe 68 01 f0 	mov	r8,-130576
8000b084:	e8 69 00 00 	mov	r9,524288
8000b088:	91 09       	st.w	r8[0x0],r9
8000b08a:	c0 28       	rjmp	8000b08e <udd_ctrl_underflow+0x36>
8000b08c:	d7 03       	nop
8000b08e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b092:	00 00       	add	r0,r0
8000b094:	00 00       	add	r0,r0
8000b096:	07 b8       	ld.ub	r8,r3[0x3]
8000b098:	80 00       	ld.sh	r0,r0[0x0]
8000b09a:	b0 f0       	st.b	r8[0x7],r0

8000b09c <udd_ctrl_overflow>:
8000b09c:	eb cd 40 80 	pushm	r7,lr
8000b0a0:	1a 97       	mov	r7,sp
8000b0a2:	fe 68 01 30 	mov	r8,-130768
8000b0a6:	70 08       	ld.w	r8,r8[0x0]
8000b0a8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b0ac:	5c 58       	castu.b	r8
8000b0ae:	c0 b1       	brne	8000b0c4 <udd_ctrl_overflow+0x28>
8000b0b0:	48 78       	lddpc	r8,8000b0cc <udd_ctrl_overflow+0x30>
8000b0b2:	70 08       	ld.w	r8,r8[0x0]
8000b0b4:	58 38       	cp.w	r8,3
8000b0b6:	c0 81       	brne	8000b0c6 <udd_ctrl_overflow+0x2a>
8000b0b8:	fe 68 01 f0 	mov	r8,-130576
8000b0bc:	e8 69 00 00 	mov	r9,524288
8000b0c0:	91 09       	st.w	r8[0x0],r9
8000b0c2:	c0 28       	rjmp	8000b0c6 <udd_ctrl_overflow+0x2a>
8000b0c4:	d7 03       	nop
8000b0c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b0ca:	00 00       	add	r0,r0
8000b0cc:	00 00       	add	r0,r0
8000b0ce:	07 b8       	ld.ub	r8,r3[0x3]

8000b0d0 <udd_ctrl_stall_data>:
8000b0d0:	eb cd 40 80 	pushm	r7,lr
8000b0d4:	1a 97       	mov	r7,sp
8000b0d6:	48 68       	lddpc	r8,8000b0ec <udd_ctrl_stall_data+0x1c>
8000b0d8:	30 59       	mov	r9,5
8000b0da:	91 09       	st.w	r8[0x0],r9
8000b0dc:	fe 68 01 f0 	mov	r8,-130576
8000b0e0:	e8 69 00 00 	mov	r9,524288
8000b0e4:	91 09       	st.w	r8[0x0],r9
8000b0e6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b0ea:	00 00       	add	r0,r0
8000b0ec:	00 00       	add	r0,r0
8000b0ee:	07 b8       	ld.ub	r8,r3[0x3]

8000b0f0 <udd_ctrl_send_zlp_in>:
8000b0f0:	eb cd 40 80 	pushm	r7,lr
8000b0f4:	1a 97       	mov	r7,sp
8000b0f6:	20 1d       	sub	sp,4
8000b0f8:	49 08       	lddpc	r8,8000b138 <udd_ctrl_send_zlp_in+0x48>
8000b0fa:	30 39       	mov	r9,3
8000b0fc:	91 09       	st.w	r8[0x0],r9
8000b0fe:	f0 1f 00 10 	mcall	8000b13c <udd_ctrl_send_zlp_in+0x4c>
8000b102:	18 98       	mov	r8,r12
8000b104:	ef 48 ff fc 	st.w	r7[-4],r8
8000b108:	fe 68 01 60 	mov	r8,-130720
8000b10c:	30 19       	mov	r9,1
8000b10e:	91 09       	st.w	r8[0x0],r9
8000b110:	fe 68 01 f0 	mov	r8,-130576
8000b114:	30 19       	mov	r9,1
8000b116:	91 09       	st.w	r8[0x0],r9
8000b118:	fe 68 01 60 	mov	r8,-130720
8000b11c:	30 89       	mov	r9,8
8000b11e:	91 09       	st.w	r8[0x0],r9
8000b120:	fe 68 01 f0 	mov	r8,-130576
8000b124:	30 89       	mov	r9,8
8000b126:	91 09       	st.w	r8[0x0],r9
8000b128:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b12c:	f0 1f 00 05 	mcall	8000b140 <udd_ctrl_send_zlp_in+0x50>
8000b130:	2f fd       	sub	sp,-4
8000b132:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b136:	00 00       	add	r0,r0
8000b138:	00 00       	add	r0,r0
8000b13a:	07 b8       	ld.ub	r8,r3[0x3]
8000b13c:	80 00       	ld.sh	r0,r0[0x0]
8000b13e:	99 90       	st.w	r12[0x24],r0
8000b140:	80 00       	ld.sh	r0,r0[0x0]
8000b142:	99 ae       	st.w	r12[0x28],lr

8000b144 <udd_ctrl_send_zlp_out>:
8000b144:	eb cd 40 80 	pushm	r7,lr
8000b148:	1a 97       	mov	r7,sp
8000b14a:	20 1d       	sub	sp,4
8000b14c:	48 c8       	lddpc	r8,8000b17c <udd_ctrl_send_zlp_out+0x38>
8000b14e:	30 49       	mov	r9,4
8000b150:	91 09       	st.w	r8[0x0],r9
8000b152:	f0 1f 00 0c 	mcall	8000b180 <udd_ctrl_send_zlp_out+0x3c>
8000b156:	18 98       	mov	r8,r12
8000b158:	ef 48 ff fc 	st.w	r7[-4],r8
8000b15c:	fe 68 01 60 	mov	r8,-130720
8000b160:	31 09       	mov	r9,16
8000b162:	91 09       	st.w	r8[0x0],r9
8000b164:	fe 68 01 f0 	mov	r8,-130576
8000b168:	31 09       	mov	r9,16
8000b16a:	91 09       	st.w	r8[0x0],r9
8000b16c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b170:	f0 1f 00 05 	mcall	8000b184 <udd_ctrl_send_zlp_out+0x40>
8000b174:	2f fd       	sub	sp,-4
8000b176:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b17a:	00 00       	add	r0,r0
8000b17c:	00 00       	add	r0,r0
8000b17e:	07 b8       	ld.ub	r8,r3[0x3]
8000b180:	80 00       	ld.sh	r0,r0[0x0]
8000b182:	99 90       	st.w	r12[0x24],r0
8000b184:	80 00       	ld.sh	r0,r0[0x0]
8000b186:	99 ae       	st.w	r12[0x28],lr

8000b188 <udd_ctrl_endofrequest>:
8000b188:	eb cd 40 80 	pushm	r7,lr
8000b18c:	1a 97       	mov	r7,sp
8000b18e:	48 58       	lddpc	r8,8000b1a0 <udd_ctrl_endofrequest+0x18>
8000b190:	70 48       	ld.w	r8,r8[0x10]
8000b192:	58 08       	cp.w	r8,0
8000b194:	c0 40       	breq	8000b19c <udd_ctrl_endofrequest+0x14>
8000b196:	48 38       	lddpc	r8,8000b1a0 <udd_ctrl_endofrequest+0x18>
8000b198:	70 48       	ld.w	r8,r8[0x10]
8000b19a:	5d 18       	icall	r8
8000b19c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1a0:	00 00       	add	r0,r0
8000b1a2:	0d e4       	ld.ub	r4,r6[0x6]

8000b1a4 <udd_ctrl_interrupt>:
8000b1a4:	eb cd 40 80 	pushm	r7,lr
8000b1a8:	1a 97       	mov	r7,sp
8000b1aa:	fe 68 00 00 	mov	r8,-131072
8000b1ae:	70 18       	ld.w	r8,r8[0x4]
8000b1b0:	e2 18 10 00 	andl	r8,0x1000,COH
8000b1b4:	c0 31       	brne	8000b1ba <udd_ctrl_interrupt+0x16>
8000b1b6:	30 08       	mov	r8,0
8000b1b8:	c4 c8       	rjmp	8000b250 <udd_ctrl_interrupt+0xac>
8000b1ba:	fe 68 02 20 	mov	r8,-130528
8000b1be:	31 09       	mov	r9,16
8000b1c0:	91 09       	st.w	r8[0x0],r9
8000b1c2:	fe 68 02 20 	mov	r8,-130528
8000b1c6:	30 89       	mov	r9,8
8000b1c8:	91 09       	st.w	r8[0x0],r9
8000b1ca:	fe 68 01 30 	mov	r8,-130768
8000b1ce:	70 08       	ld.w	r8,r8[0x0]
8000b1d0:	e2 18 00 04 	andl	r8,0x4,COH
8000b1d4:	c0 50       	breq	8000b1de <udd_ctrl_interrupt+0x3a>
8000b1d6:	f0 1f 00 21 	mcall	8000b258 <udd_ctrl_interrupt+0xb4>
8000b1da:	30 18       	mov	r8,1
8000b1dc:	c3 a8       	rjmp	8000b250 <udd_ctrl_interrupt+0xac>
8000b1de:	fe 68 01 30 	mov	r8,-130768
8000b1e2:	70 08       	ld.w	r8,r8[0x0]
8000b1e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b1e8:	5c 58       	castu.b	r8
8000b1ea:	c0 c0       	breq	8000b202 <udd_ctrl_interrupt+0x5e>
8000b1ec:	fe 68 01 c0 	mov	r8,-130624
8000b1f0:	70 08       	ld.w	r8,r8[0x0]
8000b1f2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b1f6:	5c 58       	castu.b	r8
8000b1f8:	c0 50       	breq	8000b202 <udd_ctrl_interrupt+0x5e>
8000b1fa:	f0 1f 00 19 	mcall	8000b25c <udd_ctrl_interrupt+0xb8>
8000b1fe:	30 18       	mov	r8,1
8000b200:	c2 88       	rjmp	8000b250 <udd_ctrl_interrupt+0xac>
8000b202:	fe 68 01 30 	mov	r8,-130768
8000b206:	70 08       	ld.w	r8,r8[0x0]
8000b208:	e2 18 00 02 	andl	r8,0x2,COH
8000b20c:	c0 50       	breq	8000b216 <udd_ctrl_interrupt+0x72>
8000b20e:	f0 1f 00 15 	mcall	8000b260 <udd_ctrl_interrupt+0xbc>
8000b212:	30 18       	mov	r8,1
8000b214:	c1 e8       	rjmp	8000b250 <udd_ctrl_interrupt+0xac>
8000b216:	fe 68 01 30 	mov	r8,-130768
8000b21a:	70 08       	ld.w	r8,r8[0x0]
8000b21c:	e2 18 00 08 	andl	r8,0x8,COH
8000b220:	c0 90       	breq	8000b232 <udd_ctrl_interrupt+0x8e>
8000b222:	fe 68 01 60 	mov	r8,-130720
8000b226:	30 89       	mov	r9,8
8000b228:	91 09       	st.w	r8[0x0],r9
8000b22a:	f0 1f 00 0f 	mcall	8000b264 <udd_ctrl_interrupt+0xc0>
8000b22e:	30 18       	mov	r8,1
8000b230:	c1 08       	rjmp	8000b250 <udd_ctrl_interrupt+0xac>
8000b232:	fe 68 01 30 	mov	r8,-130768
8000b236:	70 08       	ld.w	r8,r8[0x0]
8000b238:	e2 18 00 10 	andl	r8,0x10,COH
8000b23c:	c0 90       	breq	8000b24e <udd_ctrl_interrupt+0xaa>
8000b23e:	fe 68 01 60 	mov	r8,-130720
8000b242:	31 09       	mov	r9,16
8000b244:	91 09       	st.w	r8[0x0],r9
8000b246:	f0 1f 00 09 	mcall	8000b268 <udd_ctrl_interrupt+0xc4>
8000b24a:	30 18       	mov	r8,1
8000b24c:	c0 28       	rjmp	8000b250 <udd_ctrl_interrupt+0xac>
8000b24e:	30 08       	mov	r8,0
8000b250:	10 9c       	mov	r12,r8
8000b252:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b256:	00 00       	add	r0,r0
8000b258:	80 00       	ld.sh	r0,r0[0x0]
8000b25a:	ab 60       	lsl	r0,0xa
8000b25c:	80 00       	ld.sh	r0,r0[0x0]
8000b25e:	ac c4       	st.b	r6[0x4],r4
8000b260:	80 00       	ld.sh	r0,r0[0x0]
8000b262:	ae 64       	st.h	r7[0xc],r4
8000b264:	80 00       	ld.sh	r0,r0[0x0]
8000b266:	b0 9c       	st.b	r8[0x1],r12
8000b268:	80 00       	ld.sh	r0,r0[0x0]
8000b26a:	b0 58       	st.h	r8[0xa],r8

8000b26c <udd_ep_job_table_reset>:
8000b26c:	eb cd 40 80 	pushm	r7,lr
8000b270:	1a 97       	mov	r7,sp
8000b272:	20 1d       	sub	sp,4
8000b274:	30 08       	mov	r8,0
8000b276:	ef 68 ff ff 	st.b	r7[-1],r8
8000b27a:	c2 28       	rjmp	8000b2be <udd_ep_job_table_reset+0x52>
8000b27c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b280:	49 5a       	lddpc	r10,8000b2d4 <udd_ep_job_table_reset+0x68>
8000b282:	12 98       	mov	r8,r9
8000b284:	a3 68       	lsl	r8,0x2
8000b286:	12 08       	add	r8,r9
8000b288:	a3 68       	lsl	r8,0x2
8000b28a:	f4 08 00 09 	add	r9,r10,r8
8000b28e:	72 08       	ld.w	r8,r9[0x0]
8000b290:	30 0a       	mov	r10,0
8000b292:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b296:	93 08       	st.w	r9[0x0],r8
8000b298:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b29c:	48 ea       	lddpc	r10,8000b2d4 <udd_ep_job_table_reset+0x68>
8000b29e:	12 98       	mov	r8,r9
8000b2a0:	a3 68       	lsl	r8,0x2
8000b2a2:	12 08       	add	r8,r9
8000b2a4:	a3 68       	lsl	r8,0x2
8000b2a6:	f4 08 00 09 	add	r9,r10,r8
8000b2aa:	72 08       	ld.w	r8,r9[0x0]
8000b2ac:	30 0a       	mov	r10,0
8000b2ae:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b2b2:	93 08       	st.w	r9[0x0],r8
8000b2b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b2b8:	2f f8       	sub	r8,-1
8000b2ba:	ef 68 ff ff 	st.b	r7[-1],r8
8000b2be:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b2c2:	30 18       	mov	r8,1
8000b2c4:	f0 09 18 00 	cp.b	r9,r8
8000b2c8:	fe 98 ff da 	brls	8000b27c <udd_ep_job_table_reset+0x10>
8000b2cc:	2f fd       	sub	sp,-4
8000b2ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b2d2:	00 00       	add	r0,r0
8000b2d4:	00 00       	add	r0,r0
8000b2d6:	07 c0       	ld.ub	r0,r3[0x4]

8000b2d8 <udd_ep_job_table_kill>:
8000b2d8:	eb cd 40 80 	pushm	r7,lr
8000b2dc:	1a 97       	mov	r7,sp
8000b2de:	20 1d       	sub	sp,4
8000b2e0:	30 08       	mov	r8,0
8000b2e2:	ef 68 ff ff 	st.b	r7[-1],r8
8000b2e6:	c1 98       	rjmp	8000b318 <udd_ep_job_table_kill+0x40>
8000b2e8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b2ec:	2f f8       	sub	r8,-1
8000b2ee:	5c 58       	castu.b	r8
8000b2f0:	10 9a       	mov	r10,r8
8000b2f2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b2f6:	12 98       	mov	r8,r9
8000b2f8:	a3 68       	lsl	r8,0x2
8000b2fa:	12 08       	add	r8,r9
8000b2fc:	a3 68       	lsl	r8,0x2
8000b2fe:	10 99       	mov	r9,r8
8000b300:	48 b8       	lddpc	r8,8000b32c <udd_ep_job_table_kill+0x54>
8000b302:	f2 08 00 08 	add	r8,r9,r8
8000b306:	30 1b       	mov	r11,1
8000b308:	10 9c       	mov	r12,r8
8000b30a:	f0 1f 00 0a 	mcall	8000b330 <udd_ep_job_table_kill+0x58>
8000b30e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b312:	2f f8       	sub	r8,-1
8000b314:	ef 68 ff ff 	st.b	r7[-1],r8
8000b318:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b31c:	30 18       	mov	r8,1
8000b31e:	f0 09 18 00 	cp.b	r9,r8
8000b322:	fe 98 ff e3 	brls	8000b2e8 <udd_ep_job_table_kill+0x10>
8000b326:	2f fd       	sub	sp,-4
8000b328:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b32c:	00 00       	add	r0,r0
8000b32e:	07 c0       	ld.ub	r0,r3[0x4]
8000b330:	80 00       	ld.sh	r0,r0[0x0]
8000b332:	b3 80       	lsr	r0,0x12

8000b334 <udd_ep_abort_job>:
8000b334:	eb cd 40 80 	pushm	r7,lr
8000b338:	1a 97       	mov	r7,sp
8000b33a:	20 1d       	sub	sp,4
8000b33c:	18 98       	mov	r8,r12
8000b33e:	ef 68 ff fc 	st.b	r7[-4],r8
8000b342:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b346:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000b34a:	ef 68 ff fc 	st.b	r7[-4],r8
8000b34e:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000b352:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b356:	f0 c9 00 01 	sub	r9,r8,1
8000b35a:	12 98       	mov	r8,r9
8000b35c:	a3 68       	lsl	r8,0x2
8000b35e:	12 08       	add	r8,r9
8000b360:	a3 68       	lsl	r8,0x2
8000b362:	10 99       	mov	r9,r8
8000b364:	48 58       	lddpc	r8,8000b378 <udd_ep_abort_job+0x44>
8000b366:	f2 08 00 08 	add	r8,r9,r8
8000b36a:	30 1b       	mov	r11,1
8000b36c:	10 9c       	mov	r12,r8
8000b36e:	f0 1f 00 04 	mcall	8000b37c <udd_ep_abort_job+0x48>
8000b372:	2f fd       	sub	sp,-4
8000b374:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b378:	00 00       	add	r0,r0
8000b37a:	07 c0       	ld.ub	r0,r3[0x4]
8000b37c:	80 00       	ld.sh	r0,r0[0x0]
8000b37e:	b3 80       	lsr	r0,0x12

8000b380 <udd_ep_finish_job>:
8000b380:	eb cd 40 80 	pushm	r7,lr
8000b384:	1a 97       	mov	r7,sp
8000b386:	20 3d       	sub	sp,12
8000b388:	ef 4c ff fc 	st.w	r7[-4],r12
8000b38c:	16 99       	mov	r9,r11
8000b38e:	14 98       	mov	r8,r10
8000b390:	ef 69 ff f8 	st.b	r7[-8],r9
8000b394:	ef 68 ff f4 	st.b	r7[-12],r8
8000b398:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b39c:	70 08       	ld.w	r8,r8[0x0]
8000b39e:	e6 18 80 00 	andh	r8,0x8000,COH
8000b3a2:	c2 b0       	breq	8000b3f8 <udd_ep_finish_job+0x78>
8000b3a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b3a8:	72 08       	ld.w	r8,r9[0x0]
8000b3aa:	30 0a       	mov	r10,0
8000b3ac:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000b3b0:	93 08       	st.w	r9[0x0],r8
8000b3b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b3b6:	70 48       	ld.w	r8,r8[0x10]
8000b3b8:	58 08       	cp.w	r8,0
8000b3ba:	c2 10       	breq	8000b3fc <udd_ep_finish_job+0x7c>
8000b3bc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b3c0:	a3 68       	lsl	r8,0x2
8000b3c2:	e0 38 ff 00 	sub	r8,130816
8000b3c6:	70 08       	ld.w	r8,r8[0x0]
8000b3c8:	e2 18 01 00 	andl	r8,0x100,COH
8000b3cc:	c0 90       	breq	8000b3de <udd_ep_finish_job+0x5e>
8000b3ce:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b3d2:	ea 18 ff ff 	orh	r8,0xffff
8000b3d6:	e8 18 ff 80 	orl	r8,0xff80
8000b3da:	ef 68 ff f4 	st.b	r7[-12],r8
8000b3de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b3e2:	70 48       	ld.w	r8,r8[0x10]
8000b3e4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b3e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b3ec:	72 2b       	ld.w	r11,r9[0x8]
8000b3ee:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000b3f2:	12 9c       	mov	r12,r9
8000b3f4:	5d 18       	icall	r8
8000b3f6:	c0 48       	rjmp	8000b3fe <udd_ep_finish_job+0x7e>
8000b3f8:	d7 03       	nop
8000b3fa:	c0 28       	rjmp	8000b3fe <udd_ep_finish_job+0x7e>
8000b3fc:	d7 03       	nop
8000b3fe:	2f dd       	sub	sp,-12
8000b400:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b404 <udd_ep_trans_done>:
8000b404:	eb cd 40 80 	pushm	r7,lr
8000b408:	1a 97       	mov	r7,sp
8000b40a:	20 5d       	sub	sp,20
8000b40c:	18 98       	mov	r8,r12
8000b40e:	ef 68 ff ec 	st.b	r7[-20],r8
8000b412:	30 08       	mov	r8,0
8000b414:	ef 48 ff f0 	st.w	r7[-16],r8
8000b418:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b41c:	f0 c9 00 01 	sub	r9,r8,1
8000b420:	12 98       	mov	r8,r9
8000b422:	a3 68       	lsl	r8,0x2
8000b424:	12 08       	add	r8,r9
8000b426:	a3 68       	lsl	r8,0x2
8000b428:	10 99       	mov	r9,r8
8000b42a:	fe f8 02 1e 	ld.w	r8,pc[542]
8000b42e:	f2 08 00 08 	add	r8,r9,r8
8000b432:	ef 48 ff f4 	st.w	r7[-12],r8
8000b436:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b43a:	70 08       	ld.w	r8,r8[0x0]
8000b43c:	e6 18 80 00 	andh	r8,0x8000,COH
8000b440:	e0 80 01 00 	breq	8000b640 <udd_ep_trans_done+0x23c>
8000b444:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b448:	70 39       	ld.w	r9,r8[0xc]
8000b44a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b44e:	70 28       	ld.w	r8,r8[0x8]
8000b450:	10 39       	cp.w	r9,r8
8000b452:	e0 80 00 b7 	breq	8000b5c0 <udd_ep_trans_done+0x1bc>
8000b456:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b45a:	70 29       	ld.w	r9,r8[0x8]
8000b45c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b460:	70 38       	ld.w	r8,r8[0xc]
8000b462:	10 19       	sub	r9,r8
8000b464:	ef 49 ff f8 	st.w	r7[-8],r9
8000b468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b46c:	e0 58 00 00 	cp.w	r8,65536
8000b470:	e0 88 00 0a 	brls	8000b484 <udd_ep_trans_done+0x80>
8000b474:	e0 78 00 00 	mov	r8,65536
8000b478:	ef 48 ff f8 	st.w	r7[-8],r8
8000b47c:	30 08       	mov	r8,0
8000b47e:	ef 48 ff f0 	st.w	r7[-16],r8
8000b482:	c0 68       	rjmp	8000b48e <udd_ep_trans_done+0x8a>
8000b484:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b488:	b1 68       	lsl	r8,0x10
8000b48a:	ef 48 ff f0 	st.w	r7[-16],r8
8000b48e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b492:	a3 68       	lsl	r8,0x2
8000b494:	e0 38 ff 00 	sub	r8,130816
8000b498:	70 08       	ld.w	r8,r8[0x0]
8000b49a:	e2 18 01 00 	andl	r8,0x100,COH
8000b49e:	c2 10       	breq	8000b4e0 <udd_ep_trans_done+0xdc>
8000b4a0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b4a4:	a3 68       	lsl	r8,0x2
8000b4a6:	e0 38 ff 00 	sub	r8,130816
8000b4aa:	70 08       	ld.w	r8,r8[0x0]
8000b4ac:	e2 18 00 70 	andl	r8,0x70,COH
8000b4b0:	a5 88       	lsr	r8,0x4
8000b4b2:	30 89       	mov	r9,8
8000b4b4:	f2 08 09 48 	lsl	r8,r9,r8
8000b4b8:	20 18       	sub	r8,1
8000b4ba:	10 99       	mov	r9,r8
8000b4bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b4c0:	f3 e8 00 08 	and	r8,r9,r8
8000b4c4:	c3 10       	breq	8000b526 <udd_ep_trans_done+0x122>
8000b4c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b4ca:	a3 b8       	sbr	r8,0x3
8000b4cc:	ef 48 ff f0 	st.w	r7[-16],r8
8000b4d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b4d4:	72 08       	ld.w	r8,r9[0x0]
8000b4d6:	30 0a       	mov	r10,0
8000b4d8:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000b4dc:	93 08       	st.w	r9[0x0],r8
8000b4de:	c2 58       	rjmp	8000b528 <udd_ep_trans_done+0x124>
8000b4e0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b4e4:	a3 68       	lsl	r8,0x2
8000b4e6:	e0 38 ff 00 	sub	r8,130816
8000b4ea:	70 08       	ld.w	r8,r8[0x0]
8000b4ec:	e2 18 18 00 	andl	r8,0x1800,COH
8000b4f0:	ab 98       	lsr	r8,0xb
8000b4f2:	58 18       	cp.w	r8,1
8000b4f4:	c1 21       	brne	8000b518 <udd_ep_trans_done+0x114>
8000b4f6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b4fa:	a3 68       	lsl	r8,0x2
8000b4fc:	e0 38 ff 00 	sub	r8,130816
8000b500:	70 08       	ld.w	r8,r8[0x0]
8000b502:	e2 18 00 70 	andl	r8,0x70,COH
8000b506:	a5 88       	lsr	r8,0x4
8000b508:	30 89       	mov	r9,8
8000b50a:	f2 08 09 48 	lsl	r8,r9,r8
8000b50e:	10 99       	mov	r9,r8
8000b510:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b514:	10 39       	cp.w	r9,r8
8000b516:	c0 93       	brcs	8000b528 <udd_ep_trans_done+0x124>
8000b518:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b51c:	e8 18 00 14 	orl	r8,0x14
8000b520:	ef 48 ff f0 	st.w	r7[-16],r8
8000b524:	c0 28       	rjmp	8000b528 <udd_ep_trans_done+0x124>
8000b526:	d7 03       	nop
8000b528:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b52c:	a5 68       	lsl	r8,0x4
8000b52e:	e0 38 fd 00 	sub	r8,130304
8000b532:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b536:	72 1a       	ld.w	r10,r9[0x4]
8000b538:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b53c:	72 39       	ld.w	r9,r9[0xc]
8000b53e:	f4 09 00 09 	add	r9,r10,r9
8000b542:	91 19       	st.w	r8[0x4],r9
8000b544:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b548:	e8 18 00 21 	orl	r8,0x21
8000b54c:	ef 48 ff f0 	st.w	r7[-16],r8
8000b550:	f0 1f 00 3f 	mcall	8000b64c <udd_ep_trans_done+0x248>
8000b554:	18 98       	mov	r8,r12
8000b556:	ef 48 ff fc 	st.w	r7[-4],r8
8000b55a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b55e:	a5 68       	lsl	r8,0x4
8000b560:	e0 38 fd 00 	sub	r8,130304
8000b564:	70 38       	ld.w	r8,r8[0xc]
8000b566:	e2 18 00 10 	andl	r8,0x10,COH
8000b56a:	c2 11       	brne	8000b5ac <udd_ep_trans_done+0x1a8>
8000b56c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b570:	a5 68       	lsl	r8,0x4
8000b572:	e0 38 fd 00 	sub	r8,130304
8000b576:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000b57a:	91 29       	st.w	r8[0x8],r9
8000b57c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b580:	70 39       	ld.w	r9,r8[0xc]
8000b582:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b586:	10 09       	add	r9,r8
8000b588:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b58c:	91 39       	st.w	r8[0xc],r9
8000b58e:	fe 68 00 00 	mov	r8,-131072
8000b592:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b596:	20 19       	sub	r9,1
8000b598:	fc 1a 02 00 	movh	r10,0x200
8000b59c:	f4 09 09 49 	lsl	r9,r10,r9
8000b5a0:	91 69       	st.w	r8[0x18],r9
8000b5a2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b5a6:	f0 1f 00 2b 	mcall	8000b650 <udd_ep_trans_done+0x24c>
8000b5aa:	c4 c8       	rjmp	8000b642 <udd_ep_trans_done+0x23e>
8000b5ac:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b5b0:	f0 1f 00 28 	mcall	8000b650 <udd_ep_trans_done+0x24c>
8000b5b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b5b8:	70 39       	ld.w	r9,r8[0xc]
8000b5ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b5be:	91 29       	st.w	r8[0x8],r9
8000b5c0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b5c4:	a3 68       	lsl	r8,0x2
8000b5c6:	e0 38 ff 00 	sub	r8,130816
8000b5ca:	70 08       	ld.w	r8,r8[0x0]
8000b5cc:	e2 18 01 00 	andl	r8,0x100,COH
8000b5d0:	c2 f0       	breq	8000b62e <udd_ep_trans_done+0x22a>
8000b5d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b5d6:	70 08       	ld.w	r8,r8[0x0]
8000b5d8:	e6 18 40 00 	andh	r8,0x4000,COH
8000b5dc:	c2 90       	breq	8000b62e <udd_ep_trans_done+0x22a>
8000b5de:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b5e2:	a3 68       	lsl	r8,0x2
8000b5e4:	e0 38 fe a0 	sub	r8,130720
8000b5e8:	30 19       	mov	r9,1
8000b5ea:	91 09       	st.w	r8[0x0],r9
8000b5ec:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b5f0:	a3 68       	lsl	r8,0x2
8000b5f2:	e0 38 fe d0 	sub	r8,130768
8000b5f6:	70 08       	ld.w	r8,r8[0x0]
8000b5f8:	e6 18 00 01 	andh	r8,0x1,COH
8000b5fc:	c0 80       	breq	8000b60c <udd_ep_trans_done+0x208>
8000b5fe:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b602:	a3 68       	lsl	r8,0x2
8000b604:	e0 38 fe 70 	sub	r8,130672
8000b608:	30 19       	mov	r9,1
8000b60a:	91 09       	st.w	r8[0x0],r9
8000b60c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b610:	a3 68       	lsl	r8,0x2
8000b612:	e0 38 fe 10 	sub	r8,130576
8000b616:	30 19       	mov	r9,1
8000b618:	91 09       	st.w	r8[0x0],r9
8000b61a:	fe 68 00 00 	mov	r8,-131072
8000b61e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b622:	e0 6a 10 00 	mov	r10,4096
8000b626:	f4 09 09 49 	lsl	r9,r10,r9
8000b62a:	91 69       	st.w	r8[0x18],r9
8000b62c:	c0 b8       	rjmp	8000b642 <udd_ep_trans_done+0x23e>
8000b62e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b632:	10 9a       	mov	r10,r8
8000b634:	30 0b       	mov	r11,0
8000b636:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b63a:	f0 1f 00 07 	mcall	8000b654 <udd_ep_trans_done+0x250>
8000b63e:	c0 28       	rjmp	8000b642 <udd_ep_trans_done+0x23e>
8000b640:	d7 03       	nop
8000b642:	2f bd       	sub	sp,-20
8000b644:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b648:	00 00       	add	r0,r0
8000b64a:	07 c0       	ld.ub	r0,r3[0x4]
8000b64c:	80 00       	ld.sh	r0,r0[0x0]
8000b64e:	99 90       	st.w	r12[0x24],r0
8000b650:	80 00       	ld.sh	r0,r0[0x0]
8000b652:	99 ae       	st.w	r12[0x28],lr
8000b654:	80 00       	ld.sh	r0,r0[0x0]
8000b656:	b3 80       	lsr	r0,0x12

8000b658 <udd_ep_interrupt>:
8000b658:	eb cd 40 80 	pushm	r7,lr
8000b65c:	1a 97       	mov	r7,sp
8000b65e:	20 3d       	sub	sp,12
8000b660:	30 18       	mov	r8,1
8000b662:	ef 68 ff f7 	st.b	r7[-9],r8
8000b666:	cf 18       	rjmp	8000b848 <udd_ep_interrupt+0x1f0>
8000b668:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b66c:	f0 c9 00 01 	sub	r9,r8,1
8000b670:	12 98       	mov	r8,r9
8000b672:	a3 68       	lsl	r8,0x2
8000b674:	12 08       	add	r8,r9
8000b676:	a3 68       	lsl	r8,0x2
8000b678:	10 99       	mov	r9,r8
8000b67a:	4f a8       	lddpc	r8,8000b860 <udd_ep_interrupt+0x208>
8000b67c:	f2 08 00 08 	add	r8,r9,r8
8000b680:	ef 48 ff f8 	st.w	r7[-8],r8
8000b684:	fe 68 00 00 	mov	r8,-131072
8000b688:	70 49       	ld.w	r9,r8[0x10]
8000b68a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b68e:	20 18       	sub	r8,1
8000b690:	fc 1a 02 00 	movh	r10,0x200
8000b694:	f4 08 09 48 	lsl	r8,r10,r8
8000b698:	f3 e8 00 08 	and	r8,r9,r8
8000b69c:	c4 70       	breq	8000b72a <udd_ep_interrupt+0xd2>
8000b69e:	fe 68 00 00 	mov	r8,-131072
8000b6a2:	70 19       	ld.w	r9,r8[0x4]
8000b6a4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b6a8:	20 18       	sub	r8,1
8000b6aa:	fc 1a 02 00 	movh	r10,0x200
8000b6ae:	f4 08 09 48 	lsl	r8,r10,r8
8000b6b2:	f3 e8 00 08 	and	r8,r9,r8
8000b6b6:	c3 a0       	breq	8000b72a <udd_ep_interrupt+0xd2>
8000b6b8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b6bc:	a5 68       	lsl	r8,0x4
8000b6be:	e0 38 fd 00 	sub	r8,130304
8000b6c2:	70 38       	ld.w	r8,r8[0xc]
8000b6c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b6c8:	5c 58       	castu.b	r8
8000b6ca:	c0 30       	breq	8000b6d0 <udd_ep_interrupt+0x78>
8000b6cc:	30 18       	mov	r8,1
8000b6ce:	cc 58       	rjmp	8000b858 <udd_ep_interrupt+0x200>
8000b6d0:	fe 68 00 00 	mov	r8,-131072
8000b6d4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b6d8:	20 19       	sub	r9,1
8000b6da:	fc 1a 02 00 	movh	r10,0x200
8000b6de:	f4 09 09 49 	lsl	r9,r10,r9
8000b6e2:	91 59       	st.w	r8[0x14],r9
8000b6e4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b6e8:	a5 68       	lsl	r8,0x4
8000b6ea:	e0 38 fd 00 	sub	r8,130304
8000b6ee:	70 38       	ld.w	r8,r8[0xc]
8000b6f0:	b1 88       	lsr	r8,0x10
8000b6f2:	ef 48 ff fc 	st.w	r7[-4],r8
8000b6f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b6fa:	58 08       	cp.w	r8,0
8000b6fc:	c1 00       	breq	8000b71c <udd_ep_interrupt+0xc4>
8000b6fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b702:	70 39       	ld.w	r9,r8[0xc]
8000b704:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b708:	10 19       	sub	r9,r8
8000b70a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b70e:	91 39       	st.w	r8[0xc],r9
8000b710:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b714:	70 39       	ld.w	r9,r8[0xc]
8000b716:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b71a:	91 29       	st.w	r8[0x8],r9
8000b71c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b720:	10 9c       	mov	r12,r8
8000b722:	f0 1f 00 51 	mcall	8000b864 <udd_ep_interrupt+0x20c>
8000b726:	30 18       	mov	r8,1
8000b728:	c9 88       	rjmp	8000b858 <udd_ep_interrupt+0x200>
8000b72a:	fe 68 00 00 	mov	r8,-131072
8000b72e:	70 49       	ld.w	r9,r8[0x10]
8000b730:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b734:	e0 6a 10 00 	mov	r10,4096
8000b738:	f4 08 09 48 	lsl	r8,r10,r8
8000b73c:	f3 e8 00 08 	and	r8,r9,r8
8000b740:	c7 f0       	breq	8000b83e <udd_ep_interrupt+0x1e6>
8000b742:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b746:	a3 68       	lsl	r8,0x2
8000b748:	e0 38 fe 40 	sub	r8,130624
8000b74c:	70 08       	ld.w	r8,r8[0x0]
8000b74e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b752:	5c 58       	castu.b	r8
8000b754:	c2 b0       	breq	8000b7aa <udd_ep_interrupt+0x152>
8000b756:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b75a:	a3 68       	lsl	r8,0x2
8000b75c:	e0 38 fe d0 	sub	r8,130768
8000b760:	70 08       	ld.w	r8,r8[0x0]
8000b762:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b766:	5c 58       	castu.b	r8
8000b768:	c2 10       	breq	8000b7aa <udd_ep_interrupt+0x152>
8000b76a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b76e:	a3 68       	lsl	r8,0x2
8000b770:	e0 38 fd e0 	sub	r8,130528
8000b774:	30 19       	mov	r9,1
8000b776:	91 09       	st.w	r8[0x0],r9
8000b778:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b77c:	a3 68       	lsl	r8,0x2
8000b77e:	e0 38 fe a0 	sub	r8,130720
8000b782:	30 19       	mov	r9,1
8000b784:	91 09       	st.w	r8[0x0],r9
8000b786:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b78a:	a3 68       	lsl	r8,0x2
8000b78c:	e0 38 fd e0 	sub	r8,130528
8000b790:	e0 69 40 00 	mov	r9,16384
8000b794:	91 09       	st.w	r8[0x0],r9
8000b796:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b79a:	10 9a       	mov	r10,r8
8000b79c:	30 0b       	mov	r11,0
8000b79e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b7a2:	f0 1f 00 32 	mcall	8000b868 <udd_ep_interrupt+0x210>
8000b7a6:	30 18       	mov	r8,1
8000b7a8:	c5 88       	rjmp	8000b858 <udd_ep_interrupt+0x200>
8000b7aa:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b7ae:	a3 68       	lsl	r8,0x2
8000b7b0:	e0 38 fe 40 	sub	r8,130624
8000b7b4:	70 08       	ld.w	r8,r8[0x0]
8000b7b6:	e2 18 10 00 	andl	r8,0x1000,COH
8000b7ba:	c4 20       	breq	8000b83e <udd_ep_interrupt+0x1e6>
8000b7bc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b7c0:	a3 68       	lsl	r8,0x2
8000b7c2:	e0 38 fe d0 	sub	r8,130768
8000b7c6:	70 08       	ld.w	r8,r8[0x0]
8000b7c8:	e2 18 30 00 	andl	r8,0x3000,COH
8000b7cc:	ad 88       	lsr	r8,0xc
8000b7ce:	c3 81       	brne	8000b83e <udd_ep_interrupt+0x1e6>
8000b7d0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b7d4:	a3 68       	lsl	r8,0x2
8000b7d6:	e0 38 fd e0 	sub	r8,130528
8000b7da:	e0 69 10 00 	mov	r9,4096
8000b7de:	91 09       	st.w	r8[0x0],r9
8000b7e0:	fe 68 00 00 	mov	r8,-131072
8000b7e4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b7e8:	e0 6a 10 00 	mov	r10,4096
8000b7ec:	f4 09 09 49 	lsl	r9,r10,r9
8000b7f0:	91 59       	st.w	r8[0x14],r9
8000b7f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b7f6:	72 08       	ld.w	r8,r9[0x0]
8000b7f8:	30 0a       	mov	r10,0
8000b7fa:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000b7fe:	93 08       	st.w	r9[0x0],r8
8000b800:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b804:	a3 68       	lsl	r8,0x2
8000b806:	e0 38 ff 00 	sub	r8,130816
8000b80a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b80e:	a3 69       	lsl	r9,0x2
8000b810:	e0 39 ff 00 	sub	r9,130816
8000b814:	72 09       	ld.w	r9,r9[0x0]
8000b816:	a9 d9       	cbr	r9,0x9
8000b818:	91 09       	st.w	r8[0x0],r9
8000b81a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b81e:	a3 68       	lsl	r8,0x2
8000b820:	e0 38 fe 10 	sub	r8,130576
8000b824:	e8 69 00 00 	mov	r9,524288
8000b828:	91 09       	st.w	r8[0x0],r9
8000b82a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b82e:	a3 68       	lsl	r8,0x2
8000b830:	e0 38 fe 10 	sub	r8,130576
8000b834:	e4 69 00 00 	mov	r9,262144
8000b838:	91 09       	st.w	r8[0x0],r9
8000b83a:	30 18       	mov	r8,1
8000b83c:	c0 e8       	rjmp	8000b858 <udd_ep_interrupt+0x200>
8000b83e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000b842:	2f f8       	sub	r8,-1
8000b844:	ef 68 ff f7 	st.b	r7[-9],r8
8000b848:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000b84c:	30 28       	mov	r8,2
8000b84e:	f0 09 18 00 	cp.b	r9,r8
8000b852:	fe 98 ff 0b 	brls	8000b668 <udd_ep_interrupt+0x10>
8000b856:	30 08       	mov	r8,0
8000b858:	10 9c       	mov	r12,r8
8000b85a:	2f dd       	sub	sp,-12
8000b85c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b860:	00 00       	add	r0,r0
8000b862:	07 c0       	ld.ub	r0,r3[0x4]
8000b864:	80 00       	ld.sh	r0,r0[0x0]
8000b866:	b4 04       	st.h	r10[0x0],r4
8000b868:	80 00       	ld.sh	r0,r0[0x0]
8000b86a:	b3 80       	lsr	r0,0x12

8000b86c <_stext>:
8000b86c:	e0 7d 00 00 	mov	sp,65536
8000b870:	fe c0 ce 70 	sub	r0,pc,-12688
8000b874:	e3 b0 00 01 	mtsr	0x4,r0
8000b878:	d5 53       	csrf	0x15
8000b87a:	30 80       	mov	r0,8
8000b87c:	e0 61 02 48 	mov	r1,584
8000b880:	02 30       	cp.w	r0,r1
8000b882:	c0 72       	brcc	8000b890 <idata_load_loop_end>
8000b884:	fe c2 c4 bc 	sub	r2,pc,-15172

8000b888 <idata_load_loop>:
8000b888:	a5 05       	ld.d	r4,r2++
8000b88a:	a1 24       	st.d	r0++,r4
8000b88c:	02 30       	cp.w	r0,r1
8000b88e:	cf d3       	brcs	8000b888 <idata_load_loop>

8000b890 <idata_load_loop_end>:
8000b890:	e0 60 02 48 	mov	r0,584
8000b894:	e0 61 0e 08 	mov	r1,3592
8000b898:	02 30       	cp.w	r0,r1
8000b89a:	c0 62       	brcc	8000b8a6 <udata_clear_loop_end>
8000b89c:	30 02       	mov	r2,0
8000b89e:	30 03       	mov	r3,0

8000b8a0 <udata_clear_loop>:
8000b8a0:	a1 22       	st.d	r0++,r2
8000b8a2:	02 30       	cp.w	r0,r1
8000b8a4:	cf e3       	brcs	8000b8a0 <udata_clear_loop>

8000b8a6 <udata_clear_loop_end>:
8000b8a6:	fe cf d6 fe 	sub	pc,pc,-10498
8000b8aa:	d7 03       	nop

8000b8ac <cpu_irq_save>:
8000b8ac:	eb cd 40 80 	pushm	r7,lr
8000b8b0:	1a 97       	mov	r7,sp
8000b8b2:	20 1d       	sub	sp,4
8000b8b4:	e1 b8 00 00 	mfsr	r8,0x0
8000b8b8:	ef 48 ff fc 	st.w	r7[-4],r8
8000b8bc:	d3 03       	ssrf	0x10
8000b8be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8c2:	10 9c       	mov	r12,r8
8000b8c4:	2f fd       	sub	sp,-4
8000b8c6:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b8ca <cpu_irq_restore>:
8000b8ca:	eb cd 40 80 	pushm	r7,lr
8000b8ce:	1a 97       	mov	r7,sp
8000b8d0:	20 1d       	sub	sp,4
8000b8d2:	ef 4c ff fc 	st.w	r7[-4],r12
8000b8d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8da:	e3 b8 00 00 	mtsr	0x0,r8
8000b8de:	2f fd       	sub	sp,-4
8000b8e0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b8e4 <osc_enable>:
8000b8e4:	eb cd 40 80 	pushm	r7,lr
8000b8e8:	1a 97       	mov	r7,sp
8000b8ea:	20 3d       	sub	sp,12
8000b8ec:	18 98       	mov	r8,r12
8000b8ee:	ef 68 ff f4 	st.b	r7[-12],r8
8000b8f2:	f0 1f 00 2b 	mcall	8000b99c <osc_enable+0xb8>
8000b8f6:	18 98       	mov	r8,r12
8000b8f8:	ef 48 ff f8 	st.w	r7[-8],r8
8000b8fc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b900:	58 18       	cp.w	r8,1
8000b902:	c1 c0       	breq	8000b93a <osc_enable+0x56>
8000b904:	58 28       	cp.w	r8,2
8000b906:	c3 10       	breq	8000b968 <osc_enable+0x84>
8000b908:	58 08       	cp.w	r8,0
8000b90a:	c4 21       	brne	8000b98e <osc_enable+0xaa>
8000b90c:	e0 68 03 00 	mov	r8,768
8000b910:	ef 48 ff fc 	st.w	r7[-4],r8
8000b914:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b918:	e8 18 00 07 	orl	r8,0x7
8000b91c:	ef 48 ff fc 	st.w	r7[-4],r8
8000b920:	fe 78 0c 00 	mov	r8,-62464
8000b924:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b928:	91 a9       	st.w	r8[0x28],r9
8000b92a:	fe 78 0c 00 	mov	r8,-62464
8000b92e:	fe 79 0c 00 	mov	r9,-62464
8000b932:	72 09       	ld.w	r9,r9[0x0]
8000b934:	a3 a9       	sbr	r9,0x2
8000b936:	91 09       	st.w	r8[0x0],r9
8000b938:	c2 b8       	rjmp	8000b98e <osc_enable+0xaa>
8000b93a:	e0 68 03 00 	mov	r8,768
8000b93e:	ef 48 ff fc 	st.w	r7[-4],r8
8000b942:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b946:	e8 18 00 07 	orl	r8,0x7
8000b94a:	ef 48 ff fc 	st.w	r7[-4],r8
8000b94e:	fe 78 0c 00 	mov	r8,-62464
8000b952:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b956:	91 b9       	st.w	r8[0x2c],r9
8000b958:	fe 78 0c 00 	mov	r8,-62464
8000b95c:	fe 79 0c 00 	mov	r9,-62464
8000b960:	72 09       	ld.w	r9,r9[0x0]
8000b962:	a3 b9       	sbr	r9,0x3
8000b964:	91 09       	st.w	r8[0x0],r9
8000b966:	c1 48       	rjmp	8000b98e <osc_enable+0xaa>
8000b968:	e2 68 00 00 	mov	r8,131072
8000b96c:	ef 48 ff fc 	st.w	r7[-4],r8
8000b970:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b974:	a9 a8       	sbr	r8,0x8
8000b976:	ef 48 ff fc 	st.w	r7[-4],r8
8000b97a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b97e:	a1 a8       	sbr	r8,0x0
8000b980:	ef 48 ff fc 	st.w	r7[-4],r8
8000b984:	fe 78 0c 00 	mov	r8,-62464
8000b988:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b98c:	91 c9       	st.w	r8[0x30],r9
8000b98e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b992:	f0 1f 00 04 	mcall	8000b9a0 <osc_enable+0xbc>
8000b996:	2f dd       	sub	sp,-12
8000b998:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b99c:	80 00       	ld.sh	r0,r0[0x0]
8000b99e:	b8 ac       	st.b	r12[0x2],r12
8000b9a0:	80 00       	ld.sh	r0,r0[0x0]
8000b9a2:	b8 ca       	st.b	r12[0x4],r10

8000b9a4 <osc_is_ready>:
8000b9a4:	eb cd 40 80 	pushm	r7,lr
8000b9a8:	1a 97       	mov	r7,sp
8000b9aa:	20 1d       	sub	sp,4
8000b9ac:	18 98       	mov	r8,r12
8000b9ae:	ef 68 ff fc 	st.b	r7[-4],r8
8000b9b2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b9b6:	58 18       	cp.w	r8,1
8000b9b8:	c0 d0       	breq	8000b9d2 <osc_is_ready+0x2e>
8000b9ba:	58 28       	cp.w	r8,2
8000b9bc:	c1 30       	breq	8000b9e2 <osc_is_ready+0x3e>
8000b9be:	58 08       	cp.w	r8,0
8000b9c0:	c1 91       	brne	8000b9f2 <osc_is_ready+0x4e>
8000b9c2:	fe 78 0c 00 	mov	r8,-62464
8000b9c6:	71 58       	ld.w	r8,r8[0x54]
8000b9c8:	e2 18 00 80 	andl	r8,0x80,COH
8000b9cc:	5f 18       	srne	r8
8000b9ce:	5c 58       	castu.b	r8
8000b9d0:	c1 28       	rjmp	8000b9f4 <osc_is_ready+0x50>
8000b9d2:	fe 78 0c 00 	mov	r8,-62464
8000b9d6:	71 58       	ld.w	r8,r8[0x54]
8000b9d8:	e2 18 01 00 	andl	r8,0x100,COH
8000b9dc:	5f 18       	srne	r8
8000b9de:	5c 58       	castu.b	r8
8000b9e0:	c0 a8       	rjmp	8000b9f4 <osc_is_ready+0x50>
8000b9e2:	fe 78 0c 00 	mov	r8,-62464
8000b9e6:	71 58       	ld.w	r8,r8[0x54]
8000b9e8:	e2 18 02 00 	andl	r8,0x200,COH
8000b9ec:	5f 18       	srne	r8
8000b9ee:	5c 58       	castu.b	r8
8000b9f0:	c0 28       	rjmp	8000b9f4 <osc_is_ready+0x50>
8000b9f2:	30 08       	mov	r8,0
8000b9f4:	10 9c       	mov	r12,r8
8000b9f6:	2f fd       	sub	sp,-4
8000b9f8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b9fc <osc_get_rate>:
8000b9fc:	eb cd 40 80 	pushm	r7,lr
8000ba00:	1a 97       	mov	r7,sp
8000ba02:	20 1d       	sub	sp,4
8000ba04:	18 98       	mov	r8,r12
8000ba06:	ef 68 ff fc 	st.b	r7[-4],r8
8000ba0a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ba0e:	58 18       	cp.w	r8,1
8000ba10:	c0 a0       	breq	8000ba24 <osc_get_rate+0x28>
8000ba12:	58 28       	cp.w	r8,2
8000ba14:	c0 d0       	breq	8000ba2e <osc_get_rate+0x32>
8000ba16:	58 08       	cp.w	r8,0
8000ba18:	c0 e1       	brne	8000ba34 <osc_get_rate+0x38>
8000ba1a:	e0 68 1b 00 	mov	r8,6912
8000ba1e:	ea 18 00 b7 	orh	r8,0xb7
8000ba22:	c0 a8       	rjmp	8000ba36 <osc_get_rate+0x3a>
8000ba24:	e0 68 44 00 	mov	r8,17408
8000ba28:	ea 18 00 ac 	orh	r8,0xac
8000ba2c:	c0 58       	rjmp	8000ba36 <osc_get_rate+0x3a>
8000ba2e:	e0 68 80 00 	mov	r8,32768
8000ba32:	c0 28       	rjmp	8000ba36 <osc_get_rate+0x3a>
8000ba34:	30 08       	mov	r8,0
8000ba36:	10 9c       	mov	r12,r8
8000ba38:	2f fd       	sub	sp,-4
8000ba3a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ba3e:	d7 03       	nop

8000ba40 <osc_wait_ready>:
8000ba40:	eb cd 40 80 	pushm	r7,lr
8000ba44:	1a 97       	mov	r7,sp
8000ba46:	20 1d       	sub	sp,4
8000ba48:	18 98       	mov	r8,r12
8000ba4a:	ef 68 ff fc 	st.b	r7[-4],r8
8000ba4e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000ba52:	10 9c       	mov	r12,r8
8000ba54:	f0 1f 00 05 	mcall	8000ba68 <osc_wait_ready+0x28>
8000ba58:	18 98       	mov	r8,r12
8000ba5a:	ec 18 00 01 	eorl	r8,0x1
8000ba5e:	5c 58       	castu.b	r8
8000ba60:	cf 71       	brne	8000ba4e <osc_wait_ready+0xe>
8000ba62:	2f fd       	sub	sp,-4
8000ba64:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ba68:	80 00       	ld.sh	r0,r0[0x0]
8000ba6a:	b9 a4       	sbr	r4,0x18

8000ba6c <pll_config_set_option>:
8000ba6c:	eb cd 40 80 	pushm	r7,lr
8000ba70:	1a 97       	mov	r7,sp
8000ba72:	20 2d       	sub	sp,8
8000ba74:	ef 4c ff fc 	st.w	r7[-4],r12
8000ba78:	ef 4b ff f8 	st.w	r7[-8],r11
8000ba7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba80:	70 09       	ld.w	r9,r8[0x0]
8000ba82:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ba86:	2f e8       	sub	r8,-2
8000ba88:	30 1a       	mov	r10,1
8000ba8a:	f4 08 09 48 	lsl	r8,r10,r8
8000ba8e:	10 49       	or	r9,r8
8000ba90:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba94:	91 09       	st.w	r8[0x0],r9
8000ba96:	2f ed       	sub	sp,-8
8000ba98:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ba9c <pll_config_init>:
8000ba9c:	eb cd 40 80 	pushm	r7,lr
8000baa0:	1a 97       	mov	r7,sp
8000baa2:	20 5d       	sub	sp,20
8000baa4:	ef 4c ff f8 	st.w	r7[-8],r12
8000baa8:	ef 4b ff f4 	st.w	r7[-12],r11
8000baac:	ef 4a ff f0 	st.w	r7[-16],r10
8000bab0:	ef 49 ff ec 	st.w	r7[-20],r9
8000bab4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bab8:	5c 58       	castu.b	r8
8000baba:	10 9c       	mov	r12,r8
8000babc:	f0 1f 00 2e 	mcall	8000bb74 <pll_config_init+0xd8>
8000bac0:	18 99       	mov	r9,r12
8000bac2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bac6:	f2 08 02 48 	mul	r8,r9,r8
8000baca:	ef 48 ff fc 	st.w	r7[-4],r8
8000bace:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bad2:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000bad6:	f0 09 0d 08 	divu	r8,r8,r9
8000bada:	ef 48 ff fc 	st.w	r7[-4],r8
8000bade:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bae2:	30 09       	mov	r9,0
8000bae4:	91 09       	st.w	r8[0x0],r9
8000bae6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000baea:	e0 69 b3 ff 	mov	r9,46079
8000baee:	ea 19 04 c4 	orh	r9,0x4c4
8000baf2:	12 38       	cp.w	r8,r9
8000baf4:	e0 8b 00 16 	brhi	8000bb20 <pll_config_init+0x84>
8000baf8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bafc:	58 88       	cp.w	r8,8
8000bafe:	e0 8b 00 11 	brhi	8000bb20 <pll_config_init+0x84>
8000bb02:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bb06:	a1 78       	lsl	r8,0x1
8000bb08:	ef 48 ff ec 	st.w	r7[-20],r8
8000bb0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb10:	a1 78       	lsl	r8,0x1
8000bb12:	ef 48 ff fc 	st.w	r7[-4],r8
8000bb16:	30 1b       	mov	r11,1
8000bb18:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bb1c:	f0 1f 00 17 	mcall	8000bb78 <pll_config_init+0xdc>
8000bb20:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb24:	e0 69 fe 7f 	mov	r9,65151
8000bb28:	ea 19 0a 21 	orh	r9,0xa21
8000bb2c:	12 38       	cp.w	r8,r9
8000bb2e:	e0 8b 00 07 	brhi	8000bb3c <pll_config_init+0xa0>
8000bb32:	30 0b       	mov	r11,0
8000bb34:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bb38:	f0 1f 00 10 	mcall	8000bb78 <pll_config_init+0xdc>
8000bb3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb40:	70 09       	ld.w	r9,r8[0x0]
8000bb42:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bb46:	20 18       	sub	r8,1
8000bb48:	f0 0a 15 10 	lsl	r10,r8,0x10
8000bb4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bb50:	a9 68       	lsl	r8,0x8
8000bb52:	10 4a       	or	r10,r8
8000bb54:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bb58:	a1 78       	lsl	r8,0x1
8000bb5a:	f5 e8 10 08 	or	r8,r10,r8
8000bb5e:	f3 e8 10 08 	or	r8,r9,r8
8000bb62:	10 99       	mov	r9,r8
8000bb64:	ea 19 3f 00 	orh	r9,0x3f00
8000bb68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb6c:	91 09       	st.w	r8[0x0],r9
8000bb6e:	2f bd       	sub	sp,-20
8000bb70:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb74:	80 00       	ld.sh	r0,r0[0x0]
8000bb76:	b9 fc       	*unknown*
8000bb78:	80 00       	ld.sh	r0,r0[0x0]
8000bb7a:	ba 6c       	st.h	sp[0xc],r12

8000bb7c <pll_enable>:
8000bb7c:	eb cd 40 80 	pushm	r7,lr
8000bb80:	1a 97       	mov	r7,sp
8000bb82:	20 2d       	sub	sp,8
8000bb84:	ef 4c ff fc 	st.w	r7[-4],r12
8000bb88:	ef 4b ff f8 	st.w	r7[-8],r11
8000bb8c:	fe 78 0c 00 	mov	r8,-62464
8000bb90:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bb94:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bb98:	74 0a       	ld.w	r10,r10[0x0]
8000bb9a:	a1 aa       	sbr	r10,0x0
8000bb9c:	2f 89       	sub	r9,-8
8000bb9e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000bba2:	2f ed       	sub	sp,-8
8000bba4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bba8 <pll_is_locked>:
8000bba8:	eb cd 40 80 	pushm	r7,lr
8000bbac:	1a 97       	mov	r7,sp
8000bbae:	20 1d       	sub	sp,4
8000bbb0:	ef 4c ff fc 	st.w	r7[-4],r12
8000bbb4:	fe 78 0c 00 	mov	r8,-62464
8000bbb8:	71 59       	ld.w	r9,r8[0x54]
8000bbba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbbe:	30 1a       	mov	r10,1
8000bbc0:	f4 08 09 48 	lsl	r8,r10,r8
8000bbc4:	f3 e8 00 08 	and	r8,r9,r8
8000bbc8:	5f 18       	srne	r8
8000bbca:	5c 58       	castu.b	r8
8000bbcc:	10 9c       	mov	r12,r8
8000bbce:	2f fd       	sub	sp,-4
8000bbd0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bbd4 <pll_enable_source>:
8000bbd4:	eb cd 40 80 	pushm	r7,lr
8000bbd8:	1a 97       	mov	r7,sp
8000bbda:	20 1d       	sub	sp,4
8000bbdc:	ef 4c ff fc 	st.w	r7[-4],r12
8000bbe0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbe4:	58 08       	cp.w	r8,0
8000bbe6:	c0 40       	breq	8000bbee <pll_enable_source+0x1a>
8000bbe8:	58 18       	cp.w	r8,1
8000bbea:	c1 10       	breq	8000bc0c <pll_enable_source+0x38>
8000bbec:	c2 08       	rjmp	8000bc2c <pll_enable_source+0x58>
8000bbee:	30 0c       	mov	r12,0
8000bbf0:	f0 1f 00 11 	mcall	8000bc34 <pll_enable_source+0x60>
8000bbf4:	18 98       	mov	r8,r12
8000bbf6:	ec 18 00 01 	eorl	r8,0x1
8000bbfa:	5c 58       	castu.b	r8
8000bbfc:	c1 70       	breq	8000bc2a <pll_enable_source+0x56>
8000bbfe:	30 0c       	mov	r12,0
8000bc00:	f0 1f 00 0e 	mcall	8000bc38 <pll_enable_source+0x64>
8000bc04:	30 0c       	mov	r12,0
8000bc06:	f0 1f 00 0e 	mcall	8000bc3c <pll_enable_source+0x68>
8000bc0a:	c1 18       	rjmp	8000bc2c <pll_enable_source+0x58>
8000bc0c:	30 1c       	mov	r12,1
8000bc0e:	f0 1f 00 0a 	mcall	8000bc34 <pll_enable_source+0x60>
8000bc12:	18 98       	mov	r8,r12
8000bc14:	ec 18 00 01 	eorl	r8,0x1
8000bc18:	5c 58       	castu.b	r8
8000bc1a:	c0 90       	breq	8000bc2c <pll_enable_source+0x58>
8000bc1c:	30 1c       	mov	r12,1
8000bc1e:	f0 1f 00 07 	mcall	8000bc38 <pll_enable_source+0x64>
8000bc22:	30 1c       	mov	r12,1
8000bc24:	f0 1f 00 06 	mcall	8000bc3c <pll_enable_source+0x68>
8000bc28:	c0 28       	rjmp	8000bc2c <pll_enable_source+0x58>
8000bc2a:	d7 03       	nop
8000bc2c:	2f fd       	sub	sp,-4
8000bc2e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bc32:	00 00       	add	r0,r0
8000bc34:	80 00       	ld.sh	r0,r0[0x0]
8000bc36:	b9 a4       	sbr	r4,0x18
8000bc38:	80 00       	ld.sh	r0,r0[0x0]
8000bc3a:	b8 e4       	st.b	r12[0x6],r4
8000bc3c:	80 00       	ld.sh	r0,r0[0x0]
8000bc3e:	ba 40       	st.h	sp[0x8],r0

8000bc40 <pll_enable_config_defaults>:
8000bc40:	eb cd 40 80 	pushm	r7,lr
8000bc44:	1a 97       	mov	r7,sp
8000bc46:	20 2d       	sub	sp,8
8000bc48:	ef 4c ff f8 	st.w	r7[-8],r12
8000bc4c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bc50:	f0 1f 00 15 	mcall	8000bca4 <pll_enable_config_defaults+0x64>
8000bc54:	18 98       	mov	r8,r12
8000bc56:	58 08       	cp.w	r8,0
8000bc58:	c2 11       	brne	8000bc9a <pll_enable_config_defaults+0x5a>
8000bc5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bc5e:	58 08       	cp.w	r8,0
8000bc60:	c0 c1       	brne	8000bc78 <pll_enable_config_defaults+0x38>
8000bc62:	30 0c       	mov	r12,0
8000bc64:	f0 1f 00 11 	mcall	8000bca8 <pll_enable_config_defaults+0x68>
8000bc68:	ee c8 00 04 	sub	r8,r7,4
8000bc6c:	30 b9       	mov	r9,11
8000bc6e:	30 2a       	mov	r10,2
8000bc70:	30 0b       	mov	r11,0
8000bc72:	10 9c       	mov	r12,r8
8000bc74:	f0 1f 00 0e 	mcall	8000bcac <pll_enable_config_defaults+0x6c>
8000bc78:	ee c8 00 04 	sub	r8,r7,4
8000bc7c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bc80:	10 9c       	mov	r12,r8
8000bc82:	f0 1f 00 0c 	mcall	8000bcb0 <pll_enable_config_defaults+0x70>
8000bc86:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bc8a:	f0 1f 00 07 	mcall	8000bca4 <pll_enable_config_defaults+0x64>
8000bc8e:	18 98       	mov	r8,r12
8000bc90:	ec 18 00 01 	eorl	r8,0x1
8000bc94:	5c 58       	castu.b	r8
8000bc96:	cf 81       	brne	8000bc86 <pll_enable_config_defaults+0x46>
8000bc98:	c0 28       	rjmp	8000bc9c <pll_enable_config_defaults+0x5c>
8000bc9a:	d7 03       	nop
8000bc9c:	2f ed       	sub	sp,-8
8000bc9e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bca2:	00 00       	add	r0,r0
8000bca4:	80 00       	ld.sh	r0,r0[0x0]
8000bca6:	bb a8       	sbr	r8,0x1a
8000bca8:	80 00       	ld.sh	r0,r0[0x0]
8000bcaa:	bb d4       	cbr	r4,0x1b
8000bcac:	80 00       	ld.sh	r0,r0[0x0]
8000bcae:	ba 9c       	st.b	sp[0x1],r12
8000bcb0:	80 00       	ld.sh	r0,r0[0x0]
8000bcb2:	bb 7c       	lsl	r12,0x1b

8000bcb4 <genclk_config_defaults>:
8000bcb4:	eb cd 40 80 	pushm	r7,lr
8000bcb8:	1a 97       	mov	r7,sp
8000bcba:	20 2d       	sub	sp,8
8000bcbc:	ef 4c ff fc 	st.w	r7[-4],r12
8000bcc0:	ef 4b ff f8 	st.w	r7[-8],r11
8000bcc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcc8:	30 09       	mov	r9,0
8000bcca:	91 09       	st.w	r8[0x0],r9
8000bccc:	2f ed       	sub	sp,-8
8000bcce:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bcd2 <genclk_config_set_source>:
8000bcd2:	eb cd 40 80 	pushm	r7,lr
8000bcd6:	1a 97       	mov	r7,sp
8000bcd8:	20 3d       	sub	sp,12
8000bcda:	ef 4c ff f8 	st.w	r7[-8],r12
8000bcde:	ef 4b ff f4 	st.w	r7[-12],r11
8000bce2:	30 38       	mov	r8,3
8000bce4:	ef 48 ff fc 	st.w	r7[-4],r8
8000bce8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bcec:	70 09       	ld.w	r9,r8[0x0]
8000bcee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bcf2:	5c d8       	com	r8
8000bcf4:	10 69       	and	r9,r8
8000bcf6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bcfa:	10 49       	or	r9,r8
8000bcfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bd00:	91 09       	st.w	r8[0x0],r9
8000bd02:	2f dd       	sub	sp,-12
8000bd04:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bd08 <genclk_config_set_divider>:
8000bd08:	eb cd 40 80 	pushm	r7,lr
8000bd0c:	1a 97       	mov	r7,sp
8000bd0e:	20 2d       	sub	sp,8
8000bd10:	ef 4c ff fc 	st.w	r7[-4],r12
8000bd14:	ef 4b ff f8 	st.w	r7[-8],r11
8000bd18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd1c:	70 08       	ld.w	r8,r8[0x0]
8000bd1e:	10 99       	mov	r9,r8
8000bd20:	e0 19 00 ef 	andl	r9,0xef
8000bd24:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd28:	91 09       	st.w	r8[0x0],r9
8000bd2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bd2e:	58 18       	cp.w	r8,1
8000bd30:	e0 88 00 17 	brls	8000bd5e <genclk_config_set_divider+0x56>
8000bd34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd38:	70 08       	ld.w	r8,r8[0x0]
8000bd3a:	10 99       	mov	r9,r8
8000bd3c:	a5 a9       	sbr	r9,0x4
8000bd3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd42:	91 09       	st.w	r8[0x0],r9
8000bd44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd48:	70 09       	ld.w	r9,r8[0x0]
8000bd4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bd4e:	2f f8       	sub	r8,-1
8000bd50:	a1 98       	lsr	r8,0x1
8000bd52:	20 18       	sub	r8,1
8000bd54:	a9 68       	lsl	r8,0x8
8000bd56:	10 49       	or	r9,r8
8000bd58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd5c:	91 09       	st.w	r8[0x0],r9
8000bd5e:	2f ed       	sub	sp,-8
8000bd60:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bd64 <genclk_enable>:
8000bd64:	eb cd 40 80 	pushm	r7,lr
8000bd68:	1a 97       	mov	r7,sp
8000bd6a:	20 2d       	sub	sp,8
8000bd6c:	ef 4c ff fc 	st.w	r7[-4],r12
8000bd70:	ef 4b ff f8 	st.w	r7[-8],r11
8000bd74:	fe 78 0c 00 	mov	r8,-62464
8000bd78:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bd7c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bd80:	74 0a       	ld.w	r10,r10[0x0]
8000bd82:	a3 aa       	sbr	r10,0x2
8000bd84:	2e 89       	sub	r9,-24
8000bd86:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000bd8a:	2f ed       	sub	sp,-8
8000bd8c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bd90 <genclk_enable_source>:
8000bd90:	eb cd 40 80 	pushm	r7,lr
8000bd94:	1a 97       	mov	r7,sp
8000bd96:	20 1d       	sub	sp,4
8000bd98:	ef 4c ff fc 	st.w	r7[-4],r12
8000bd9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bda0:	58 18       	cp.w	r8,1
8000bda2:	c1 40       	breq	8000bdca <genclk_enable_source+0x3a>
8000bda4:	c0 43       	brcs	8000bdac <genclk_enable_source+0x1c>
8000bda6:	58 28       	cp.w	r8,2
8000bda8:	c2 00       	breq	8000bde8 <genclk_enable_source+0x58>
8000bdaa:	c2 68       	rjmp	8000bdf6 <genclk_enable_source+0x66>
8000bdac:	30 0c       	mov	r12,0
8000bdae:	f0 1f 00 14 	mcall	8000bdfc <genclk_enable_source+0x6c>
8000bdb2:	18 98       	mov	r8,r12
8000bdb4:	ec 18 00 01 	eorl	r8,0x1
8000bdb8:	5c 58       	castu.b	r8
8000bdba:	c1 b0       	breq	8000bdf0 <genclk_enable_source+0x60>
8000bdbc:	30 0c       	mov	r12,0
8000bdbe:	f0 1f 00 11 	mcall	8000be00 <genclk_enable_source+0x70>
8000bdc2:	30 0c       	mov	r12,0
8000bdc4:	f0 1f 00 10 	mcall	8000be04 <genclk_enable_source+0x74>
8000bdc8:	c1 78       	rjmp	8000bdf6 <genclk_enable_source+0x66>
8000bdca:	30 1c       	mov	r12,1
8000bdcc:	f0 1f 00 0c 	mcall	8000bdfc <genclk_enable_source+0x6c>
8000bdd0:	18 98       	mov	r8,r12
8000bdd2:	ec 18 00 01 	eorl	r8,0x1
8000bdd6:	5c 58       	castu.b	r8
8000bdd8:	c0 e0       	breq	8000bdf4 <genclk_enable_source+0x64>
8000bdda:	30 1c       	mov	r12,1
8000bddc:	f0 1f 00 09 	mcall	8000be00 <genclk_enable_source+0x70>
8000bde0:	30 1c       	mov	r12,1
8000bde2:	f0 1f 00 09 	mcall	8000be04 <genclk_enable_source+0x74>
8000bde6:	c0 88       	rjmp	8000bdf6 <genclk_enable_source+0x66>
8000bde8:	30 0c       	mov	r12,0
8000bdea:	f0 1f 00 08 	mcall	8000be08 <genclk_enable_source+0x78>
8000bdee:	c0 48       	rjmp	8000bdf6 <genclk_enable_source+0x66>
8000bdf0:	d7 03       	nop
8000bdf2:	c0 28       	rjmp	8000bdf6 <genclk_enable_source+0x66>
8000bdf4:	d7 03       	nop
8000bdf6:	2f fd       	sub	sp,-4
8000bdf8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bdfc:	80 00       	ld.sh	r0,r0[0x0]
8000bdfe:	b9 a4       	sbr	r4,0x18
8000be00:	80 00       	ld.sh	r0,r0[0x0]
8000be02:	b8 e4       	st.b	r12[0x6],r4
8000be04:	80 00       	ld.sh	r0,r0[0x0]
8000be06:	ba 40       	st.h	sp[0x8],r0
8000be08:	80 00       	ld.sh	r0,r0[0x0]
8000be0a:	bc 40       	st.h	lr[0x8],r0

8000be0c <genclk_enable_config>:
8000be0c:	eb cd 40 80 	pushm	r7,lr
8000be10:	1a 97       	mov	r7,sp
8000be12:	20 4d       	sub	sp,16
8000be14:	ef 4c ff f8 	st.w	r7[-8],r12
8000be18:	ef 4b ff f4 	st.w	r7[-12],r11
8000be1c:	ef 4a ff f0 	st.w	r7[-16],r10
8000be20:	ee c8 00 04 	sub	r8,r7,4
8000be24:	ee fb ff f8 	ld.w	r11,r7[-8]
8000be28:	10 9c       	mov	r12,r8
8000be2a:	f0 1f 00 10 	mcall	8000be68 <genclk_enable_config+0x5c>
8000be2e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000be32:	f0 1f 00 0f 	mcall	8000be6c <genclk_enable_config+0x60>
8000be36:	ee c8 00 04 	sub	r8,r7,4
8000be3a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000be3e:	10 9c       	mov	r12,r8
8000be40:	f0 1f 00 0c 	mcall	8000be70 <genclk_enable_config+0x64>
8000be44:	ee c8 00 04 	sub	r8,r7,4
8000be48:	ee fb ff f0 	ld.w	r11,r7[-16]
8000be4c:	10 9c       	mov	r12,r8
8000be4e:	f0 1f 00 0a 	mcall	8000be74 <genclk_enable_config+0x68>
8000be52:	ee c8 00 04 	sub	r8,r7,4
8000be56:	ee fb ff f8 	ld.w	r11,r7[-8]
8000be5a:	10 9c       	mov	r12,r8
8000be5c:	f0 1f 00 07 	mcall	8000be78 <genclk_enable_config+0x6c>
8000be60:	2f cd       	sub	sp,-16
8000be62:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be66:	00 00       	add	r0,r0
8000be68:	80 00       	ld.sh	r0,r0[0x0]
8000be6a:	bc b4       	st.b	lr[0x3],r4
8000be6c:	80 00       	ld.sh	r0,r0[0x0]
8000be6e:	bd 90       	lsr	r0,0x1d
8000be70:	80 00       	ld.sh	r0,r0[0x0]
8000be72:	bc d2       	st.b	lr[0x5],r2
8000be74:	80 00       	ld.sh	r0,r0[0x0]
8000be76:	bd 08       	ld.d	r8,lr
8000be78:	80 00       	ld.sh	r0,r0[0x0]
8000be7a:	bd 64       	lsl	r4,0x1c

8000be7c <sysclk_get_main_hz>:
8000be7c:	eb cd 40 80 	pushm	r7,lr
8000be80:	1a 97       	mov	r7,sp
8000be82:	30 0c       	mov	r12,0
8000be84:	f0 1f 00 06 	mcall	8000be9c <sysclk_get_main_hz+0x20>
8000be88:	18 99       	mov	r9,r12
8000be8a:	12 98       	mov	r8,r9
8000be8c:	a3 68       	lsl	r8,0x2
8000be8e:	12 08       	add	r8,r9
8000be90:	a1 78       	lsl	r8,0x1
8000be92:	12 08       	add	r8,r9
8000be94:	a1 98       	lsr	r8,0x1
8000be96:	10 9c       	mov	r12,r8
8000be98:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be9c:	80 00       	ld.sh	r0,r0[0x0]
8000be9e:	b9 fc       	*unknown*

8000bea0 <sysclk_get_cpu_hz>:
8000bea0:	eb cd 40 80 	pushm	r7,lr
8000bea4:	1a 97       	mov	r7,sp
8000bea6:	f0 1f 00 04 	mcall	8000beb4 <sysclk_get_cpu_hz+0x14>
8000beaa:	18 98       	mov	r8,r12
8000beac:	10 9c       	mov	r12,r8
8000beae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000beb2:	00 00       	add	r0,r0
8000beb4:	80 00       	ld.sh	r0,r0[0x0]
8000beb6:	be 7c       	st.h	pc[0xe],r12

8000beb8 <sysclk_enable_hsb_module>:
8000beb8:	eb cd 40 80 	pushm	r7,lr
8000bebc:	1a 97       	mov	r7,sp
8000bebe:	20 1d       	sub	sp,4
8000bec0:	ef 4c ff fc 	st.w	r7[-4],r12
8000bec4:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bec8:	30 1c       	mov	r12,1
8000beca:	f0 1f 00 03 	mcall	8000bed4 <sysclk_enable_hsb_module+0x1c>
8000bece:	2f fd       	sub	sp,-4
8000bed0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bed4:	80 00       	ld.sh	r0,r0[0x0]
8000bed6:	bf 2c       	st.d	pc++,r12

8000bed8 <sysclk_set_source>:
8000bed8:	eb cd 40 80 	pushm	r7,lr
8000bedc:	1a 97       	mov	r7,sp
8000bede:	20 3d       	sub	sp,12
8000bee0:	ef 4c ff f4 	st.w	r7[-12],r12
8000bee4:	f0 1f 00 10 	mcall	8000bf24 <sysclk_set_source+0x4c>
8000bee8:	18 98       	mov	r8,r12
8000beea:	ef 48 ff f8 	st.w	r7[-8],r8
8000beee:	fe 78 0c 00 	mov	r8,-62464
8000bef2:	70 08       	ld.w	r8,r8[0x0]
8000bef4:	e0 18 ff fc 	andl	r8,0xfffc
8000bef8:	ef 48 ff fc 	st.w	r7[-4],r8
8000befc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bf00:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf04:	f3 e8 10 08 	or	r8,r9,r8
8000bf08:	ef 48 ff fc 	st.w	r7[-4],r8
8000bf0c:	fe 78 0c 00 	mov	r8,-62464
8000bf10:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bf14:	91 09       	st.w	r8[0x0],r9
8000bf16:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bf1a:	f0 1f 00 04 	mcall	8000bf28 <sysclk_set_source+0x50>
8000bf1e:	2f dd       	sub	sp,-12
8000bf20:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf24:	80 00       	ld.sh	r0,r0[0x0]
8000bf26:	b8 ac       	st.b	r12[0x2],r12
8000bf28:	80 00       	ld.sh	r0,r0[0x0]
8000bf2a:	b8 ca       	st.b	r12[0x4],r10

8000bf2c <sysclk_priv_enable_module>:
8000bf2c:	eb cd 40 80 	pushm	r7,lr
8000bf30:	1a 97       	mov	r7,sp
8000bf32:	20 4d       	sub	sp,16
8000bf34:	ef 4c ff f4 	st.w	r7[-12],r12
8000bf38:	ef 4b ff f0 	st.w	r7[-16],r11
8000bf3c:	f0 1f 00 17 	mcall	8000bf98 <sysclk_priv_enable_module+0x6c>
8000bf40:	18 98       	mov	r8,r12
8000bf42:	ef 48 ff f8 	st.w	r7[-8],r8
8000bf46:	fe 78 0c 00 	mov	r8,-62464
8000bf4a:	71 58       	ld.w	r8,r8[0x54]
8000bf4c:	e2 18 00 40 	andl	r8,0x40,COH
8000bf50:	cf b0       	breq	8000bf46 <sysclk_priv_enable_module+0x1a>
8000bf52:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf56:	a3 68       	lsl	r8,0x2
8000bf58:	e0 28 f3 f8 	sub	r8,62456
8000bf5c:	70 08       	ld.w	r8,r8[0x0]
8000bf5e:	ef 48 ff fc 	st.w	r7[-4],r8
8000bf62:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bf66:	30 19       	mov	r9,1
8000bf68:	f2 08 09 48 	lsl	r8,r9,r8
8000bf6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bf70:	f3 e8 10 08 	or	r8,r9,r8
8000bf74:	ef 48 ff fc 	st.w	r7[-4],r8
8000bf78:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf7c:	a3 68       	lsl	r8,0x2
8000bf7e:	e0 28 f3 f8 	sub	r8,62456
8000bf82:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bf86:	91 09       	st.w	r8[0x0],r9
8000bf88:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bf8c:	f0 1f 00 04 	mcall	8000bf9c <sysclk_priv_enable_module+0x70>
8000bf90:	2f cd       	sub	sp,-16
8000bf92:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf96:	00 00       	add	r0,r0
8000bf98:	80 00       	ld.sh	r0,r0[0x0]
8000bf9a:	b8 ac       	st.b	r12[0x2],r12
8000bf9c:	80 00       	ld.sh	r0,r0[0x0]
8000bf9e:	b8 ca       	st.b	r12[0x4],r10

8000bfa0 <sysclk_enable_pbb_module>:
8000bfa0:	eb cd 40 80 	pushm	r7,lr
8000bfa4:	1a 97       	mov	r7,sp
8000bfa6:	20 3d       	sub	sp,12
8000bfa8:	ef 4c ff f4 	st.w	r7[-12],r12
8000bfac:	30 08       	mov	r8,0
8000bfae:	ef 48 ff f8 	st.w	r7[-8],r8
8000bfb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bfb6:	58 98       	cp.w	r8,9
8000bfb8:	c0 41       	brne	8000bfc0 <sysclk_enable_pbb_module+0x20>
8000bfba:	30 18       	mov	r8,1
8000bfbc:	ef 48 ff f8 	st.w	r7[-8],r8
8000bfc0:	f0 1f 00 15 	mcall	8000c014 <sysclk_enable_pbb_module+0x74>
8000bfc4:	18 98       	mov	r8,r12
8000bfc6:	ef 48 ff fc 	st.w	r7[-4],r8
8000bfca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bfce:	49 39       	lddpc	r9,8000c018 <sysclk_enable_pbb_module+0x78>
8000bfd0:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000bfd4:	58 08       	cp.w	r8,0
8000bfd6:	c0 91       	brne	8000bfe8 <sysclk_enable_pbb_module+0x48>
8000bfd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bfdc:	a1 78       	lsl	r8,0x1
8000bfde:	2f f8       	sub	r8,-1
8000bfe0:	a1 78       	lsl	r8,0x1
8000bfe2:	10 9c       	mov	r12,r8
8000bfe4:	f0 1f 00 0e 	mcall	8000c01c <sysclk_enable_pbb_module+0x7c>
8000bfe8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bfec:	48 b9       	lddpc	r9,8000c018 <sysclk_enable_pbb_module+0x78>
8000bfee:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000bff2:	2f f9       	sub	r9,-1
8000bff4:	5c 59       	castu.b	r9
8000bff6:	48 9a       	lddpc	r10,8000c018 <sysclk_enable_pbb_module+0x78>
8000bff8:	f4 08 0b 09 	st.b	r10[r8],r9
8000bffc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c000:	f0 1f 00 08 	mcall	8000c020 <sysclk_enable_pbb_module+0x80>
8000c004:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c008:	30 3c       	mov	r12,3
8000c00a:	f0 1f 00 07 	mcall	8000c024 <sysclk_enable_pbb_module+0x84>
8000c00e:	2f dd       	sub	sp,-12
8000c010:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c014:	80 00       	ld.sh	r0,r0[0x0]
8000c016:	b8 ac       	st.b	r12[0x2],r12
8000c018:	00 00       	add	r0,r0
8000c01a:	07 ec       	ld.ub	r12,r3[0x6]
8000c01c:	80 00       	ld.sh	r0,r0[0x0]
8000c01e:	be b8       	st.b	pc[0x3],r8
8000c020:	80 00       	ld.sh	r0,r0[0x0]
8000c022:	b8 ca       	st.b	r12[0x4],r10
8000c024:	80 00       	ld.sh	r0,r0[0x0]
8000c026:	bf 2c       	st.d	pc++,r12

8000c028 <sysclk_enable_usb>:
8000c028:	eb cd 40 80 	pushm	r7,lr
8000c02c:	1a 97       	mov	r7,sp
8000c02e:	30 1c       	mov	r12,1
8000c030:	f0 1f 00 06 	mcall	8000c048 <sysclk_enable_usb+0x20>
8000c034:	30 3c       	mov	r12,3
8000c036:	f0 1f 00 06 	mcall	8000c04c <sysclk_enable_usb+0x24>
8000c03a:	30 1a       	mov	r10,1
8000c03c:	30 0b       	mov	r11,0
8000c03e:	30 4c       	mov	r12,4
8000c040:	f0 1f 00 04 	mcall	8000c050 <sysclk_enable_usb+0x28>
8000c044:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c048:	80 00       	ld.sh	r0,r0[0x0]
8000c04a:	bf a0       	sbr	r0,0x1e
8000c04c:	80 00       	ld.sh	r0,r0[0x0]
8000c04e:	be b8       	st.b	pc[0x3],r8
8000c050:	80 00       	ld.sh	r0,r0[0x0]
8000c052:	be 0c       	st.h	pc[0x0],r12

8000c054 <sysclk_init>:
8000c054:	eb cd 40 80 	pushm	r7,lr
8000c058:	1a 97       	mov	r7,sp
8000c05a:	30 0c       	mov	r12,0
8000c05c:	f0 1f 00 07 	mcall	8000c078 <sysclk_init+0x24>
8000c060:	f0 1f 00 07 	mcall	8000c07c <sysclk_init+0x28>
8000c064:	18 98       	mov	r8,r12
8000c066:	10 9c       	mov	r12,r8
8000c068:	f0 1f 00 06 	mcall	8000c080 <sysclk_init+0x2c>
8000c06c:	30 2c       	mov	r12,2
8000c06e:	f0 1f 00 06 	mcall	8000c084 <sysclk_init+0x30>
8000c072:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c076:	00 00       	add	r0,r0
8000c078:	80 00       	ld.sh	r0,r0[0x0]
8000c07a:	bc 40       	st.h	lr[0x8],r0
8000c07c:	80 00       	ld.sh	r0,r0[0x0]
8000c07e:	be a0       	st.b	pc[0x2],r0
8000c080:	80 00       	ld.sh	r0,r0[0x0]
8000c082:	85 b8       	st.w	r2[0x2c],r8
8000c084:	80 00       	ld.sh	r0,r0[0x0]
8000c086:	be d8       	st.b	pc[0x5],r8
8000c088:	22 53       	sub	r3,37
8000c08a:	44 20       	lddsp	r0,sp[0x108]
8000c08c:	43 61       	lddsp	r1,sp[0xd8]
8000c08e:	72 64       	ld.w	r4,r9[0x18]
8000c090:	20 53       	sub	r3,5
8000c092:	6c 6f       	ld.w	pc,r6[0x18]
8000c094:	74 20       	ld.w	r0,r10[0x8]
8000c096:	30 22       	mov	r2,2
8000c098:	00 00       	add	r0,r0
8000c09a:	00 00       	add	r0,r0
8000c09c:	22 53       	sub	r3,37
8000c09e:	44 20       	lddsp	r0,sp[0x108]
8000c0a0:	43 61       	lddsp	r1,sp[0xd8]
8000c0a2:	72 64       	ld.w	r4,r9[0x18]
8000c0a4:	20 53       	sub	r3,5
8000c0a6:	6c 6f       	ld.w	pc,r6[0x18]
8000c0a8:	74 20       	ld.w	r0,r10[0x8]
8000c0aa:	31 22       	mov	r2,18
8000c0ac:	00 00       	add	r0,r0
	...

8000c0b0 <get_nb_lun>:
8000c0b0:	eb cd 40 80 	pushm	r7,lr
8000c0b4:	1a 97       	mov	r7,sp
8000c0b6:	30 28       	mov	r8,2
8000c0b8:	10 9c       	mov	r12,r8
8000c0ba:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0be:	d7 03       	nop

8000c0c0 <mem_test_unit_ready>:
8000c0c0:	eb cd 40 80 	pushm	r7,lr
8000c0c4:	1a 97       	mov	r7,sp
8000c0c6:	20 2d       	sub	sp,8
8000c0c8:	18 98       	mov	r8,r12
8000c0ca:	ef 68 ff f8 	st.b	r7[-8],r8
8000c0ce:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c0d2:	30 18       	mov	r8,1
8000c0d4:	f0 09 18 00 	cp.b	r9,r8
8000c0d8:	e0 8b 00 0f 	brhi	8000c0f6 <mem_test_unit_ready+0x36>
8000c0dc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c0e0:	48 aa       	lddpc	r10,8000c108 <mem_test_unit_ready+0x48>
8000c0e2:	12 98       	mov	r8,r9
8000c0e4:	a3 78       	lsl	r8,0x3
8000c0e6:	12 18       	sub	r8,r9
8000c0e8:	a3 68       	lsl	r8,0x2
8000c0ea:	f4 08 00 08 	add	r8,r10,r8
8000c0ee:	70 08       	ld.w	r8,r8[0x0]
8000c0f0:	5d 18       	icall	r8
8000c0f2:	18 98       	mov	r8,r12
8000c0f4:	c0 28       	rjmp	8000c0f8 <mem_test_unit_ready+0x38>
8000c0f6:	30 18       	mov	r8,1
8000c0f8:	ef 48 ff fc 	st.w	r7[-4],r8
8000c0fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c100:	10 9c       	mov	r12,r8
8000c102:	2f ed       	sub	sp,-8
8000c104:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c108:	80 00       	ld.sh	r0,r0[0x0]
8000c10a:	f2 24 eb cd 	sub	r4,-857139

8000c10c <mem_read_capacity>:
8000c10c:	eb cd 40 80 	pushm	r7,lr
8000c110:	1a 97       	mov	r7,sp
8000c112:	20 3d       	sub	sp,12
8000c114:	18 98       	mov	r8,r12
8000c116:	ef 4b ff f4 	st.w	r7[-12],r11
8000c11a:	ef 68 ff f8 	st.b	r7[-8],r8
8000c11e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c122:	30 18       	mov	r8,1
8000c124:	f0 09 18 00 	cp.b	r9,r8
8000c128:	e0 8b 00 10 	brhi	8000c148 <mem_read_capacity+0x3c>
8000c12c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c130:	48 ba       	lddpc	r10,8000c15c <mem_read_capacity+0x50>
8000c132:	12 98       	mov	r8,r9
8000c134:	a3 78       	lsl	r8,0x3
8000c136:	12 18       	sub	r8,r9
8000c138:	2f f8       	sub	r8,-1
8000c13a:	f4 08 03 28 	ld.w	r8,r10[r8<<0x2]
8000c13e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c142:	5d 18       	icall	r8
8000c144:	18 98       	mov	r8,r12
8000c146:	c0 28       	rjmp	8000c14a <mem_read_capacity+0x3e>
8000c148:	30 18       	mov	r8,1
8000c14a:	ef 48 ff fc 	st.w	r7[-4],r8
8000c14e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c152:	10 9c       	mov	r12,r8
8000c154:	2f dd       	sub	sp,-12
8000c156:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c15a:	00 00       	add	r0,r0
8000c15c:	80 00       	ld.sh	r0,r0[0x0]
8000c15e:	f2 24 eb cd 	sub	r4,-857139

8000c160 <mem_wr_protect>:
8000c160:	eb cd 40 80 	pushm	r7,lr
8000c164:	1a 97       	mov	r7,sp
8000c166:	20 2d       	sub	sp,8
8000c168:	18 98       	mov	r8,r12
8000c16a:	ef 68 ff f8 	st.b	r7[-8],r8
8000c16e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c172:	30 18       	mov	r8,1
8000c174:	f0 09 18 00 	cp.b	r9,r8
8000c178:	e0 8b 00 10 	brhi	8000c198 <mem_wr_protect+0x38>
8000c17c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c180:	48 ba       	lddpc	r10,8000c1ac <mem_wr_protect+0x4c>
8000c182:	12 98       	mov	r8,r9
8000c184:	a3 78       	lsl	r8,0x3
8000c186:	12 18       	sub	r8,r9
8000c188:	a3 68       	lsl	r8,0x2
8000c18a:	f4 08 00 08 	add	r8,r10,r8
8000c18e:	2f 88       	sub	r8,-8
8000c190:	70 08       	ld.w	r8,r8[0x0]
8000c192:	5d 18       	icall	r8
8000c194:	18 98       	mov	r8,r12
8000c196:	c0 28       	rjmp	8000c19a <mem_wr_protect+0x3a>
8000c198:	30 18       	mov	r8,1
8000c19a:	ef 68 ff ff 	st.b	r7[-1],r8
8000c19e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c1a2:	10 9c       	mov	r12,r8
8000c1a4:	2f ed       	sub	sp,-8
8000c1a6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1aa:	00 00       	add	r0,r0
8000c1ac:	80 00       	ld.sh	r0,r0[0x0]
8000c1ae:	f2 24 eb cd 	sub	r4,-857139

8000c1b0 <mem_name>:
8000c1b0:	eb cd 40 80 	pushm	r7,lr
8000c1b4:	1a 97       	mov	r7,sp
8000c1b6:	20 1d       	sub	sp,4
8000c1b8:	18 98       	mov	r8,r12
8000c1ba:	ef 68 ff fc 	st.b	r7[-4],r8
8000c1be:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c1c2:	30 18       	mov	r8,1
8000c1c4:	f0 09 18 00 	cp.b	r9,r8
8000c1c8:	e0 8b 00 0e 	brhi	8000c1e4 <mem_name+0x34>
8000c1cc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000c1d0:	48 8a       	lddpc	r10,8000c1f0 <mem_name+0x40>
8000c1d2:	12 98       	mov	r8,r9
8000c1d4:	a3 78       	lsl	r8,0x3
8000c1d6:	12 18       	sub	r8,r9
8000c1d8:	a3 68       	lsl	r8,0x2
8000c1da:	f4 08 00 08 	add	r8,r10,r8
8000c1de:	2e 88       	sub	r8,-24
8000c1e0:	70 08       	ld.w	r8,r8[0x0]
8000c1e2:	c0 28       	rjmp	8000c1e6 <mem_name+0x36>
8000c1e4:	30 08       	mov	r8,0
8000c1e6:	10 9c       	mov	r12,r8
8000c1e8:	2f fd       	sub	sp,-4
8000c1ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1ee:	00 00       	add	r0,r0
8000c1f0:	80 00       	ld.sh	r0,r0[0x0]
8000c1f2:	f2 24 eb cd 	sub	r4,-857139

8000c1f4 <memory_2_usb>:
8000c1f4:	eb cd 40 80 	pushm	r7,lr
8000c1f8:	1a 97       	mov	r7,sp
8000c1fa:	20 4d       	sub	sp,16
8000c1fc:	18 99       	mov	r9,r12
8000c1fe:	ef 4b ff f4 	st.w	r7[-12],r11
8000c202:	14 98       	mov	r8,r10
8000c204:	ef 69 ff f8 	st.b	r7[-8],r9
8000c208:	ef 58 ff f0 	st.h	r7[-16],r8
8000c20c:	f0 1f 00 14 	mcall	8000c25c <memory_2_usb+0x68>
8000c210:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c214:	30 18       	mov	r8,1
8000c216:	f0 09 18 00 	cp.b	r9,r8
8000c21a:	e0 8b 00 15 	brhi	8000c244 <memory_2_usb+0x50>
8000c21e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c222:	49 0a       	lddpc	r10,8000c260 <memory_2_usb+0x6c>
8000c224:	12 98       	mov	r8,r9
8000c226:	a3 78       	lsl	r8,0x3
8000c228:	12 18       	sub	r8,r9
8000c22a:	a3 68       	lsl	r8,0x2
8000c22c:	f4 08 00 08 	add	r8,r10,r8
8000c230:	2f 08       	sub	r8,-16
8000c232:	70 08       	ld.w	r8,r8[0x0]
8000c234:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c238:	12 9b       	mov	r11,r9
8000c23a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c23e:	5d 18       	icall	r8
8000c240:	18 98       	mov	r8,r12
8000c242:	c0 28       	rjmp	8000c246 <memory_2_usb+0x52>
8000c244:	30 18       	mov	r8,1
8000c246:	ef 48 ff fc 	st.w	r7[-4],r8
8000c24a:	f0 1f 00 07 	mcall	8000c264 <memory_2_usb+0x70>
8000c24e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c252:	10 9c       	mov	r12,r8
8000c254:	2f cd       	sub	sp,-16
8000c256:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c25a:	00 00       	add	r0,r0
8000c25c:	80 00       	ld.sh	r0,r0[0x0]
8000c25e:	c3 2c       	rcall	8000c2c2 <usb_2_memory+0x5a>
8000c260:	80 00       	ld.sh	r0,r0[0x0]
8000c262:	f2 24 80 00 	sub	r4,-884736
8000c266:	c3 40       	breq	8000c2ce <usb_2_memory+0x66>

8000c268 <usb_2_memory>:
8000c268:	eb cd 40 80 	pushm	r7,lr
8000c26c:	1a 97       	mov	r7,sp
8000c26e:	20 4d       	sub	sp,16
8000c270:	18 99       	mov	r9,r12
8000c272:	ef 4b ff f4 	st.w	r7[-12],r11
8000c276:	14 98       	mov	r8,r10
8000c278:	ef 69 ff f8 	st.b	r7[-8],r9
8000c27c:	ef 58 ff f0 	st.h	r7[-16],r8
8000c280:	f0 1f 00 14 	mcall	8000c2d0 <usb_2_memory+0x68>
8000c284:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c288:	30 18       	mov	r8,1
8000c28a:	f0 09 18 00 	cp.b	r9,r8
8000c28e:	e0 8b 00 15 	brhi	8000c2b8 <usb_2_memory+0x50>
8000c292:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c296:	49 0a       	lddpc	r10,8000c2d4 <usb_2_memory+0x6c>
8000c298:	12 98       	mov	r8,r9
8000c29a:	a3 78       	lsl	r8,0x3
8000c29c:	12 18       	sub	r8,r9
8000c29e:	a3 68       	lsl	r8,0x2
8000c2a0:	f4 08 00 08 	add	r8,r10,r8
8000c2a4:	2e c8       	sub	r8,-20
8000c2a6:	70 08       	ld.w	r8,r8[0x0]
8000c2a8:	ef 19 ff f0 	ld.uh	r9,r7[-16]
8000c2ac:	12 9b       	mov	r11,r9
8000c2ae:	ee fc ff f4 	ld.w	r12,r7[-12]
8000c2b2:	5d 18       	icall	r8
8000c2b4:	18 98       	mov	r8,r12
8000c2b6:	c0 28       	rjmp	8000c2ba <usb_2_memory+0x52>
8000c2b8:	30 18       	mov	r8,1
8000c2ba:	ef 48 ff fc 	st.w	r7[-4],r8
8000c2be:	f0 1f 00 07 	mcall	8000c2d8 <usb_2_memory+0x70>
8000c2c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c2c6:	10 9c       	mov	r12,r8
8000c2c8:	2f cd       	sub	sp,-16
8000c2ca:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2ce:	00 00       	add	r0,r0
8000c2d0:	80 00       	ld.sh	r0,r0[0x0]
8000c2d2:	c3 54       	brge	8000c33c <ui_start_read+0x10>
8000c2d4:	80 00       	ld.sh	r0,r0[0x0]
8000c2d6:	f2 24 80 00 	sub	r4,-884736
8000c2da:	c3 68       	rjmp	8000c346 <ui_stop_read+0x6>

8000c2dc <ui_init>:
8000c2dc:	eb cd 40 80 	pushm	r7,lr
8000c2e0:	1a 97       	mov	r7,sp
8000c2e2:	30 1c       	mov	r12,1
8000c2e4:	f0 1f 00 04 	mcall	8000c2f4 <ui_init+0x18>
8000c2e8:	30 2c       	mov	r12,2
8000c2ea:	f0 1f 00 04 	mcall	8000c2f8 <ui_init+0x1c>
8000c2ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2f2:	00 00       	add	r0,r0
8000c2f4:	80 00       	ld.sh	r0,r0[0x0]
8000c2f6:	43 84       	lddsp	r4,sp[0xe0]
8000c2f8:	80 00       	ld.sh	r0,r0[0x0]
8000c2fa:	42 cc       	lddsp	r12,sp[0xb0]

8000c2fc <ui_powerdown>:
8000c2fc:	eb cd 40 80 	pushm	r7,lr
8000c300:	1a 97       	mov	r7,sp
8000c302:	30 1c       	mov	r12,1
8000c304:	f0 1f 00 04 	mcall	8000c314 <ui_powerdown+0x18>
8000c308:	30 2c       	mov	r12,2
8000c30a:	f0 1f 00 03 	mcall	8000c314 <ui_powerdown+0x18>
8000c30e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c312:	00 00       	add	r0,r0
8000c314:	80 00       	ld.sh	r0,r0[0x0]
8000c316:	42 cc       	lddsp	r12,sp[0xb0]

8000c318 <ui_wakeup>:
8000c318:	eb cd 40 80 	pushm	r7,lr
8000c31c:	1a 97       	mov	r7,sp
8000c31e:	30 1c       	mov	r12,1
8000c320:	f0 1f 00 02 	mcall	8000c328 <ui_wakeup+0x10>
8000c324:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c328:	80 00       	ld.sh	r0,r0[0x0]
8000c32a:	43 84       	lddsp	r4,sp[0xe0]

8000c32c <ui_start_read>:
8000c32c:	eb cd 40 80 	pushm	r7,lr
8000c330:	1a 97       	mov	r7,sp
8000c332:	30 4c       	mov	r12,4
8000c334:	f0 1f 00 02 	mcall	8000c33c <ui_start_read+0x10>
8000c338:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c33c:	80 00       	ld.sh	r0,r0[0x0]
8000c33e:	43 84       	lddsp	r4,sp[0xe0]

8000c340 <ui_stop_read>:
8000c340:	eb cd 40 80 	pushm	r7,lr
8000c344:	1a 97       	mov	r7,sp
8000c346:	30 4c       	mov	r12,4
8000c348:	f0 1f 00 02 	mcall	8000c350 <ui_stop_read+0x10>
8000c34c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c350:	80 00       	ld.sh	r0,r0[0x0]
8000c352:	42 cc       	lddsp	r12,sp[0xb0]

8000c354 <ui_start_write>:
8000c354:	eb cd 40 80 	pushm	r7,lr
8000c358:	1a 97       	mov	r7,sp
8000c35a:	30 8c       	mov	r12,8
8000c35c:	f0 1f 00 02 	mcall	8000c364 <ui_start_write+0x10>
8000c360:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c364:	80 00       	ld.sh	r0,r0[0x0]
8000c366:	43 84       	lddsp	r4,sp[0xe0]

8000c368 <ui_stop_write>:
8000c368:	eb cd 40 80 	pushm	r7,lr
8000c36c:	1a 97       	mov	r7,sp
8000c36e:	30 8c       	mov	r12,8
8000c370:	f0 1f 00 02 	mcall	8000c378 <ui_stop_write+0x10>
8000c374:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c378:	80 00       	ld.sh	r0,r0[0x0]
8000c37a:	42 cc       	lddsp	r12,sp[0xb0]

8000c37c <ui_process>:
8000c37c:	eb cd 40 80 	pushm	r7,lr
8000c380:	1a 97       	mov	r7,sp
8000c382:	20 1d       	sub	sp,4
8000c384:	18 98       	mov	r8,r12
8000c386:	ef 58 ff fc 	st.h	r7[-4],r8
8000c38a:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c38e:	e0 68 4d d3 	mov	r8,19923
8000c392:	ea 18 10 62 	orh	r8,0x1062
8000c396:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c39a:	a7 89       	lsr	r9,0x6
8000c39c:	e0 68 03 e8 	mov	r8,1000
8000c3a0:	f2 08 02 48 	mul	r8,r9,r8
8000c3a4:	f4 08 01 08 	sub	r8,r10,r8
8000c3a8:	5c 88       	casts.h	r8
8000c3aa:	c0 41       	brne	8000c3b2 <ui_process+0x36>
8000c3ac:	30 2c       	mov	r12,2
8000c3ae:	f0 1f 00 10 	mcall	8000c3ec <ui_process+0x70>
8000c3b2:	ef 1a ff fc 	ld.uh	r10,r7[-4]
8000c3b6:	e0 68 4d d3 	mov	r8,19923
8000c3ba:	ea 18 10 62 	orh	r8,0x1062
8000c3be:	f4 08 06 48 	mulu.d	r8,r10,r8
8000c3c2:	a7 89       	lsr	r9,0x6
8000c3c4:	e0 68 03 e8 	mov	r8,1000
8000c3c8:	f2 08 02 48 	mul	r8,r9,r8
8000c3cc:	f4 08 01 08 	sub	r8,r10,r8
8000c3d0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000c3d4:	e0 68 01 f4 	mov	r8,500
8000c3d8:	f0 09 19 00 	cp.h	r9,r8
8000c3dc:	c0 41       	brne	8000c3e4 <ui_process+0x68>
8000c3de:	30 2c       	mov	r12,2
8000c3e0:	f0 1f 00 04 	mcall	8000c3f0 <ui_process+0x74>
8000c3e4:	2f fd       	sub	sp,-4
8000c3e6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3ea:	00 00       	add	r0,r0
8000c3ec:	80 00       	ld.sh	r0,r0[0x0]
8000c3ee:	43 84       	lddsp	r4,sp[0xe0]
8000c3f0:	80 00       	ld.sh	r0,r0[0x0]
8000c3f2:	42 cc       	lddsp	r12,sp[0xb0]

8000c3f4 <udi_msc_enable>:
8000c3f4:	eb cd 40 80 	pushm	r7,lr
8000c3f8:	1a 97       	mov	r7,sp
8000c3fa:	49 49       	lddpc	r9,8000c448 <udi_msc_enable+0x54>
8000c3fc:	30 08       	mov	r8,0
8000c3fe:	b2 88       	st.b	r9[0x0],r8
8000c400:	49 39       	lddpc	r9,8000c44c <udi_msc_enable+0x58>
8000c402:	30 08       	mov	r8,0
8000c404:	b2 88       	st.b	r9[0x0],r8
8000c406:	f0 1f 00 13 	mcall	8000c450 <udi_msc_enable+0x5c>
8000c40a:	18 98       	mov	r8,r12
8000c40c:	49 29       	lddpc	r9,8000c454 <udi_msc_enable+0x60>
8000c40e:	b2 88       	st.b	r9[0x0],r8
8000c410:	49 18       	lddpc	r8,8000c454 <udi_msc_enable+0x60>
8000c412:	11 88       	ld.ub	r8,r8[0x0]
8000c414:	58 08       	cp.w	r8,0
8000c416:	c0 31       	brne	8000c41c <udi_msc_enable+0x28>
8000c418:	30 08       	mov	r8,0
8000c41a:	c1 38       	rjmp	8000c440 <udi_msc_enable+0x4c>
8000c41c:	48 e8       	lddpc	r8,8000c454 <udi_msc_enable+0x60>
8000c41e:	11 88       	ld.ub	r8,r8[0x0]
8000c420:	20 18       	sub	r8,1
8000c422:	5c 58       	castu.b	r8
8000c424:	48 c9       	lddpc	r9,8000c454 <udi_msc_enable+0x60>
8000c426:	b2 88       	st.b	r9[0x0],r8
8000c428:	f0 1f 00 0c 	mcall	8000c458 <udi_msc_enable+0x64>
8000c42c:	18 98       	mov	r8,r12
8000c42e:	ec 18 00 01 	eorl	r8,0x1
8000c432:	5c 58       	castu.b	r8
8000c434:	c0 30       	breq	8000c43a <udi_msc_enable+0x46>
8000c436:	30 08       	mov	r8,0
8000c438:	c0 48       	rjmp	8000c440 <udi_msc_enable+0x4c>
8000c43a:	f0 1f 00 09 	mcall	8000c45c <udi_msc_enable+0x68>
8000c43e:	30 18       	mov	r8,1
8000c440:	10 9c       	mov	r12,r8
8000c442:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c446:	00 00       	add	r0,r0
8000c448:	00 00       	add	r0,r0
8000c44a:	08 29       	rsub	r9,r4
8000c44c:	00 00       	add	r0,r0
8000c44e:	08 28       	rsub	r8,r4
8000c450:	80 00       	ld.sh	r0,r0[0x0]
8000c452:	c0 b0       	breq	8000c468 <udi_msc_disable+0x8>
8000c454:	00 00       	add	r0,r0
8000c456:	08 10       	sub	r0,r4
8000c458:	80 00       	ld.sh	r0,r0[0x0]
8000c45a:	e3 44 80 00 	st.w	r1[-32768],r4
8000c45e:	c5 d8       	rjmp	8000c518 <udi_msc_setup+0x9c>

8000c460 <udi_msc_disable>:
8000c460:	eb cd 40 80 	pushm	r7,lr
8000c464:	1a 97       	mov	r7,sp
8000c466:	48 49       	lddpc	r9,8000c474 <udi_msc_disable+0x14>
8000c468:	30 08       	mov	r8,0
8000c46a:	b2 88       	st.b	r9[0x0],r8
8000c46c:	f0 1f 00 03 	mcall	8000c478 <udi_msc_disable+0x18>
8000c470:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c474:	00 00       	add	r0,r0
8000c476:	08 29       	rsub	r9,r4
8000c478:	80 00       	ld.sh	r0,r0[0x0]
8000c47a:	e3 5c eb cd 	st.h	r1[-5171],r12

8000c47c <udi_msc_setup>:
8000c47c:	eb cd 40 80 	pushm	r7,lr
8000c480:	1a 97       	mov	r7,sp
8000c482:	4a f8       	lddpc	r8,8000c53c <udi_msc_setup+0xc0>
8000c484:	11 88       	ld.ub	r8,r8[0x0]
8000c486:	10 99       	mov	r9,r8
8000c488:	30 08       	mov	r8,0
8000c48a:	f0 09 18 00 	cp.b	r9,r8
8000c48e:	c2 34       	brge	8000c4d4 <udi_msc_setup+0x58>
8000c490:	4a b8       	lddpc	r8,8000c53c <udi_msc_setup+0xc0>
8000c492:	11 88       	ld.ub	r8,r8[0x0]
8000c494:	e2 18 00 60 	andl	r8,0x60,COH
8000c498:	e0 48 00 20 	cp.w	r8,32
8000c49c:	c1 c1       	brne	8000c4d4 <udi_msc_setup+0x58>
8000c49e:	4a 88       	lddpc	r8,8000c53c <udi_msc_setup+0xc0>
8000c4a0:	11 98       	ld.ub	r8,r8[0x1]
8000c4a2:	e0 48 00 fe 	cp.w	r8,254
8000c4a6:	c1 71       	brne	8000c4d4 <udi_msc_setup+0x58>
8000c4a8:	4a 58       	lddpc	r8,8000c53c <udi_msc_setup+0xc0>
8000c4aa:	90 39       	ld.sh	r9,r8[0x6]
8000c4ac:	30 18       	mov	r8,1
8000c4ae:	f0 09 19 00 	cp.h	r9,r8
8000c4b2:	c0 30       	breq	8000c4b8 <udi_msc_setup+0x3c>
8000c4b4:	30 08       	mov	r8,0
8000c4b6:	c4 08       	rjmp	8000c536 <udi_msc_setup+0xba>
8000c4b8:	4a 18       	lddpc	r8,8000c53c <udi_msc_setup+0xc0>
8000c4ba:	90 18       	ld.sh	r8,r8[0x2]
8000c4bc:	58 08       	cp.w	r8,0
8000c4be:	c0 30       	breq	8000c4c4 <udi_msc_setup+0x48>
8000c4c0:	30 08       	mov	r8,0
8000c4c2:	c3 a8       	rjmp	8000c536 <udi_msc_setup+0xba>
8000c4c4:	49 e8       	lddpc	r8,8000c53c <udi_msc_setup+0xc0>
8000c4c6:	49 f9       	lddpc	r9,8000c540 <udi_msc_setup+0xc4>
8000c4c8:	91 29       	st.w	r8[0x8],r9
8000c4ca:	49 d9       	lddpc	r9,8000c53c <udi_msc_setup+0xc0>
8000c4cc:	30 18       	mov	r8,1
8000c4ce:	b2 68       	st.h	r9[0xc],r8
8000c4d0:	30 18       	mov	r8,1
8000c4d2:	c3 28       	rjmp	8000c536 <udi_msc_setup+0xba>
8000c4d4:	49 a8       	lddpc	r8,8000c53c <udi_msc_setup+0xc0>
8000c4d6:	11 88       	ld.ub	r8,r8[0x0]
8000c4d8:	10 99       	mov	r9,r8
8000c4da:	30 08       	mov	r8,0
8000c4dc:	f0 09 18 00 	cp.b	r9,r8
8000c4e0:	c2 a5       	brlt	8000c534 <udi_msc_setup+0xb8>
8000c4e2:	49 78       	lddpc	r8,8000c53c <udi_msc_setup+0xc0>
8000c4e4:	11 88       	ld.ub	r8,r8[0x0]
8000c4e6:	e2 18 00 60 	andl	r8,0x60,COH
8000c4ea:	e0 48 00 20 	cp.w	r8,32
8000c4ee:	c2 31       	brne	8000c534 <udi_msc_setup+0xb8>
8000c4f0:	49 38       	lddpc	r8,8000c53c <udi_msc_setup+0xc0>
8000c4f2:	11 98       	ld.ub	r8,r8[0x1]
8000c4f4:	e0 48 00 ff 	cp.w	r8,255
8000c4f8:	c1 e1       	brne	8000c534 <udi_msc_setup+0xb8>
8000c4fa:	49 18       	lddpc	r8,8000c53c <udi_msc_setup+0xc0>
8000c4fc:	90 38       	ld.sh	r8,r8[0x6]
8000c4fe:	58 08       	cp.w	r8,0
8000c500:	c0 30       	breq	8000c506 <udi_msc_setup+0x8a>
8000c502:	30 08       	mov	r8,0
8000c504:	c1 98       	rjmp	8000c536 <udi_msc_setup+0xba>
8000c506:	48 e8       	lddpc	r8,8000c53c <udi_msc_setup+0xc0>
8000c508:	90 18       	ld.sh	r8,r8[0x2]
8000c50a:	58 08       	cp.w	r8,0
8000c50c:	c0 30       	breq	8000c512 <udi_msc_setup+0x96>
8000c50e:	30 08       	mov	r8,0
8000c510:	c1 38       	rjmp	8000c536 <udi_msc_setup+0xba>
8000c512:	48 d9       	lddpc	r9,8000c544 <udi_msc_setup+0xc8>
8000c514:	30 08       	mov	r8,0
8000c516:	b2 88       	st.b	r9[0x0],r8
8000c518:	48 c9       	lddpc	r9,8000c548 <udi_msc_setup+0xcc>
8000c51a:	30 08       	mov	r8,0
8000c51c:	b2 88       	st.b	r9[0x0],r8
8000c51e:	30 2c       	mov	r12,2
8000c520:	f0 1f 00 0b 	mcall	8000c54c <udi_msc_setup+0xd0>
8000c524:	e0 6c 00 81 	mov	r12,129
8000c528:	f0 1f 00 09 	mcall	8000c54c <udi_msc_setup+0xd0>
8000c52c:	f0 1f 00 09 	mcall	8000c550 <udi_msc_setup+0xd4>
8000c530:	30 18       	mov	r8,1
8000c532:	c0 28       	rjmp	8000c536 <udi_msc_setup+0xba>
8000c534:	30 08       	mov	r8,0
8000c536:	10 9c       	mov	r12,r8
8000c538:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c53c:	00 00       	add	r0,r0
8000c53e:	0d e4       	ld.ub	r4,r6[0x6]
8000c540:	00 00       	add	r0,r0
8000c542:	08 10       	sub	r0,r4
8000c544:	00 00       	add	r0,r0
8000c546:	08 28       	rsub	r8,r4
8000c548:	00 00       	add	r0,r0
8000c54a:	08 29       	rsub	r9,r4
8000c54c:	80 00       	ld.sh	r0,r0[0x0]
8000c54e:	a6 d0       	st.b	r3[0x5],r0
8000c550:	80 00       	ld.sh	r0,r0[0x0]
8000c552:	c5 d8       	rjmp	8000c60c <udi_msc_cbw_wait+0x34>

8000c554 <udi_msc_getsetting>:
8000c554:	eb cd 40 80 	pushm	r7,lr
8000c558:	1a 97       	mov	r7,sp
8000c55a:	30 08       	mov	r8,0
8000c55c:	10 9c       	mov	r12,r8
8000c55e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c562:	d7 03       	nop

8000c564 <udi_msc_cbw_invalid>:
8000c564:	eb cd 40 80 	pushm	r7,lr
8000c568:	1a 97       	mov	r7,sp
8000c56a:	48 a8       	lddpc	r8,8000c590 <udi_msc_cbw_invalid+0x2c>
8000c56c:	11 88       	ld.ub	r8,r8[0x0]
8000c56e:	ec 18 00 01 	eorl	r8,0x1
8000c572:	5c 58       	castu.b	r8
8000c574:	c0 a1       	brne	8000c588 <udi_msc_cbw_invalid+0x24>
8000c576:	30 2c       	mov	r12,2
8000c578:	f0 1f 00 07 	mcall	8000c594 <udi_msc_cbw_invalid+0x30>
8000c57c:	fe cb 00 18 	sub	r11,pc,24
8000c580:	30 2c       	mov	r12,2
8000c582:	f0 1f 00 06 	mcall	8000c598 <udi_msc_cbw_invalid+0x34>
8000c586:	c0 28       	rjmp	8000c58a <udi_msc_cbw_invalid+0x26>
8000c588:	d7 03       	nop
8000c58a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c58e:	00 00       	add	r0,r0
8000c590:	00 00       	add	r0,r0
8000c592:	08 28       	rsub	r8,r4
8000c594:	80 00       	ld.sh	r0,r0[0x0]
8000c596:	a3 58       	asr	r8,0x3
8000c598:	80 00       	ld.sh	r0,r0[0x0]
8000c59a:	a7 6c       	lsl	r12,0x6

8000c59c <udi_msc_csw_invalid>:
8000c59c:	eb cd 40 80 	pushm	r7,lr
8000c5a0:	1a 97       	mov	r7,sp
8000c5a2:	48 b8       	lddpc	r8,8000c5cc <udi_msc_csw_invalid+0x30>
8000c5a4:	11 88       	ld.ub	r8,r8[0x0]
8000c5a6:	ec 18 00 01 	eorl	r8,0x1
8000c5aa:	5c 58       	castu.b	r8
8000c5ac:	c0 c1       	brne	8000c5c4 <udi_msc_csw_invalid+0x28>
8000c5ae:	e0 6c 00 81 	mov	r12,129
8000c5b2:	f0 1f 00 08 	mcall	8000c5d0 <udi_msc_csw_invalid+0x34>
8000c5b6:	fe cb 00 1a 	sub	r11,pc,26
8000c5ba:	e0 6c 00 81 	mov	r12,129
8000c5be:	f0 1f 00 06 	mcall	8000c5d4 <udi_msc_csw_invalid+0x38>
8000c5c2:	c0 28       	rjmp	8000c5c6 <udi_msc_csw_invalid+0x2a>
8000c5c4:	d7 03       	nop
8000c5c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c5ca:	00 00       	add	r0,r0
8000c5cc:	00 00       	add	r0,r0
8000c5ce:	08 28       	rsub	r8,r4
8000c5d0:	80 00       	ld.sh	r0,r0[0x0]
8000c5d2:	a3 58       	asr	r8,0x3
8000c5d4:	80 00       	ld.sh	r0,r0[0x0]
8000c5d6:	a7 6c       	lsl	r12,0x6

8000c5d8 <udi_msc_cbw_wait>:
8000c5d8:	eb cd 40 80 	pushm	r7,lr
8000c5dc:	1a 97       	mov	r7,sp
8000c5de:	48 aa       	lddpc	r10,8000c604 <udi_msc_cbw_wait+0x2c>
8000c5e0:	48 a8       	lddpc	r8,8000c608 <udi_msc_cbw_wait+0x30>
8000c5e2:	31 f9       	mov	r9,31
8000c5e4:	30 1b       	mov	r11,1
8000c5e6:	30 2c       	mov	r12,2
8000c5e8:	f0 1f 00 09 	mcall	8000c60c <udi_msc_cbw_wait+0x34>
8000c5ec:	18 98       	mov	r8,r12
8000c5ee:	ec 18 00 01 	eorl	r8,0x1
8000c5f2:	5c 58       	castu.b	r8
8000c5f4:	c0 60       	breq	8000c600 <udi_msc_cbw_wait+0x28>
8000c5f6:	fe cb 00 1e 	sub	r11,pc,30
8000c5fa:	30 2c       	mov	r12,2
8000c5fc:	f0 1f 00 05 	mcall	8000c610 <udi_msc_cbw_wait+0x38>
8000c600:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c604:	00 00       	add	r0,r0
8000c606:	07 f0       	ld.ub	r0,r3[0x7]
8000c608:	80 00       	ld.sh	r0,r0[0x0]
8000c60a:	c6 14       	brge	8000c6cc <udi_msc_cbw_received+0xb8>
8000c60c:	80 00       	ld.sh	r0,r0[0x0]
8000c60e:	a5 ac       	sbr	r12,0x4
8000c610:	80 00       	ld.sh	r0,r0[0x0]
8000c612:	a7 6c       	lsl	r12,0x6

8000c614 <udi_msc_cbw_received>:
8000c614:	eb cd 40 80 	pushm	r7,lr
8000c618:	1a 97       	mov	r7,sp
8000c61a:	20 3d       	sub	sp,12
8000c61c:	ef 4c ff fc 	st.w	r7[-4],r12
8000c620:	ef 4b ff f8 	st.w	r7[-8],r11
8000c624:	14 98       	mov	r8,r10
8000c626:	ef 68 ff f4 	st.b	r7[-12],r8
8000c62a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c62e:	58 08       	cp.w	r8,0
8000c630:	c6 11       	brne	8000c6f2 <udi_msc_cbw_received+0xde>
8000c632:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c636:	59 f8       	cp.w	r8,31
8000c638:	c0 91       	brne	8000c64a <udi_msc_cbw_received+0x36>
8000c63a:	4b 18       	lddpc	r8,8000c6fc <udi_msc_cbw_received+0xe8>
8000c63c:	70 08       	ld.w	r8,r8[0x0]
8000c63e:	e0 69 42 43 	mov	r9,16963
8000c642:	ea 19 55 53 	orh	r9,0x5553
8000c646:	12 38       	cp.w	r8,r9
8000c648:	c0 90       	breq	8000c65a <udi_msc_cbw_received+0x46>
8000c64a:	4a e9       	lddpc	r9,8000c700 <udi_msc_cbw_received+0xec>
8000c64c:	30 18       	mov	r8,1
8000c64e:	b2 88       	st.b	r9[0x0],r8
8000c650:	f0 1f 00 2d 	mcall	8000c704 <udi_msc_cbw_received+0xf0>
8000c654:	f0 1f 00 2d 	mcall	8000c708 <udi_msc_cbw_received+0xf4>
8000c658:	c4 e8       	rjmp	8000c6f4 <udi_msc_cbw_received+0xe0>
8000c65a:	4a 98       	lddpc	r8,8000c6fc <udi_msc_cbw_received+0xe8>
8000c65c:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000c660:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000c664:	4a 69       	lddpc	r9,8000c6fc <udi_msc_cbw_received+0xe8>
8000c666:	f3 68 00 0d 	st.b	r9[13],r8
8000c66a:	4a 58       	lddpc	r8,8000c6fc <udi_msc_cbw_received+0xe8>
8000c66c:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000c670:	4a 78       	lddpc	r8,8000c70c <udi_msc_cbw_received+0xf8>
8000c672:	11 88       	ld.ub	r8,r8[0x0]
8000c674:	f0 09 18 00 	cp.b	r9,r8
8000c678:	e0 88 00 07 	brls	8000c686 <udi_msc_cbw_received+0x72>
8000c67c:	f0 1f 00 25 	mcall	8000c710 <udi_msc_cbw_received+0xfc>
8000c680:	f0 1f 00 25 	mcall	8000c714 <udi_msc_cbw_received+0x100>
8000c684:	c3 88       	rjmp	8000c6f4 <udi_msc_cbw_received+0xe0>
8000c686:	49 e8       	lddpc	r8,8000c6fc <udi_msc_cbw_received+0xe8>
8000c688:	70 28       	ld.w	r8,r8[0x8]
8000c68a:	5c b8       	swap.b	r8
8000c68c:	10 99       	mov	r9,r8
8000c68e:	4a 38       	lddpc	r8,8000c718 <udi_msc_cbw_received+0x104>
8000c690:	91 29       	st.w	r8[0x8],r9
8000c692:	49 b8       	lddpc	r8,8000c6fc <udi_msc_cbw_received+0xe8>
8000c694:	f1 38 00 0f 	ld.ub	r8,r8[15]
8000c698:	e0 48 00 5a 	cp.w	r8,90
8000c69c:	e0 8b 00 26 	brhi	8000c6e8 <udi_msc_cbw_received+0xd4>
8000c6a0:	49 f9       	lddpc	r9,8000c71c <udi_msc_cbw_received+0x108>
8000c6a2:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
8000c6a6:	f0 1f 00 1f 	mcall	8000c720 <udi_msc_cbw_received+0x10c>
8000c6aa:	c2 58       	rjmp	8000c6f4 <udi_msc_cbw_received+0xe0>
8000c6ac:	f0 1f 00 1e 	mcall	8000c724 <udi_msc_cbw_received+0x110>
8000c6b0:	c2 28       	rjmp	8000c6f4 <udi_msc_cbw_received+0xe0>
8000c6b2:	30 0c       	mov	r12,0
8000c6b4:	f0 1f 00 1d 	mcall	8000c728 <udi_msc_cbw_received+0x114>
8000c6b8:	c1 e8       	rjmp	8000c6f4 <udi_msc_cbw_received+0xe0>
8000c6ba:	30 1c       	mov	r12,1
8000c6bc:	f0 1f 00 1b 	mcall	8000c728 <udi_msc_cbw_received+0x114>
8000c6c0:	c1 a8       	rjmp	8000c6f4 <udi_msc_cbw_received+0xe0>
8000c6c2:	f0 1f 00 1b 	mcall	8000c72c <udi_msc_cbw_received+0x118>
8000c6c6:	c1 78       	rjmp	8000c6f4 <udi_msc_cbw_received+0xe0>
8000c6c8:	f0 1f 00 1a 	mcall	8000c730 <udi_msc_cbw_received+0x11c>
8000c6cc:	c1 48       	rjmp	8000c6f4 <udi_msc_cbw_received+0xe0>
8000c6ce:	f0 1f 00 1a 	mcall	8000c734 <udi_msc_cbw_received+0x120>
8000c6d2:	f0 1f 00 11 	mcall	8000c714 <udi_msc_cbw_received+0x100>
8000c6d6:	c0 f8       	rjmp	8000c6f4 <udi_msc_cbw_received+0xe0>
8000c6d8:	30 1c       	mov	r12,1
8000c6da:	f0 1f 00 18 	mcall	8000c738 <udi_msc_cbw_received+0x124>
8000c6de:	c0 b8       	rjmp	8000c6f4 <udi_msc_cbw_received+0xe0>
8000c6e0:	30 0c       	mov	r12,0
8000c6e2:	f0 1f 00 16 	mcall	8000c738 <udi_msc_cbw_received+0x124>
8000c6e6:	c0 78       	rjmp	8000c6f4 <udi_msc_cbw_received+0xe0>
8000c6e8:	f0 1f 00 15 	mcall	8000c73c <udi_msc_cbw_received+0x128>
8000c6ec:	f0 1f 00 0a 	mcall	8000c714 <udi_msc_cbw_received+0x100>
8000c6f0:	c0 28       	rjmp	8000c6f4 <udi_msc_cbw_received+0xe0>
8000c6f2:	d7 03       	nop
8000c6f4:	2f dd       	sub	sp,-12
8000c6f6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c6fa:	00 00       	add	r0,r0
8000c6fc:	00 00       	add	r0,r0
8000c6fe:	07 f0       	ld.ub	r0,r3[0x7]
8000c700:	00 00       	add	r0,r0
8000c702:	08 28       	rsub	r8,r4
8000c704:	80 00       	ld.sh	r0,r0[0x0]
8000c706:	c5 64       	brge	8000c7b2 <udi_msc_data_send+0x12>
8000c708:	80 00       	ld.sh	r0,r0[0x0]
8000c70a:	c5 9c       	rcall	8000c7bc <udi_msc_data_send+0x1c>
8000c70c:	00 00       	add	r0,r0
8000c70e:	08 10       	sub	r0,r4
8000c710:	80 00       	ld.sh	r0,r0[0x0]
8000c712:	ca 3c       	rcall	8000c858 <udi_msc_csw_process+0x1c>
8000c714:	80 00       	ld.sh	r0,r0[0x0]
8000c716:	c8 3c       	rcall	8000c81c <udi_msc_data_sent+0x2c>
8000c718:	00 00       	add	r0,r0
8000c71a:	01 54       	ld.sh	r4,--r0
8000c71c:	80 00       	ld.sh	r0,r0[0x0]
8000c71e:	f2 5c 80 00 	cp.w	r12,-819200
8000c722:	ca 74       	brge	8000c670 <udi_msc_cbw_received+0x5c>
8000c724:	80 00       	ld.sh	r0,r0[0x0]
8000c726:	ca d8       	rjmp	8000c880 <udi_msc_csw_process+0x44>
8000c728:	80 00       	ld.sh	r0,r0[0x0]
8000c72a:	cc 70       	breq	8000c6b8 <udi_msc_cbw_received+0xa4>
8000c72c:	80 00       	ld.sh	r0,r0[0x0]
8000c72e:	cc 48       	rjmp	8000c8b6 <udi_msc_csw_send+0x1e>
8000c730:	80 00       	ld.sh	r0,r0[0x0]
8000c732:	cd c0       	breq	8000c6ea <udi_msc_cbw_received+0xd6>
8000c734:	80 00       	ld.sh	r0,r0[0x0]
8000c736:	c9 b0       	breq	8000c66c <udi_msc_cbw_received+0x58>
8000c738:	80 00       	ld.sh	r0,r0[0x0]
8000c73a:	ce 5c       	rcall	8000c904 <udi_msc_clear_sense+0x4>
8000c73c:	80 00       	ld.sh	r0,r0[0x0]
8000c73e:	ca 58       	rjmp	8000c888 <udi_msc_csw_process+0x4c>

8000c740 <udi_msc_cbw_validate>:
8000c740:	eb cd 40 80 	pushm	r7,lr
8000c744:	1a 97       	mov	r7,sp
8000c746:	20 2d       	sub	sp,8
8000c748:	ef 4c ff fc 	st.w	r7[-4],r12
8000c74c:	16 98       	mov	r8,r11
8000c74e:	ef 68 ff f8 	st.b	r7[-8],r8
8000c752:	49 08       	lddpc	r8,8000c790 <udi_msc_cbw_validate+0x50>
8000c754:	f1 39 00 0c 	ld.ub	r9,r8[12]
8000c758:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c75c:	f3 e8 20 08 	eor	r8,r9,r8
8000c760:	5c 58       	castu.b	r8
8000c762:	10 99       	mov	r9,r8
8000c764:	30 08       	mov	r8,0
8000c766:	f0 09 18 00 	cp.b	r9,r8
8000c76a:	c0 75       	brlt	8000c778 <udi_msc_cbw_validate+0x38>
8000c76c:	48 a8       	lddpc	r8,8000c794 <udi_msc_cbw_validate+0x54>
8000c76e:	70 29       	ld.w	r9,r8[0x8]
8000c770:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c774:	10 39       	cp.w	r9,r8
8000c776:	c0 72       	brcc	8000c784 <udi_msc_cbw_validate+0x44>
8000c778:	f0 1f 00 08 	mcall	8000c798 <udi_msc_cbw_validate+0x58>
8000c77c:	f0 1f 00 08 	mcall	8000c79c <udi_msc_cbw_validate+0x5c>
8000c780:	30 08       	mov	r8,0
8000c782:	c0 28       	rjmp	8000c786 <udi_msc_cbw_validate+0x46>
8000c784:	30 18       	mov	r8,1
8000c786:	10 9c       	mov	r12,r8
8000c788:	2f ed       	sub	sp,-8
8000c78a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c78e:	00 00       	add	r0,r0
8000c790:	00 00       	add	r0,r0
8000c792:	07 f0       	ld.ub	r0,r3[0x7]
8000c794:	00 00       	add	r0,r0
8000c796:	01 54       	ld.sh	r4,--r0
8000c798:	80 00       	ld.sh	r0,r0[0x0]
8000c79a:	ca 3c       	rcall	8000c8e0 <udi_msc_csw_sent+0x4>
8000c79c:	80 00       	ld.sh	r0,r0[0x0]
8000c79e:	c8 3c       	rcall	8000c8a4 <udi_msc_csw_send+0xc>

8000c7a0 <udi_msc_data_send>:
8000c7a0:	eb cd 40 80 	pushm	r7,lr
8000c7a4:	1a 97       	mov	r7,sp
8000c7a6:	20 2d       	sub	sp,8
8000c7a8:	ef 4c ff fc 	st.w	r7[-4],r12
8000c7ac:	16 98       	mov	r8,r11
8000c7ae:	ef 68 ff f8 	st.b	r7[-8],r8
8000c7b2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000c7b6:	48 b8       	lddpc	r8,8000c7e0 <udi_msc_data_send+0x40>
8000c7b8:	ee fa ff fc 	ld.w	r10,r7[-4]
8000c7bc:	30 1b       	mov	r11,1
8000c7be:	e0 6c 00 81 	mov	r12,129
8000c7c2:	f0 1f 00 09 	mcall	8000c7e4 <udi_msc_data_send+0x44>
8000c7c6:	18 98       	mov	r8,r12
8000c7c8:	ec 18 00 01 	eorl	r8,0x1
8000c7cc:	5c 58       	castu.b	r8
8000c7ce:	c0 50       	breq	8000c7d8 <udi_msc_data_send+0x38>
8000c7d0:	f0 1f 00 06 	mcall	8000c7e8 <udi_msc_data_send+0x48>
8000c7d4:	f0 1f 00 06 	mcall	8000c7ec <udi_msc_data_send+0x4c>
8000c7d8:	2f ed       	sub	sp,-8
8000c7da:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c7de:	00 00       	add	r0,r0
8000c7e0:	80 00       	ld.sh	r0,r0[0x0]
8000c7e2:	c7 f0       	breq	8000c8e0 <udi_msc_csw_sent+0x4>
8000c7e4:	80 00       	ld.sh	r0,r0[0x0]
8000c7e6:	a5 ac       	sbr	r12,0x4
8000c7e8:	80 00       	ld.sh	r0,r0[0x0]
8000c7ea:	ca 08       	rjmp	8000c92a <udi_msc_sense_fail+0x2>
8000c7ec:	80 00       	ld.sh	r0,r0[0x0]
8000c7ee:	c8 3c       	rcall	8000c8f4 <udi_msc_csw_sent+0x18>

8000c7f0 <udi_msc_data_sent>:
8000c7f0:	eb cd 40 80 	pushm	r7,lr
8000c7f4:	1a 97       	mov	r7,sp
8000c7f6:	20 3d       	sub	sp,12
8000c7f8:	ef 4c ff fc 	st.w	r7[-4],r12
8000c7fc:	ef 4b ff f8 	st.w	r7[-8],r11
8000c800:	14 98       	mov	r8,r10
8000c802:	ef 68 ff f4 	st.b	r7[-12],r8
8000c806:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c80a:	58 08       	cp.w	r8,0
8000c80c:	c0 d1       	brne	8000c826 <udi_msc_data_sent+0x36>
8000c80e:	f0 1f 00 09 	mcall	8000c830 <udi_msc_data_sent+0x40>
8000c812:	48 98       	lddpc	r8,8000c834 <udi_msc_data_sent+0x44>
8000c814:	70 29       	ld.w	r9,r8[0x8]
8000c816:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c81a:	10 19       	sub	r9,r8
8000c81c:	48 68       	lddpc	r8,8000c834 <udi_msc_data_sent+0x44>
8000c81e:	91 29       	st.w	r8[0x8],r9
8000c820:	f0 1f 00 06 	mcall	8000c838 <udi_msc_data_sent+0x48>
8000c824:	c0 28       	rjmp	8000c828 <udi_msc_data_sent+0x38>
8000c826:	d7 03       	nop
8000c828:	2f dd       	sub	sp,-12
8000c82a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c82e:	00 00       	add	r0,r0
8000c830:	80 00       	ld.sh	r0,r0[0x0]
8000c832:	c9 b0       	breq	8000c768 <udi_msc_cbw_validate+0x28>
8000c834:	00 00       	add	r0,r0
8000c836:	01 54       	ld.sh	r4,--r0
8000c838:	80 00       	ld.sh	r0,r0[0x0]
8000c83a:	c8 3c       	rcall	8000c940 <udi_msc_sense_fail+0x18>

8000c83c <udi_msc_csw_process>:
8000c83c:	eb cd 40 80 	pushm	r7,lr
8000c840:	1a 97       	mov	r7,sp
8000c842:	49 28       	lddpc	r8,8000c888 <udi_msc_csw_process+0x4c>
8000c844:	70 28       	ld.w	r8,r8[0x8]
8000c846:	58 08       	cp.w	r8,0
8000c848:	c1 10       	breq	8000c86a <udi_msc_csw_process+0x2e>
8000c84a:	49 18       	lddpc	r8,8000c88c <udi_msc_csw_process+0x50>
8000c84c:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000c850:	10 99       	mov	r9,r8
8000c852:	30 08       	mov	r8,0
8000c854:	f0 09 18 00 	cp.b	r9,r8
8000c858:	c0 64       	brge	8000c864 <udi_msc_csw_process+0x28>
8000c85a:	e0 6c 00 81 	mov	r12,129
8000c85e:	f0 1f 00 0d 	mcall	8000c890 <udi_msc_csw_process+0x54>
8000c862:	c0 48       	rjmp	8000c86a <udi_msc_csw_process+0x2e>
8000c864:	30 2c       	mov	r12,2
8000c866:	f0 1f 00 0b 	mcall	8000c890 <udi_msc_csw_process+0x54>
8000c86a:	48 98       	lddpc	r8,8000c88c <udi_msc_csw_process+0x50>
8000c86c:	70 19       	ld.w	r9,r8[0x4]
8000c86e:	48 78       	lddpc	r8,8000c888 <udi_msc_csw_process+0x4c>
8000c870:	91 19       	st.w	r8[0x4],r9
8000c872:	48 68       	lddpc	r8,8000c888 <udi_msc_csw_process+0x4c>
8000c874:	70 28       	ld.w	r8,r8[0x8]
8000c876:	5c b8       	swap.b	r8
8000c878:	10 99       	mov	r9,r8
8000c87a:	48 48       	lddpc	r8,8000c888 <udi_msc_csw_process+0x4c>
8000c87c:	91 29       	st.w	r8[0x8],r9
8000c87e:	f0 1f 00 06 	mcall	8000c894 <udi_msc_csw_process+0x58>
8000c882:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c886:	00 00       	add	r0,r0
8000c888:	00 00       	add	r0,r0
8000c88a:	01 54       	ld.sh	r4,--r0
8000c88c:	00 00       	add	r0,r0
8000c88e:	07 f0       	ld.ub	r0,r3[0x7]
8000c890:	80 00       	ld.sh	r0,r0[0x0]
8000c892:	a3 58       	asr	r8,0x3
8000c894:	80 00       	ld.sh	r0,r0[0x0]
8000c896:	c8 98       	rjmp	8000c9a8 <udi_msc_sense_fail+0x80>

8000c898 <udi_msc_csw_send>:
8000c898:	eb cd 40 80 	pushm	r7,lr
8000c89c:	1a 97       	mov	r7,sp
8000c89e:	48 ba       	lddpc	r10,8000c8c8 <udi_msc_csw_send+0x30>
8000c8a0:	48 b8       	lddpc	r8,8000c8cc <udi_msc_csw_send+0x34>
8000c8a2:	30 d9       	mov	r9,13
8000c8a4:	30 0b       	mov	r11,0
8000c8a6:	e0 6c 00 81 	mov	r12,129
8000c8aa:	f0 1f 00 0a 	mcall	8000c8d0 <udi_msc_csw_send+0x38>
8000c8ae:	18 98       	mov	r8,r12
8000c8b0:	ec 18 00 01 	eorl	r8,0x1
8000c8b4:	5c 58       	castu.b	r8
8000c8b6:	c0 60       	breq	8000c8c2 <udi_msc_csw_send+0x2a>
8000c8b8:	48 7b       	lddpc	r11,8000c8d4 <udi_msc_csw_send+0x3c>
8000c8ba:	e0 6c 00 81 	mov	r12,129
8000c8be:	f0 1f 00 07 	mcall	8000c8d8 <udi_msc_csw_send+0x40>
8000c8c2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8c6:	00 00       	add	r0,r0
8000c8c8:	00 00       	add	r0,r0
8000c8ca:	01 54       	ld.sh	r4,--r0
8000c8cc:	80 00       	ld.sh	r0,r0[0x0]
8000c8ce:	c8 dc       	rcall	8000c9e8 <udi_msc_sense_fail_not_present+0x18>
8000c8d0:	80 00       	ld.sh	r0,r0[0x0]
8000c8d2:	a5 ac       	sbr	r12,0x4
8000c8d4:	80 00       	ld.sh	r0,r0[0x0]
8000c8d6:	c8 98       	rjmp	8000c9e8 <udi_msc_sense_fail_not_present+0x18>
8000c8d8:	80 00       	ld.sh	r0,r0[0x0]
8000c8da:	a7 6c       	lsl	r12,0x6

8000c8dc <udi_msc_csw_sent>:
8000c8dc:	eb cd 40 80 	pushm	r7,lr
8000c8e0:	1a 97       	mov	r7,sp
8000c8e2:	20 3d       	sub	sp,12
8000c8e4:	ef 4c ff fc 	st.w	r7[-4],r12
8000c8e8:	ef 4b ff f8 	st.w	r7[-8],r11
8000c8ec:	14 98       	mov	r8,r10
8000c8ee:	ef 68 ff f4 	st.b	r7[-12],r8
8000c8f2:	f0 1f 00 03 	mcall	8000c8fc <udi_msc_csw_sent+0x20>
8000c8f6:	2f dd       	sub	sp,-12
8000c8f8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8fc:	80 00       	ld.sh	r0,r0[0x0]
8000c8fe:	c5 d8       	rjmp	8000c9b8 <udi_msc_sense_pass+0x8>

8000c900 <udi_msc_clear_sense>:
8000c900:	eb cd 40 80 	pushm	r7,lr
8000c904:	1a 97       	mov	r7,sp
8000c906:	31 2a       	mov	r10,18
8000c908:	30 0b       	mov	r11,0
8000c90a:	48 6c       	lddpc	r12,8000c920 <udi_msc_clear_sense+0x20>
8000c90c:	f0 1f 00 06 	mcall	8000c924 <udi_msc_clear_sense+0x24>
8000c910:	48 49       	lddpc	r9,8000c920 <udi_msc_clear_sense+0x20>
8000c912:	3f 08       	mov	r8,-16
8000c914:	b2 88       	st.b	r9[0x0],r8
8000c916:	48 39       	lddpc	r9,8000c920 <udi_msc_clear_sense+0x20>
8000c918:	30 a8       	mov	r8,10
8000c91a:	b2 f8       	st.b	r9[0x7],r8
8000c91c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c920:	00 00       	add	r0,r0
8000c922:	08 14       	sub	r4,r4
8000c924:	80 00       	ld.sh	r0,r0[0x0]
8000c926:	e9 26 eb cd 	ld.sb	r6,r4[-5171]

8000c928 <udi_msc_sense_fail>:
8000c928:	eb cd 40 80 	pushm	r7,lr
8000c92c:	1a 97       	mov	r7,sp
8000c92e:	20 3d       	sub	sp,12
8000c930:	18 99       	mov	r9,r12
8000c932:	16 98       	mov	r8,r11
8000c934:	ef 4a ff f4 	st.w	r7[-12],r10
8000c938:	ef 69 ff fc 	st.b	r7[-4],r9
8000c93c:	ef 58 ff f8 	st.h	r7[-8],r8
8000c940:	f0 1f 00 19 	mcall	8000c9a4 <udi_msc_sense_fail+0x7c>
8000c944:	49 99       	lddpc	r9,8000c9a8 <udi_msc_sense_fail+0x80>
8000c946:	30 18       	mov	r8,1
8000c948:	f3 68 00 0c 	st.b	r9[12],r8
8000c94c:	49 89       	lddpc	r9,8000c9ac <udi_msc_sense_fail+0x84>
8000c94e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c952:	b2 a8       	st.b	r9[0x2],r8
8000c954:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c958:	b9 88       	lsr	r8,0x18
8000c95a:	5c 58       	castu.b	r8
8000c95c:	49 49       	lddpc	r9,8000c9ac <udi_msc_sense_fail+0x84>
8000c95e:	b2 b8       	st.b	r9[0x3],r8
8000c960:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c964:	b1 88       	lsr	r8,0x10
8000c966:	5c 58       	castu.b	r8
8000c968:	49 19       	lddpc	r9,8000c9ac <udi_msc_sense_fail+0x84>
8000c96a:	b2 c8       	st.b	r9[0x4],r8
8000c96c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c970:	a9 88       	lsr	r8,0x8
8000c972:	5c 58       	castu.b	r8
8000c974:	48 e9       	lddpc	r9,8000c9ac <udi_msc_sense_fail+0x84>
8000c976:	b2 d8       	st.b	r9[0x5],r8
8000c978:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c97c:	5c 58       	castu.b	r8
8000c97e:	48 c9       	lddpc	r9,8000c9ac <udi_msc_sense_fail+0x84>
8000c980:	b2 e8       	st.b	r9[0x6],r8
8000c982:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000c986:	a9 88       	lsr	r8,0x8
8000c988:	5c 88       	casts.h	r8
8000c98a:	5c 58       	castu.b	r8
8000c98c:	48 89       	lddpc	r9,8000c9ac <udi_msc_sense_fail+0x84>
8000c98e:	f3 68 00 0c 	st.b	r9[12],r8
8000c992:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000c996:	5c 58       	castu.b	r8
8000c998:	48 59       	lddpc	r9,8000c9ac <udi_msc_sense_fail+0x84>
8000c99a:	f3 68 00 0d 	st.b	r9[13],r8
8000c99e:	2f dd       	sub	sp,-12
8000c9a0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9a4:	80 00       	ld.sh	r0,r0[0x0]
8000c9a6:	c9 00       	breq	8000c8c6 <udi_msc_csw_send+0x2e>
8000c9a8:	00 00       	add	r0,r0
8000c9aa:	01 54       	ld.sh	r4,--r0
8000c9ac:	00 00       	add	r0,r0
8000c9ae:	08 14       	sub	r4,r4

8000c9b0 <udi_msc_sense_pass>:
8000c9b0:	eb cd 40 80 	pushm	r7,lr
8000c9b4:	1a 97       	mov	r7,sp
8000c9b6:	f0 1f 00 05 	mcall	8000c9c8 <udi_msc_sense_pass+0x18>
8000c9ba:	48 59       	lddpc	r9,8000c9cc <udi_msc_sense_pass+0x1c>
8000c9bc:	30 08       	mov	r8,0
8000c9be:	f3 68 00 0c 	st.b	r9[12],r8
8000c9c2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9c6:	00 00       	add	r0,r0
8000c9c8:	80 00       	ld.sh	r0,r0[0x0]
8000c9ca:	c9 00       	breq	8000c8ea <udi_msc_csw_sent+0xe>
8000c9cc:	00 00       	add	r0,r0
8000c9ce:	01 54       	ld.sh	r4,--r0

8000c9d0 <udi_msc_sense_fail_not_present>:
8000c9d0:	eb cd 40 80 	pushm	r7,lr
8000c9d4:	1a 97       	mov	r7,sp
8000c9d6:	30 0a       	mov	r10,0
8000c9d8:	e0 6b 3a 00 	mov	r11,14848
8000c9dc:	30 2c       	mov	r12,2
8000c9de:	f0 1f 00 03 	mcall	8000c9e8 <udi_msc_sense_fail_not_present+0x18>
8000c9e2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9e6:	00 00       	add	r0,r0
8000c9e8:	80 00       	ld.sh	r0,r0[0x0]
8000c9ea:	c9 28       	rjmp	8000cb0e <udi_msc_spc_inquiry+0x36>

8000c9ec <udi_msc_sense_fail_busy_or_change>:
8000c9ec:	eb cd 40 80 	pushm	r7,lr
8000c9f0:	1a 97       	mov	r7,sp
8000c9f2:	30 0a       	mov	r10,0
8000c9f4:	e0 6b 28 00 	mov	r11,10240
8000c9f8:	30 6c       	mov	r12,6
8000c9fa:	f0 1f 00 03 	mcall	8000ca04 <udi_msc_sense_fail_busy_or_change+0x18>
8000c9fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca02:	00 00       	add	r0,r0
8000ca04:	80 00       	ld.sh	r0,r0[0x0]
8000ca06:	c9 28       	rjmp	8000cb2a <udi_msc_spc_inquiry+0x52>

8000ca08 <udi_msc_sense_fail_hardware>:
8000ca08:	eb cd 40 80 	pushm	r7,lr
8000ca0c:	1a 97       	mov	r7,sp
8000ca0e:	30 0a       	mov	r10,0
8000ca10:	30 0b       	mov	r11,0
8000ca12:	30 4c       	mov	r12,4
8000ca14:	f0 1f 00 02 	mcall	8000ca1c <udi_msc_sense_fail_hardware+0x14>
8000ca18:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca1c:	80 00       	ld.sh	r0,r0[0x0]
8000ca1e:	c9 28       	rjmp	8000cb42 <udi_msc_spc_inquiry+0x6a>

8000ca20 <udi_msc_sense_fail_protected>:
8000ca20:	eb cd 40 80 	pushm	r7,lr
8000ca24:	1a 97       	mov	r7,sp
8000ca26:	30 0a       	mov	r10,0
8000ca28:	e0 6b 27 00 	mov	r11,9984
8000ca2c:	30 7c       	mov	r12,7
8000ca2e:	f0 1f 00 03 	mcall	8000ca38 <udi_msc_sense_fail_protected+0x18>
8000ca32:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca36:	00 00       	add	r0,r0
8000ca38:	80 00       	ld.sh	r0,r0[0x0]
8000ca3a:	c9 28       	rjmp	8000cb5e <udi_msc_spc_inquiry+0x86>

8000ca3c <udi_msc_sense_fail_cdb_invalid>:
8000ca3c:	eb cd 40 80 	pushm	r7,lr
8000ca40:	1a 97       	mov	r7,sp
8000ca42:	30 0a       	mov	r10,0
8000ca44:	e0 6b 24 00 	mov	r11,9216
8000ca48:	30 5c       	mov	r12,5
8000ca4a:	f0 1f 00 03 	mcall	8000ca54 <udi_msc_sense_fail_cdb_invalid+0x18>
8000ca4e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca52:	00 00       	add	r0,r0
8000ca54:	80 00       	ld.sh	r0,r0[0x0]
8000ca56:	c9 28       	rjmp	8000cb7a <udi_msc_spc_inquiry+0xa2>

8000ca58 <udi_msc_sense_command_invalid>:
8000ca58:	eb cd 40 80 	pushm	r7,lr
8000ca5c:	1a 97       	mov	r7,sp
8000ca5e:	30 0a       	mov	r10,0
8000ca60:	e0 6b 20 00 	mov	r11,8192
8000ca64:	30 5c       	mov	r12,5
8000ca66:	f0 1f 00 03 	mcall	8000ca70 <udi_msc_sense_command_invalid+0x18>
8000ca6a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca6e:	00 00       	add	r0,r0
8000ca70:	80 00       	ld.sh	r0,r0[0x0]
8000ca72:	c9 28       	rjmp	8000cb96 <udi_msc_spc_inquiry+0xbe>

8000ca74 <udi_msc_spc_requestsense>:
8000ca74:	eb cd 40 80 	pushm	r7,lr
8000ca78:	1a 97       	mov	r7,sp
8000ca7a:	20 1d       	sub	sp,4
8000ca7c:	49 38       	lddpc	r8,8000cac8 <udi_msc_spc_requestsense+0x54>
8000ca7e:	f1 38 00 13 	ld.ub	r8,r8[19]
8000ca82:	ef 68 ff ff 	st.b	r7[-1],r8
8000ca86:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ca8a:	31 28       	mov	r8,18
8000ca8c:	f0 09 18 00 	cp.b	r9,r8
8000ca90:	e0 88 00 05 	brls	8000ca9a <udi_msc_spc_requestsense+0x26>
8000ca94:	31 28       	mov	r8,18
8000ca96:	ef 68 ff ff 	st.b	r7[-1],r8
8000ca9a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ca9e:	e0 6b 00 80 	mov	r11,128
8000caa2:	10 9c       	mov	r12,r8
8000caa4:	f0 1f 00 0a 	mcall	8000cacc <udi_msc_spc_requestsense+0x58>
8000caa8:	18 98       	mov	r8,r12
8000caaa:	ec 18 00 01 	eorl	r8,0x1
8000caae:	5c 58       	castu.b	r8
8000cab0:	c0 81       	brne	8000cac0 <udi_msc_spc_requestsense+0x4c>
8000cab2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cab6:	10 9b       	mov	r11,r8
8000cab8:	48 6c       	lddpc	r12,8000cad0 <udi_msc_spc_requestsense+0x5c>
8000caba:	f0 1f 00 07 	mcall	8000cad4 <udi_msc_spc_requestsense+0x60>
8000cabe:	c0 28       	rjmp	8000cac2 <udi_msc_spc_requestsense+0x4e>
8000cac0:	d7 03       	nop
8000cac2:	2f fd       	sub	sp,-4
8000cac4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cac8:	00 00       	add	r0,r0
8000caca:	07 f0       	ld.ub	r0,r3[0x7]
8000cacc:	80 00       	ld.sh	r0,r0[0x0]
8000cace:	c7 40       	breq	8000cbb6 <udi_msc_spc_inquiry+0xde>
8000cad0:	00 00       	add	r0,r0
8000cad2:	08 14       	sub	r4,r4
8000cad4:	80 00       	ld.sh	r0,r0[0x0]
8000cad6:	c7 a0       	breq	8000cbca <udi_msc_spc_inquiry+0xf2>

8000cad8 <udi_msc_spc_inquiry>:
8000cad8:	eb cd 40 80 	pushm	r7,lr
8000cadc:	1a 97       	mov	r7,sp
8000cade:	20 1d       	sub	sp,4
8000cae0:	4b e8       	lddpc	r8,8000cbd8 <udi_msc_spc_inquiry+0x100>
8000cae2:	f1 38 00 13 	ld.ub	r8,r8[19]
8000cae6:	ef 68 ff fe 	st.b	r7[-2],r8
8000caea:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000caee:	32 48       	mov	r8,36
8000caf0:	f0 09 18 00 	cp.b	r9,r8
8000caf4:	e0 88 00 05 	brls	8000cafe <udi_msc_spc_inquiry+0x26>
8000caf8:	32 48       	mov	r8,36
8000cafa:	ef 68 ff fe 	st.b	r7[-2],r8
8000cafe:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000cb02:	e0 6b 00 80 	mov	r11,128
8000cb06:	10 9c       	mov	r12,r8
8000cb08:	f0 1f 00 35 	mcall	8000cbdc <udi_msc_spc_inquiry+0x104>
8000cb0c:	18 98       	mov	r8,r12
8000cb0e:	ec 18 00 01 	eorl	r8,0x1
8000cb12:	5c 58       	castu.b	r8
8000cb14:	c5 e1       	brne	8000cbd0 <udi_msc_spc_inquiry+0xf8>
8000cb16:	4b 18       	lddpc	r8,8000cbd8 <udi_msc_spc_inquiry+0x100>
8000cb18:	f1 38 00 10 	ld.ub	r8,r8[16]
8000cb1c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000cb20:	c0 61       	brne	8000cb2c <udi_msc_spc_inquiry+0x54>
8000cb22:	4a e8       	lddpc	r8,8000cbd8 <udi_msc_spc_inquiry+0x100>
8000cb24:	f1 38 00 11 	ld.ub	r8,r8[17]
8000cb28:	58 08       	cp.w	r8,0
8000cb2a:	c0 60       	breq	8000cb36 <udi_msc_spc_inquiry+0x5e>
8000cb2c:	f0 1f 00 2d 	mcall	8000cbe0 <udi_msc_spc_inquiry+0x108>
8000cb30:	f0 1f 00 2d 	mcall	8000cbe4 <udi_msc_spc_inquiry+0x10c>
8000cb34:	c4 f8       	rjmp	8000cbd2 <udi_msc_spc_inquiry+0xfa>
8000cb36:	4a 98       	lddpc	r8,8000cbd8 <udi_msc_spc_inquiry+0x100>
8000cb38:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cb3c:	10 9c       	mov	r12,r8
8000cb3e:	f0 1f 00 2b 	mcall	8000cbe8 <udi_msc_spc_inquiry+0x110>
8000cb42:	18 98       	mov	r8,r12
8000cb44:	f0 c9 ff ff 	sub	r9,r8,-1
8000cb48:	4a 98       	lddpc	r8,8000cbec <udi_msc_spc_inquiry+0x114>
8000cb4a:	2f 08       	sub	r8,-16
8000cb4c:	31 0a       	mov	r10,16
8000cb4e:	12 9b       	mov	r11,r9
8000cb50:	10 9c       	mov	r12,r8
8000cb52:	f0 1f 00 28 	mcall	8000cbf0 <udi_msc_spc_inquiry+0x118>
8000cb56:	30 08       	mov	r8,0
8000cb58:	ef 68 ff ff 	st.b	r7[-1],r8
8000cb5c:	c1 a8       	rjmp	8000cb90 <udi_msc_spc_inquiry+0xb8>
8000cb5e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cb62:	4a 39       	lddpc	r9,8000cbec <udi_msc_spc_inquiry+0x114>
8000cb64:	f2 08 00 08 	add	r8,r9,r8
8000cb68:	f1 38 00 10 	ld.ub	r8,r8[16]
8000cb6c:	58 08       	cp.w	r8,0
8000cb6e:	c2 40       	breq	8000cbb6 <udi_msc_spc_inquiry+0xde>
8000cb70:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cb74:	49 e9       	lddpc	r9,8000cbec <udi_msc_spc_inquiry+0x114>
8000cb76:	f2 08 00 08 	add	r8,r9,r8
8000cb7a:	f1 39 00 10 	ld.ub	r9,r8[16]
8000cb7e:	32 28       	mov	r8,34
8000cb80:	f0 09 18 00 	cp.b	r9,r8
8000cb84:	c1 90       	breq	8000cbb6 <udi_msc_spc_inquiry+0xde>
8000cb86:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cb8a:	2f f8       	sub	r8,-1
8000cb8c:	ef 68 ff ff 	st.b	r7[-1],r8
8000cb90:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cb94:	31 08       	mov	r8,16
8000cb96:	f0 09 18 00 	cp.b	r9,r8
8000cb9a:	ce 21       	brne	8000cb5e <udi_msc_spc_inquiry+0x86>
8000cb9c:	c0 d8       	rjmp	8000cbb6 <udi_msc_spc_inquiry+0xde>
8000cb9e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cba2:	49 39       	lddpc	r9,8000cbec <udi_msc_spc_inquiry+0x114>
8000cba4:	10 09       	add	r9,r8
8000cba6:	32 08       	mov	r8,32
8000cba8:	f3 68 00 10 	st.b	r9[16],r8
8000cbac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cbb0:	2f f8       	sub	r8,-1
8000cbb2:	ef 68 ff ff 	st.b	r7[-1],r8
8000cbb6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000cbba:	31 08       	mov	r8,16
8000cbbc:	f0 09 18 00 	cp.b	r9,r8
8000cbc0:	ce f1       	brne	8000cb9e <udi_msc_spc_inquiry+0xc6>
8000cbc2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000cbc6:	10 9b       	mov	r11,r8
8000cbc8:	48 9c       	lddpc	r12,8000cbec <udi_msc_spc_inquiry+0x114>
8000cbca:	f0 1f 00 0b 	mcall	8000cbf4 <udi_msc_spc_inquiry+0x11c>
8000cbce:	c0 28       	rjmp	8000cbd2 <udi_msc_spc_inquiry+0xfa>
8000cbd0:	d7 03       	nop
8000cbd2:	2f fd       	sub	sp,-4
8000cbd4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cbd8:	00 00       	add	r0,r0
8000cbda:	07 f0       	ld.ub	r0,r3[0x7]
8000cbdc:	80 00       	ld.sh	r0,r0[0x0]
8000cbde:	c7 40       	breq	8000ccc6 <udi_msc_spc_mode_sense+0x56>
8000cbe0:	80 00       	ld.sh	r0,r0[0x0]
8000cbe2:	ca 3c       	rcall	8000cd28 <udi_msc_spc_mode_sense+0xb8>
8000cbe4:	80 00       	ld.sh	r0,r0[0x0]
8000cbe6:	c8 3c       	rcall	8000ccec <udi_msc_spc_mode_sense+0x7c>
8000cbe8:	80 00       	ld.sh	r0,r0[0x0]
8000cbea:	c1 b0       	breq	8000cc20 <udi_msc_spc_testunitready_global+0x28>
8000cbec:	00 00       	add	r0,r0
8000cbee:	01 68       	ld.uh	r8,--r0
8000cbf0:	80 00       	ld.sh	r0,r0[0x0]
8000cbf2:	e7 de 80 00 	ldswp.w	lr,r3[0]
8000cbf6:	c7 a0       	breq	8000ccea <udi_msc_spc_mode_sense+0x7a>

8000cbf8 <udi_msc_spc_testunitready_global>:
8000cbf8:	eb cd 40 80 	pushm	r7,lr
8000cbfc:	1a 97       	mov	r7,sp
8000cbfe:	48 e8       	lddpc	r8,8000cc34 <udi_msc_spc_testunitready_global+0x3c>
8000cc00:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cc04:	10 9c       	mov	r12,r8
8000cc06:	f0 1f 00 0d 	mcall	8000cc38 <udi_msc_spc_testunitready_global+0x40>
8000cc0a:	18 98       	mov	r8,r12
8000cc0c:	58 28       	cp.w	r8,2
8000cc0e:	c0 a0       	breq	8000cc22 <udi_msc_spc_testunitready_global+0x2a>
8000cc10:	58 38       	cp.w	r8,3
8000cc12:	c0 50       	breq	8000cc1c <udi_msc_spc_testunitready_global+0x24>
8000cc14:	58 08       	cp.w	r8,0
8000cc16:	c0 91       	brne	8000cc28 <udi_msc_spc_testunitready_global+0x30>
8000cc18:	30 18       	mov	r8,1
8000cc1a:	c0 a8       	rjmp	8000cc2e <udi_msc_spc_testunitready_global+0x36>
8000cc1c:	f0 1f 00 08 	mcall	8000cc3c <udi_msc_spc_testunitready_global+0x44>
8000cc20:	c0 68       	rjmp	8000cc2c <udi_msc_spc_testunitready_global+0x34>
8000cc22:	f0 1f 00 08 	mcall	8000cc40 <udi_msc_spc_testunitready_global+0x48>
8000cc26:	c0 38       	rjmp	8000cc2c <udi_msc_spc_testunitready_global+0x34>
8000cc28:	f0 1f 00 07 	mcall	8000cc44 <udi_msc_spc_testunitready_global+0x4c>
8000cc2c:	30 08       	mov	r8,0
8000cc2e:	10 9c       	mov	r12,r8
8000cc30:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc34:	00 00       	add	r0,r0
8000cc36:	07 f0       	ld.ub	r0,r3[0x7]
8000cc38:	80 00       	ld.sh	r0,r0[0x0]
8000cc3a:	c0 c0       	breq	8000cc52 <udi_msc_spc_testunitready+0xa>
8000cc3c:	80 00       	ld.sh	r0,r0[0x0]
8000cc3e:	c9 ec       	rcall	8000cd7a <udi_msc_spc_mode_sense+0x10a>
8000cc40:	80 00       	ld.sh	r0,r0[0x0]
8000cc42:	c9 d0       	breq	8000cb7c <udi_msc_spc_inquiry+0xa4>
8000cc44:	80 00       	ld.sh	r0,r0[0x0]
8000cc46:	ca 08       	rjmp	8000cd86 <udi_msc_spc_mode_sense+0x116>

8000cc48 <udi_msc_spc_testunitready>:
8000cc48:	eb cd 40 80 	pushm	r7,lr
8000cc4c:	1a 97       	mov	r7,sp
8000cc4e:	f0 1f 00 06 	mcall	8000cc64 <udi_msc_spc_testunitready+0x1c>
8000cc52:	18 98       	mov	r8,r12
8000cc54:	58 08       	cp.w	r8,0
8000cc56:	c0 30       	breq	8000cc5c <udi_msc_spc_testunitready+0x14>
8000cc58:	f0 1f 00 04 	mcall	8000cc68 <udi_msc_spc_testunitready+0x20>
8000cc5c:	f0 1f 00 04 	mcall	8000cc6c <udi_msc_spc_testunitready+0x24>
8000cc60:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc64:	80 00       	ld.sh	r0,r0[0x0]
8000cc66:	cb f8       	rjmp	8000cde4 <udi_msc_sbc_read_capacity+0x24>
8000cc68:	80 00       	ld.sh	r0,r0[0x0]
8000cc6a:	c9 b0       	breq	8000cba0 <udi_msc_spc_inquiry+0xc8>
8000cc6c:	80 00       	ld.sh	r0,r0[0x0]
8000cc6e:	c8 3c       	rcall	8000cd74 <udi_msc_spc_mode_sense+0x104>

8000cc70 <udi_msc_spc_mode_sense>:
8000cc70:	eb cd 40 80 	pushm	r7,lr
8000cc74:	1a 97       	mov	r7,sp
8000cc76:	20 3d       	sub	sp,12
8000cc78:	18 98       	mov	r8,r12
8000cc7a:	ef 68 ff f4 	st.b	r7[-12],r8
8000cc7e:	31 4a       	mov	r10,20
8000cc80:	30 0b       	mov	r11,0
8000cc82:	4c ac       	lddpc	r12,8000cda8 <udi_msc_spc_mode_sense+0x138>
8000cc84:	f0 1f 00 4a 	mcall	8000cdac <udi_msc_spc_mode_sense+0x13c>
8000cc88:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cc8c:	30 08       	mov	r8,0
8000cc8e:	f0 09 18 00 	cp.b	r9,r8
8000cc92:	c0 e0       	breq	8000ccae <udi_msc_spc_mode_sense+0x3e>
8000cc94:	4c 78       	lddpc	r8,8000cdb0 <udi_msc_spc_mode_sense+0x140>
8000cc96:	f1 38 00 17 	ld.ub	r8,r8[23]
8000cc9a:	ef 68 ff fa 	st.b	r7[-6],r8
8000cc9e:	4c 38       	lddpc	r8,8000cda8 <udi_msc_spc_mode_sense+0x138>
8000cca0:	2f 88       	sub	r8,-8
8000cca2:	ef 48 ff fc 	st.w	r7[-4],r8
8000cca6:	30 88       	mov	r8,8
8000cca8:	ef 68 ff f8 	st.b	r7[-8],r8
8000ccac:	c0 d8       	rjmp	8000ccc6 <udi_msc_spc_mode_sense+0x56>
8000ccae:	4c 18       	lddpc	r8,8000cdb0 <udi_msc_spc_mode_sense+0x140>
8000ccb0:	f1 38 00 13 	ld.ub	r8,r8[19]
8000ccb4:	ef 68 ff fa 	st.b	r7[-6],r8
8000ccb8:	4b c8       	lddpc	r8,8000cda8 <udi_msc_spc_mode_sense+0x138>
8000ccba:	2f c8       	sub	r8,-4
8000ccbc:	ef 48 ff fc 	st.w	r7[-4],r8
8000ccc0:	30 48       	mov	r8,4
8000ccc2:	ef 68 ff f8 	st.b	r7[-8],r8
8000ccc6:	4b b8       	lddpc	r8,8000cdb0 <udi_msc_spc_mode_sense+0x140>
8000ccc8:	f1 38 00 11 	ld.ub	r8,r8[17]
8000cccc:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000ccd0:	ef 68 ff f9 	st.b	r7[-7],r8
8000ccd4:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000ccd8:	31 c8       	mov	r8,28
8000ccda:	f0 09 18 00 	cp.b	r9,r8
8000ccde:	c0 70       	breq	8000ccec <udi_msc_spc_mode_sense+0x7c>
8000cce0:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000cce4:	33 f8       	mov	r8,63
8000cce6:	f0 09 18 00 	cp.b	r9,r8
8000ccea:	c1 21       	brne	8000cd0e <udi_msc_spc_mode_sense+0x9e>
8000ccec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ccf0:	31 c8       	mov	r8,28
8000ccf2:	b2 88       	st.b	r9[0x0],r8
8000ccf4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ccf8:	30 a8       	mov	r8,10
8000ccfa:	b2 98       	st.b	r9[0x1],r8
8000ccfc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000cd00:	30 58       	mov	r8,5
8000cd02:	b2 b8       	st.b	r9[0x3],r8
8000cd04:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cd08:	2f 48       	sub	r8,-12
8000cd0a:	ef 68 ff f8 	st.b	r7[-8],r8
8000cd0e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8000cd12:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cd16:	f0 09 18 00 	cp.b	r9,r8
8000cd1a:	e0 88 00 06 	brls	8000cd26 <udi_msc_spc_mode_sense+0xb6>
8000cd1e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cd22:	ef 68 ff fa 	st.b	r7[-6],r8
8000cd26:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000cd2a:	e0 6b 00 80 	mov	r11,128
8000cd2e:	10 9c       	mov	r12,r8
8000cd30:	f0 1f 00 21 	mcall	8000cdb4 <udi_msc_spc_mode_sense+0x144>
8000cd34:	18 98       	mov	r8,r12
8000cd36:	ec 18 00 01 	eorl	r8,0x1
8000cd3a:	5c 58       	castu.b	r8
8000cd3c:	c3 21       	brne	8000cda0 <udi_msc_spc_mode_sense+0x130>
8000cd3e:	49 d8       	lddpc	r8,8000cdb0 <udi_msc_spc_mode_sense+0x140>
8000cd40:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cd44:	10 9c       	mov	r12,r8
8000cd46:	f0 1f 00 1d 	mcall	8000cdb8 <udi_msc_spc_mode_sense+0x148>
8000cd4a:	18 98       	mov	r8,r12
8000cd4c:	58 08       	cp.w	r8,0
8000cd4e:	c0 40       	breq	8000cd56 <udi_msc_spc_mode_sense+0xe6>
8000cd50:	e0 68 00 80 	mov	r8,128
8000cd54:	c0 28       	rjmp	8000cd58 <udi_msc_spc_mode_sense+0xe8>
8000cd56:	30 08       	mov	r8,0
8000cd58:	ef 68 ff fb 	st.b	r7[-5],r8
8000cd5c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000cd60:	30 08       	mov	r8,0
8000cd62:	f0 09 18 00 	cp.b	r9,r8
8000cd66:	c0 c0       	breq	8000cd7e <udi_msc_spc_mode_sense+0x10e>
8000cd68:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cd6c:	20 28       	sub	r8,2
8000cd6e:	5c 88       	casts.h	r8
8000cd70:	48 e9       	lddpc	r9,8000cda8 <udi_msc_spc_mode_sense+0x138>
8000cd72:	b2 08       	st.h	r9[0x0],r8
8000cd74:	48 d9       	lddpc	r9,8000cda8 <udi_msc_spc_mode_sense+0x138>
8000cd76:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000cd7a:	b2 b8       	st.b	r9[0x3],r8
8000cd7c:	c0 b8       	rjmp	8000cd92 <udi_msc_spc_mode_sense+0x122>
8000cd7e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cd82:	20 18       	sub	r8,1
8000cd84:	5c 58       	castu.b	r8
8000cd86:	48 99       	lddpc	r9,8000cda8 <udi_msc_spc_mode_sense+0x138>
8000cd88:	b2 88       	st.b	r9[0x0],r8
8000cd8a:	48 89       	lddpc	r9,8000cda8 <udi_msc_spc_mode_sense+0x138>
8000cd8c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000cd90:	b2 a8       	st.b	r9[0x2],r8
8000cd92:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8000cd96:	10 9b       	mov	r11,r8
8000cd98:	48 4c       	lddpc	r12,8000cda8 <udi_msc_spc_mode_sense+0x138>
8000cd9a:	f0 1f 00 09 	mcall	8000cdbc <udi_msc_spc_mode_sense+0x14c>
8000cd9e:	c0 28       	rjmp	8000cda2 <udi_msc_spc_mode_sense+0x132>
8000cda0:	d7 03       	nop
8000cda2:	2f dd       	sub	sp,-12
8000cda4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cda8:	00 00       	add	r0,r0
8000cdaa:	08 3c       	cp.w	r12,r4
8000cdac:	80 00       	ld.sh	r0,r0[0x0]
8000cdae:	e9 26 00 00 	ld.sb	r6,r4[0]
8000cdb2:	07 f0       	ld.ub	r0,r3[0x7]
8000cdb4:	80 00       	ld.sh	r0,r0[0x0]
8000cdb6:	c7 40       	breq	8000ce9e <udi_msc_sbc_trans+0x42>
8000cdb8:	80 00       	ld.sh	r0,r0[0x0]
8000cdba:	c1 60       	breq	8000cde6 <udi_msc_sbc_read_capacity+0x26>
8000cdbc:	80 00       	ld.sh	r0,r0[0x0]
8000cdbe:	c7 a0       	breq	8000ceb2 <udi_msc_sbc_trans+0x56>

8000cdc0 <udi_msc_sbc_read_capacity>:
8000cdc0:	eb cd 40 80 	pushm	r7,lr
8000cdc4:	1a 97       	mov	r7,sp
8000cdc6:	e0 6b 00 80 	mov	r11,128
8000cdca:	30 8c       	mov	r12,8
8000cdcc:	f0 1f 00 1b 	mcall	8000ce38 <udi_msc_sbc_read_capacity+0x78>
8000cdd0:	18 98       	mov	r8,r12
8000cdd2:	ec 18 00 01 	eorl	r8,0x1
8000cdd6:	5c 58       	castu.b	r8
8000cdd8:	c2 d1       	brne	8000ce32 <udi_msc_sbc_read_capacity+0x72>
8000cdda:	49 98       	lddpc	r8,8000ce3c <udi_msc_sbc_read_capacity+0x7c>
8000cddc:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cde0:	49 8b       	lddpc	r11,8000ce40 <udi_msc_sbc_read_capacity+0x80>
8000cde2:	10 9c       	mov	r12,r8
8000cde4:	f0 1f 00 18 	mcall	8000ce44 <udi_msc_sbc_read_capacity+0x84>
8000cde8:	18 98       	mov	r8,r12
8000cdea:	58 28       	cp.w	r8,2
8000cdec:	c1 80       	breq	8000ce1c <udi_msc_sbc_read_capacity+0x5c>
8000cdee:	58 38       	cp.w	r8,3
8000cdf0:	c1 10       	breq	8000ce12 <udi_msc_sbc_read_capacity+0x52>
8000cdf2:	58 08       	cp.w	r8,0
8000cdf4:	c1 91       	brne	8000ce26 <udi_msc_sbc_read_capacity+0x66>
8000cdf6:	49 38       	lddpc	r8,8000ce40 <udi_msc_sbc_read_capacity+0x80>
8000cdf8:	e0 69 02 00 	mov	r9,512
8000cdfc:	91 19       	st.w	r8[0x4],r9
8000cdfe:	49 18       	lddpc	r8,8000ce40 <udi_msc_sbc_read_capacity+0x80>
8000ce00:	70 09       	ld.w	r9,r8[0x0]
8000ce02:	49 08       	lddpc	r8,8000ce40 <udi_msc_sbc_read_capacity+0x80>
8000ce04:	91 09       	st.w	r8[0x0],r9
8000ce06:	48 f8       	lddpc	r8,8000ce40 <udi_msc_sbc_read_capacity+0x80>
8000ce08:	30 8b       	mov	r11,8
8000ce0a:	10 9c       	mov	r12,r8
8000ce0c:	f0 1f 00 0f 	mcall	8000ce48 <udi_msc_sbc_read_capacity+0x88>
8000ce10:	c1 28       	rjmp	8000ce34 <udi_msc_sbc_read_capacity+0x74>
8000ce12:	f0 1f 00 0f 	mcall	8000ce4c <udi_msc_sbc_read_capacity+0x8c>
8000ce16:	f0 1f 00 0f 	mcall	8000ce50 <udi_msc_sbc_read_capacity+0x90>
8000ce1a:	c0 d8       	rjmp	8000ce34 <udi_msc_sbc_read_capacity+0x74>
8000ce1c:	f0 1f 00 0e 	mcall	8000ce54 <udi_msc_sbc_read_capacity+0x94>
8000ce20:	f0 1f 00 0c 	mcall	8000ce50 <udi_msc_sbc_read_capacity+0x90>
8000ce24:	c0 88       	rjmp	8000ce34 <udi_msc_sbc_read_capacity+0x74>
8000ce26:	f0 1f 00 0d 	mcall	8000ce58 <udi_msc_sbc_read_capacity+0x98>
8000ce2a:	f0 1f 00 0a 	mcall	8000ce50 <udi_msc_sbc_read_capacity+0x90>
8000ce2e:	d7 03       	nop
8000ce30:	c0 28       	rjmp	8000ce34 <udi_msc_sbc_read_capacity+0x74>
8000ce32:	d7 03       	nop
8000ce34:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ce38:	80 00       	ld.sh	r0,r0[0x0]
8000ce3a:	c7 40       	breq	8000cf22 <udi_msc_sbc_trans+0xc6>
8000ce3c:	00 00       	add	r0,r0
8000ce3e:	07 f0       	ld.ub	r0,r3[0x7]
8000ce40:	00 00       	add	r0,r0
8000ce42:	08 34       	cp.w	r4,r4
8000ce44:	80 00       	ld.sh	r0,r0[0x0]
8000ce46:	c1 0c       	rcall	8000ce66 <udi_msc_sbc_trans+0xa>
8000ce48:	80 00       	ld.sh	r0,r0[0x0]
8000ce4a:	c7 a0       	breq	8000cf3e <udi_msc_sbc_trans+0xe2>
8000ce4c:	80 00       	ld.sh	r0,r0[0x0]
8000ce4e:	c9 ec       	rcall	8000cf8a <udi_msc_process_trans+0x3a>
8000ce50:	80 00       	ld.sh	r0,r0[0x0]
8000ce52:	c8 3c       	rcall	8000cf58 <udi_msc_process_trans+0x8>
8000ce54:	80 00       	ld.sh	r0,r0[0x0]
8000ce56:	c9 d0       	breq	8000cd90 <udi_msc_spc_mode_sense+0x120>
8000ce58:	80 00       	ld.sh	r0,r0[0x0]
8000ce5a:	ca 08       	rjmp	8000cf9a <udi_msc_process_trans+0x4a>

8000ce5c <udi_msc_sbc_trans>:
8000ce5c:	eb cd 40 80 	pushm	r7,lr
8000ce60:	1a 97       	mov	r7,sp
8000ce62:	20 2d       	sub	sp,8
8000ce64:	18 98       	mov	r8,r12
8000ce66:	ef 68 ff f8 	st.b	r7[-8],r8
8000ce6a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000ce6e:	ec 18 00 01 	eorl	r8,0x1
8000ce72:	5c 58       	castu.b	r8
8000ce74:	c0 f0       	breq	8000ce92 <udi_msc_sbc_trans+0x36>
8000ce76:	4a e8       	lddpc	r8,8000cf2c <udi_msc_sbc_trans+0xd0>
8000ce78:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000ce7c:	10 9c       	mov	r12,r8
8000ce7e:	f0 1f 00 2d 	mcall	8000cf30 <udi_msc_sbc_trans+0xd4>
8000ce82:	18 98       	mov	r8,r12
8000ce84:	58 08       	cp.w	r8,0
8000ce86:	c0 60       	breq	8000ce92 <udi_msc_sbc_trans+0x36>
8000ce88:	f0 1f 00 2b 	mcall	8000cf34 <udi_msc_sbc_trans+0xd8>
8000ce8c:	f0 1f 00 2b 	mcall	8000cf38 <udi_msc_sbc_trans+0xdc>
8000ce90:	c4 a8       	rjmp	8000cf24 <udi_msc_sbc_trans+0xc8>
8000ce92:	4a b9       	lddpc	r9,8000cf3c <udi_msc_sbc_trans+0xe0>
8000ce94:	4a 68       	lddpc	r8,8000cf2c <udi_msc_sbc_trans+0xd0>
8000ce96:	f1 38 00 11 	ld.ub	r8,r8[17]
8000ce9a:	b2 88       	st.b	r9[0x0],r8
8000ce9c:	4a 88       	lddpc	r8,8000cf3c <udi_msc_sbc_trans+0xe0>
8000ce9e:	f0 c9 ff ff 	sub	r9,r8,-1
8000cea2:	4a 38       	lddpc	r8,8000cf2c <udi_msc_sbc_trans+0xd0>
8000cea4:	f1 38 00 12 	ld.ub	r8,r8[18]
8000cea8:	b2 88       	st.b	r9[0x0],r8
8000ceaa:	4a 58       	lddpc	r8,8000cf3c <udi_msc_sbc_trans+0xe0>
8000ceac:	f0 c9 ff fe 	sub	r9,r8,-2
8000ceb0:	49 f8       	lddpc	r8,8000cf2c <udi_msc_sbc_trans+0xd0>
8000ceb2:	f1 38 00 13 	ld.ub	r8,r8[19]
8000ceb6:	b2 88       	st.b	r9[0x0],r8
8000ceb8:	4a 18       	lddpc	r8,8000cf3c <udi_msc_sbc_trans+0xe0>
8000ceba:	f0 c9 ff fd 	sub	r9,r8,-3
8000cebe:	49 c8       	lddpc	r8,8000cf2c <udi_msc_sbc_trans+0xd0>
8000cec0:	f1 38 00 14 	ld.ub	r8,r8[20]
8000cec4:	b2 88       	st.b	r9[0x0],r8
8000cec6:	49 f9       	lddpc	r9,8000cf40 <udi_msc_sbc_trans+0xe4>
8000cec8:	49 98       	lddpc	r8,8000cf2c <udi_msc_sbc_trans+0xd0>
8000ceca:	f1 38 00 16 	ld.ub	r8,r8[22]
8000cece:	b2 88       	st.b	r9[0x0],r8
8000ced0:	49 c8       	lddpc	r8,8000cf40 <udi_msc_sbc_trans+0xe4>
8000ced2:	f0 c9 ff ff 	sub	r9,r8,-1
8000ced6:	49 68       	lddpc	r8,8000cf2c <udi_msc_sbc_trans+0xd0>
8000ced8:	f1 38 00 17 	ld.ub	r8,r8[23]
8000cedc:	b2 88       	st.b	r9[0x0],r8
8000cede:	49 98       	lddpc	r8,8000cf40 <udi_msc_sbc_trans+0xe4>
8000cee0:	90 08       	ld.sh	r8,r8[0x0]
8000cee2:	5c 78       	castu.h	r8
8000cee4:	a9 78       	lsl	r8,0x9
8000cee6:	ef 48 ff fc 	st.w	r7[-4],r8
8000ceea:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000ceee:	30 08       	mov	r8,0
8000cef0:	f0 09 18 00 	cp.b	r9,r8
8000cef4:	c0 40       	breq	8000cefc <udi_msc_sbc_trans+0xa0>
8000cef6:	e0 68 00 80 	mov	r8,128
8000cefa:	c0 28       	rjmp	8000cefe <udi_msc_sbc_trans+0xa2>
8000cefc:	30 08       	mov	r8,0
8000cefe:	10 9b       	mov	r11,r8
8000cf00:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cf04:	f0 1f 00 10 	mcall	8000cf44 <udi_msc_sbc_trans+0xe8>
8000cf08:	18 98       	mov	r8,r12
8000cf0a:	ec 18 00 01 	eorl	r8,0x1
8000cf0e:	5c 58       	castu.b	r8
8000cf10:	c0 91       	brne	8000cf22 <udi_msc_sbc_trans+0xc6>
8000cf12:	48 e9       	lddpc	r9,8000cf48 <udi_msc_sbc_trans+0xec>
8000cf14:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cf18:	b2 88       	st.b	r9[0x0],r8
8000cf1a:	48 d9       	lddpc	r9,8000cf4c <udi_msc_sbc_trans+0xf0>
8000cf1c:	30 18       	mov	r8,1
8000cf1e:	b2 88       	st.b	r9[0x0],r8
8000cf20:	c0 28       	rjmp	8000cf24 <udi_msc_sbc_trans+0xc8>
8000cf22:	d7 03       	nop
8000cf24:	2f ed       	sub	sp,-8
8000cf26:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cf2a:	00 00       	add	r0,r0
8000cf2c:	00 00       	add	r0,r0
8000cf2e:	07 f0       	ld.ub	r0,r3[0x7]
8000cf30:	80 00       	ld.sh	r0,r0[0x0]
8000cf32:	c1 60       	breq	8000cf5e <udi_msc_process_trans+0xe>
8000cf34:	80 00       	ld.sh	r0,r0[0x0]
8000cf36:	ca 20       	breq	8000ce7a <udi_msc_sbc_trans+0x1e>
8000cf38:	80 00       	ld.sh	r0,r0[0x0]
8000cf3a:	c8 3c       	rcall	8000d040 <udi_msc_trans_ack+0x24>
8000cf3c:	00 00       	add	r0,r0
8000cf3e:	08 2c       	rsub	r12,r4
8000cf40:	00 00       	add	r0,r0
8000cf42:	08 30       	cp.w	r0,r4
8000cf44:	80 00       	ld.sh	r0,r0[0x0]
8000cf46:	c7 40       	breq	8000d02e <udi_msc_trans_ack+0x12>
8000cf48:	00 00       	add	r0,r0
8000cf4a:	08 2a       	rsub	r10,r4
8000cf4c:	00 00       	add	r0,r0
8000cf4e:	08 29       	rsub	r9,r4

8000cf50 <udi_msc_process_trans>:
8000cf50:	eb cd 40 80 	pushm	r7,lr
8000cf54:	1a 97       	mov	r7,sp
8000cf56:	20 1d       	sub	sp,4
8000cf58:	4a 58       	lddpc	r8,8000cfec <udi_msc_process_trans+0x9c>
8000cf5a:	11 88       	ld.ub	r8,r8[0x0]
8000cf5c:	ec 18 00 01 	eorl	r8,0x1
8000cf60:	5c 58       	castu.b	r8
8000cf62:	c0 30       	breq	8000cf68 <udi_msc_process_trans+0x18>
8000cf64:	30 08       	mov	r8,0
8000cf66:	c3 f8       	rjmp	8000cfe4 <udi_msc_process_trans+0x94>
8000cf68:	4a 19       	lddpc	r9,8000cfec <udi_msc_process_trans+0x9c>
8000cf6a:	30 08       	mov	r8,0
8000cf6c:	b2 88       	st.b	r9[0x0],r8
8000cf6e:	4a 18       	lddpc	r8,8000cff0 <udi_msc_process_trans+0xa0>
8000cf70:	11 88       	ld.ub	r8,r8[0x0]
8000cf72:	58 08       	cp.w	r8,0
8000cf74:	c1 20       	breq	8000cf98 <udi_msc_process_trans+0x48>
8000cf76:	4a 08       	lddpc	r8,8000cff4 <udi_msc_process_trans+0xa4>
8000cf78:	90 08       	ld.sh	r8,r8[0x0]
8000cf7a:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000cf7e:	49 f8       	lddpc	r8,8000cff8 <udi_msc_process_trans+0xa8>
8000cf80:	70 09       	ld.w	r9,r8[0x0]
8000cf82:	49 f8       	lddpc	r8,8000cffc <udi_msc_process_trans+0xac>
8000cf84:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cf88:	12 9b       	mov	r11,r9
8000cf8a:	10 9c       	mov	r12,r8
8000cf8c:	f0 1f 00 1d 	mcall	8000d000 <udi_msc_process_trans+0xb0>
8000cf90:	18 98       	mov	r8,r12
8000cf92:	ef 48 ff fc 	st.w	r7[-4],r8
8000cf96:	c1 18       	rjmp	8000cfb8 <udi_msc_process_trans+0x68>
8000cf98:	49 78       	lddpc	r8,8000cff4 <udi_msc_process_trans+0xa4>
8000cf9a:	90 08       	ld.sh	r8,r8[0x0]
8000cf9c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000cfa0:	49 68       	lddpc	r8,8000cff8 <udi_msc_process_trans+0xa8>
8000cfa2:	70 09       	ld.w	r9,r8[0x0]
8000cfa4:	49 68       	lddpc	r8,8000cffc <udi_msc_process_trans+0xac>
8000cfa6:	f1 38 00 0d 	ld.ub	r8,r8[13]
8000cfaa:	12 9b       	mov	r11,r9
8000cfac:	10 9c       	mov	r12,r8
8000cfae:	f0 1f 00 16 	mcall	8000d004 <udi_msc_process_trans+0xb4>
8000cfb2:	18 98       	mov	r8,r12
8000cfb4:	ef 48 ff fc 	st.w	r7[-4],r8
8000cfb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000cfbc:	58 28       	cp.w	r8,2
8000cfbe:	c0 b0       	breq	8000cfd4 <udi_msc_process_trans+0x84>
8000cfc0:	58 38       	cp.w	r8,3
8000cfc2:	c0 60       	breq	8000cfce <udi_msc_process_trans+0x7e>
8000cfc4:	58 08       	cp.w	r8,0
8000cfc6:	c0 a1       	brne	8000cfda <udi_msc_process_trans+0x8a>
8000cfc8:	f0 1f 00 10 	mcall	8000d008 <udi_msc_process_trans+0xb8>
8000cfcc:	c0 98       	rjmp	8000cfde <udi_msc_process_trans+0x8e>
8000cfce:	f0 1f 00 10 	mcall	8000d00c <udi_msc_process_trans+0xbc>
8000cfd2:	c0 68       	rjmp	8000cfde <udi_msc_process_trans+0x8e>
8000cfd4:	f0 1f 00 0f 	mcall	8000d010 <udi_msc_process_trans+0xc0>
8000cfd8:	c0 38       	rjmp	8000cfde <udi_msc_process_trans+0x8e>
8000cfda:	f0 1f 00 0f 	mcall	8000d014 <udi_msc_process_trans+0xc4>
8000cfde:	f0 1f 00 0f 	mcall	8000d018 <udi_msc_process_trans+0xc8>
8000cfe2:	30 18       	mov	r8,1
8000cfe4:	10 9c       	mov	r12,r8
8000cfe6:	2f fd       	sub	sp,-4
8000cfe8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cfec:	00 00       	add	r0,r0
8000cfee:	08 29       	rsub	r9,r4
8000cff0:	00 00       	add	r0,r0
8000cff2:	08 2a       	rsub	r10,r4
8000cff4:	00 00       	add	r0,r0
8000cff6:	08 30       	cp.w	r0,r4
8000cff8:	00 00       	add	r0,r0
8000cffa:	08 2c       	rsub	r12,r4
8000cffc:	00 00       	add	r0,r0
8000cffe:	07 f0       	ld.ub	r0,r3[0x7]
8000d000:	80 00       	ld.sh	r0,r0[0x0]
8000d002:	c1 f4       	brge	8000d040 <udi_msc_trans_ack+0x24>
8000d004:	80 00       	ld.sh	r0,r0[0x0]
8000d006:	c2 68       	rjmp	8000d052 <udi_msc_trans_ack+0x36>
8000d008:	80 00       	ld.sh	r0,r0[0x0]
8000d00a:	c9 b0       	breq	8000cf40 <udi_msc_sbc_trans+0xe4>
8000d00c:	80 00       	ld.sh	r0,r0[0x0]
8000d00e:	c9 ec       	rcall	8000d14a <udc_get_string_serial_name+0x2>
8000d010:	80 00       	ld.sh	r0,r0[0x0]
8000d012:	c9 d0       	breq	8000cf4c <udi_msc_sbc_trans+0xf0>
8000d014:	80 00       	ld.sh	r0,r0[0x0]
8000d016:	ca 08       	rjmp	8000d156 <udc_get_string_serial_name+0xe>
8000d018:	80 00       	ld.sh	r0,r0[0x0]
8000d01a:	c8 3c       	rcall	8000d120 <udi_msc_trans_block+0xcc>

8000d01c <udi_msc_trans_ack>:
8000d01c:	eb cd 40 80 	pushm	r7,lr
8000d020:	1a 97       	mov	r7,sp
8000d022:	20 3d       	sub	sp,12
8000d024:	ef 4c ff fc 	st.w	r7[-4],r12
8000d028:	ef 4b ff f8 	st.w	r7[-8],r11
8000d02c:	14 98       	mov	r8,r10
8000d02e:	ef 68 ff f4 	st.b	r7[-12],r8
8000d032:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d036:	58 08       	cp.w	r8,0
8000d038:	5f 18       	srne	r8
8000d03a:	5c 58       	castu.b	r8
8000d03c:	48 49       	lddpc	r9,8000d04c <udi_msc_trans_ack+0x30>
8000d03e:	b2 88       	st.b	r9[0x0],r8
8000d040:	48 49       	lddpc	r9,8000d050 <udi_msc_trans_ack+0x34>
8000d042:	30 18       	mov	r8,1
8000d044:	b2 88       	st.b	r9[0x0],r8
8000d046:	2f dd       	sub	sp,-12
8000d048:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d04c:	00 00       	add	r0,r0
8000d04e:	0e 03       	add	r3,r7
8000d050:	00 00       	add	r0,r0
8000d052:	01 64       	ld.uh	r4,--r0

8000d054 <udi_msc_trans_block>:
8000d054:	eb cd 40 80 	pushm	r7,lr
8000d058:	1a 97       	mov	r7,sp
8000d05a:	20 4d       	sub	sp,16
8000d05c:	18 98       	mov	r8,r12
8000d05e:	ef 4b ff f8 	st.w	r7[-8],r11
8000d062:	ef 4a ff f4 	st.w	r7[-12],r10
8000d066:	ef 49 ff f0 	st.w	r7[-16],r9
8000d06a:	ef 68 ff fc 	st.b	r7[-4],r8
8000d06e:	4a e8       	lddpc	r8,8000d124 <udi_msc_trans_block+0xd0>
8000d070:	11 88       	ld.ub	r8,r8[0x0]
8000d072:	5c 58       	castu.b	r8
8000d074:	ec 18 00 01 	eorl	r8,0x1
8000d078:	5c 58       	castu.b	r8
8000d07a:	c0 30       	breq	8000d080 <udi_msc_trans_block+0x2c>
8000d07c:	30 08       	mov	r8,0
8000d07e:	c4 f8       	rjmp	8000d11c <udi_msc_trans_block+0xc8>
8000d080:	4a 99       	lddpc	r9,8000d124 <udi_msc_trans_block+0xd0>
8000d082:	30 08       	mov	r8,0
8000d084:	b2 88       	st.b	r9[0x0],r8
8000d086:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d08a:	58 08       	cp.w	r8,0
8000d08c:	c0 40       	breq	8000d094 <udi_msc_trans_block+0x40>
8000d08e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d092:	c0 28       	rjmp	8000d096 <udi_msc_trans_block+0x42>
8000d094:	4a 58       	lddpc	r8,8000d128 <udi_msc_trans_block+0xd4>
8000d096:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000d09a:	30 09       	mov	r9,0
8000d09c:	f2 0a 18 00 	cp.b	r10,r9
8000d0a0:	c0 40       	breq	8000d0a8 <udi_msc_trans_block+0x54>
8000d0a2:	e0 6c 00 81 	mov	r12,129
8000d0a6:	c0 28       	rjmp	8000d0aa <udi_msc_trans_block+0x56>
8000d0a8:	30 2c       	mov	r12,2
8000d0aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d0ae:	ee fa ff f8 	ld.w	r10,r7[-8]
8000d0b2:	30 0b       	mov	r11,0
8000d0b4:	f0 1f 00 1e 	mcall	8000d12c <udi_msc_trans_block+0xd8>
8000d0b8:	18 98       	mov	r8,r12
8000d0ba:	ec 18 00 01 	eorl	r8,0x1
8000d0be:	5c 58       	castu.b	r8
8000d0c0:	c0 60       	breq	8000d0cc <udi_msc_trans_block+0x78>
8000d0c2:	49 99       	lddpc	r9,8000d124 <udi_msc_trans_block+0xd0>
8000d0c4:	30 18       	mov	r8,1
8000d0c6:	b2 88       	st.b	r9[0x0],r8
8000d0c8:	30 08       	mov	r8,0
8000d0ca:	c2 98       	rjmp	8000d11c <udi_msc_trans_block+0xc8>
8000d0cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d0d0:	58 08       	cp.w	r8,0
8000d0d2:	c1 d1       	brne	8000d10c <udi_msc_trans_block+0xb8>
8000d0d4:	49 48       	lddpc	r8,8000d124 <udi_msc_trans_block+0xd0>
8000d0d6:	11 88       	ld.ub	r8,r8[0x0]
8000d0d8:	5c 58       	castu.b	r8
8000d0da:	ec 18 00 01 	eorl	r8,0x1
8000d0de:	5c 58       	castu.b	r8
8000d0e0:	cf a1       	brne	8000d0d4 <udi_msc_trans_block+0x80>
8000d0e2:	49 48       	lddpc	r8,8000d130 <udi_msc_trans_block+0xdc>
8000d0e4:	11 88       	ld.ub	r8,r8[0x0]
8000d0e6:	5c 58       	castu.b	r8
8000d0e8:	c0 30       	breq	8000d0ee <udi_msc_trans_block+0x9a>
8000d0ea:	30 08       	mov	r8,0
8000d0ec:	c1 88       	rjmp	8000d11c <udi_msc_trans_block+0xc8>
8000d0ee:	49 28       	lddpc	r8,8000d134 <udi_msc_trans_block+0xe0>
8000d0f0:	70 29       	ld.w	r9,r8[0x8]
8000d0f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d0f6:	10 19       	sub	r9,r8
8000d0f8:	48 f8       	lddpc	r8,8000d134 <udi_msc_trans_block+0xe0>
8000d0fa:	91 29       	st.w	r8[0x8],r9
8000d0fc:	48 d8       	lddpc	r8,8000d130 <udi_msc_trans_block+0xdc>
8000d0fe:	11 88       	ld.ub	r8,r8[0x0]
8000d100:	5c 58       	castu.b	r8
8000d102:	ec 18 00 01 	eorl	r8,0x1
8000d106:	5c 58       	castu.b	r8
8000d108:	5c 58       	castu.b	r8
8000d10a:	c0 98       	rjmp	8000d11c <udi_msc_trans_block+0xc8>
8000d10c:	48 a8       	lddpc	r8,8000d134 <udi_msc_trans_block+0xe0>
8000d10e:	70 29       	ld.w	r9,r8[0x8]
8000d110:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d114:	10 19       	sub	r9,r8
8000d116:	48 88       	lddpc	r8,8000d134 <udi_msc_trans_block+0xe0>
8000d118:	91 29       	st.w	r8[0x8],r9
8000d11a:	30 18       	mov	r8,1
8000d11c:	10 9c       	mov	r12,r8
8000d11e:	2f cd       	sub	sp,-16
8000d120:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d124:	00 00       	add	r0,r0
8000d126:	01 64       	ld.uh	r4,--r0
8000d128:	80 00       	ld.sh	r0,r0[0x0]
8000d12a:	d0 1c       	*unknown*
8000d12c:	80 00       	ld.sh	r0,r0[0x0]
8000d12e:	a5 ac       	sbr	r12,0x4
8000d130:	00 00       	add	r0,r0
8000d132:	0e 03       	add	r3,r7
8000d134:	00 00       	add	r0,r0
8000d136:	01 54       	ld.sh	r4,--r0
8000d138:	36 39       	mov	r9,99
8000d13a:	36 39       	mov	r9,99
8000d13c:	36 39       	mov	r9,99
8000d13e:	36 39       	mov	r9,99
8000d140:	36 39       	mov	r9,99
8000d142:	36 39       	mov	r9,99
8000d144:	00 00       	add	r0,r0
	...

8000d148 <udc_get_string_serial_name>:
8000d148:	eb cd 40 80 	pushm	r7,lr
8000d14c:	1a 97       	mov	r7,sp
8000d14e:	48 38       	lddpc	r8,8000d158 <udc_get_string_serial_name+0x10>
8000d150:	10 9c       	mov	r12,r8
8000d152:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d156:	00 00       	add	r0,r0
8000d158:	80 00       	ld.sh	r0,r0[0x0]
8000d15a:	d1 38       	*unknown*

8000d15c <udc_get_eof_conf>:
8000d15c:	eb cd 40 80 	pushm	r7,lr
8000d160:	1a 97       	mov	r7,sp
8000d162:	48 b8       	lddpc	r8,8000d18c <udc_get_eof_conf+0x30>
8000d164:	70 08       	ld.w	r8,r8[0x0]
8000d166:	70 09       	ld.w	r9,r8[0x0]
8000d168:	48 98       	lddpc	r8,8000d18c <udc_get_eof_conf+0x30>
8000d16a:	70 08       	ld.w	r8,r8[0x0]
8000d16c:	70 08       	ld.w	r8,r8[0x0]
8000d16e:	11 aa       	ld.ub	r10,r8[0x2]
8000d170:	a9 6a       	lsl	r10,0x8
8000d172:	11 b8       	ld.ub	r8,r8[0x3]
8000d174:	14 48       	or	r8,r10
8000d176:	5c 88       	casts.h	r8
8000d178:	5c 88       	casts.h	r8
8000d17a:	5c c8       	swap.bh	r8
8000d17c:	5c 88       	casts.h	r8
8000d17e:	5c 78       	castu.h	r8
8000d180:	f2 08 00 08 	add	r8,r9,r8
8000d184:	10 9c       	mov	r12,r8
8000d186:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d18a:	00 00       	add	r0,r0
8000d18c:	00 00       	add	r0,r0
8000d18e:	08 54       	eor	r4,r4

8000d190 <udc_next_desc_in_iface>:
8000d190:	eb cd 40 80 	pushm	r7,lr
8000d194:	1a 97       	mov	r7,sp
8000d196:	20 3d       	sub	sp,12
8000d198:	ef 4c ff f8 	st.w	r7[-8],r12
8000d19c:	16 98       	mov	r8,r11
8000d19e:	ef 68 ff f4 	st.b	r7[-12],r8
8000d1a2:	f0 1f 00 1d 	mcall	8000d214 <udc_next_desc_in_iface+0x84>
8000d1a6:	18 98       	mov	r8,r12
8000d1a8:	ef 48 ff fc 	st.w	r7[-4],r8
8000d1ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d1b0:	11 88       	ld.ub	r8,r8[0x0]
8000d1b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d1b6:	f2 08 00 08 	add	r8,r9,r8
8000d1ba:	ef 48 ff f8 	st.w	r7[-8],r8
8000d1be:	c1 c8       	rjmp	8000d1f6 <udc_next_desc_in_iface+0x66>
8000d1c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d1c4:	11 99       	ld.ub	r9,r8[0x1]
8000d1c6:	30 48       	mov	r8,4
8000d1c8:	f0 09 18 00 	cp.b	r9,r8
8000d1cc:	c1 d0       	breq	8000d206 <udc_next_desc_in_iface+0x76>
8000d1ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d1d2:	11 98       	ld.ub	r8,r8[0x1]
8000d1d4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d1d8:	f0 09 18 00 	cp.b	r9,r8
8000d1dc:	c0 41       	brne	8000d1e4 <udc_next_desc_in_iface+0x54>
8000d1de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d1e2:	c1 48       	rjmp	8000d20a <udc_next_desc_in_iface+0x7a>
8000d1e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d1e8:	11 88       	ld.ub	r8,r8[0x0]
8000d1ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d1ee:	f2 08 00 08 	add	r8,r9,r8
8000d1f2:	ef 48 ff f8 	st.w	r7[-8],r8
8000d1f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d1fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d1fe:	10 39       	cp.w	r9,r8
8000d200:	fe 9b ff e0 	brhi	8000d1c0 <udc_next_desc_in_iface+0x30>
8000d204:	c0 28       	rjmp	8000d208 <udc_next_desc_in_iface+0x78>
8000d206:	d7 03       	nop
8000d208:	30 08       	mov	r8,0
8000d20a:	10 9c       	mov	r12,r8
8000d20c:	2f dd       	sub	sp,-12
8000d20e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d212:	00 00       	add	r0,r0
8000d214:	80 00       	ld.sh	r0,r0[0x0]
8000d216:	d1 5c       	*unknown*

8000d218 <udc_update_iface_desc>:
8000d218:	eb cd 40 80 	pushm	r7,lr
8000d21c:	1a 97       	mov	r7,sp
8000d21e:	20 3d       	sub	sp,12
8000d220:	18 99       	mov	r9,r12
8000d222:	16 98       	mov	r8,r11
8000d224:	ef 69 ff f8 	st.b	r7[-8],r9
8000d228:	ef 68 ff f4 	st.b	r7[-12],r8
8000d22c:	4a 58       	lddpc	r8,8000d2c0 <udc_update_iface_desc+0xa8>
8000d22e:	11 88       	ld.ub	r8,r8[0x0]
8000d230:	58 08       	cp.w	r8,0
8000d232:	c0 31       	brne	8000d238 <udc_update_iface_desc+0x20>
8000d234:	30 08       	mov	r8,0
8000d236:	c4 18       	rjmp	8000d2b8 <udc_update_iface_desc+0xa0>
8000d238:	4a 38       	lddpc	r8,8000d2c4 <udc_update_iface_desc+0xac>
8000d23a:	70 08       	ld.w	r8,r8[0x0]
8000d23c:	70 08       	ld.w	r8,r8[0x0]
8000d23e:	11 c8       	ld.ub	r8,r8[0x4]
8000d240:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d244:	f0 09 18 00 	cp.b	r9,r8
8000d248:	c0 33       	brcs	8000d24e <udc_update_iface_desc+0x36>
8000d24a:	30 08       	mov	r8,0
8000d24c:	c3 68       	rjmp	8000d2b8 <udc_update_iface_desc+0xa0>
8000d24e:	49 e8       	lddpc	r8,8000d2c4 <udc_update_iface_desc+0xac>
8000d250:	70 08       	ld.w	r8,r8[0x0]
8000d252:	70 08       	ld.w	r8,r8[0x0]
8000d254:	10 99       	mov	r9,r8
8000d256:	49 d8       	lddpc	r8,8000d2c8 <udc_update_iface_desc+0xb0>
8000d258:	91 09       	st.w	r8[0x0],r9
8000d25a:	f0 1f 00 1d 	mcall	8000d2cc <udc_update_iface_desc+0xb4>
8000d25e:	18 98       	mov	r8,r12
8000d260:	ef 48 ff fc 	st.w	r7[-4],r8
8000d264:	c2 28       	rjmp	8000d2a8 <udc_update_iface_desc+0x90>
8000d266:	49 98       	lddpc	r8,8000d2c8 <udc_update_iface_desc+0xb0>
8000d268:	70 08       	ld.w	r8,r8[0x0]
8000d26a:	11 99       	ld.ub	r9,r8[0x1]
8000d26c:	30 48       	mov	r8,4
8000d26e:	f0 09 18 00 	cp.b	r9,r8
8000d272:	c1 31       	brne	8000d298 <udc_update_iface_desc+0x80>
8000d274:	49 58       	lddpc	r8,8000d2c8 <udc_update_iface_desc+0xb0>
8000d276:	70 08       	ld.w	r8,r8[0x0]
8000d278:	11 a8       	ld.ub	r8,r8[0x2]
8000d27a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000d27e:	f0 09 18 00 	cp.b	r9,r8
8000d282:	c0 b1       	brne	8000d298 <udc_update_iface_desc+0x80>
8000d284:	49 18       	lddpc	r8,8000d2c8 <udc_update_iface_desc+0xb0>
8000d286:	70 08       	ld.w	r8,r8[0x0]
8000d288:	11 b8       	ld.ub	r8,r8[0x3]
8000d28a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d28e:	f0 09 18 00 	cp.b	r9,r8
8000d292:	c0 31       	brne	8000d298 <udc_update_iface_desc+0x80>
8000d294:	30 18       	mov	r8,1
8000d296:	c1 18       	rjmp	8000d2b8 <udc_update_iface_desc+0xa0>
8000d298:	48 c8       	lddpc	r8,8000d2c8 <udc_update_iface_desc+0xb0>
8000d29a:	70 09       	ld.w	r9,r8[0x0]
8000d29c:	48 b8       	lddpc	r8,8000d2c8 <udc_update_iface_desc+0xb0>
8000d29e:	70 08       	ld.w	r8,r8[0x0]
8000d2a0:	11 88       	ld.ub	r8,r8[0x0]
8000d2a2:	10 09       	add	r9,r8
8000d2a4:	48 98       	lddpc	r8,8000d2c8 <udc_update_iface_desc+0xb0>
8000d2a6:	91 09       	st.w	r8[0x0],r9
8000d2a8:	48 88       	lddpc	r8,8000d2c8 <udc_update_iface_desc+0xb0>
8000d2aa:	70 08       	ld.w	r8,r8[0x0]
8000d2ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d2b0:	10 39       	cp.w	r9,r8
8000d2b2:	fe 9b ff da 	brhi	8000d266 <udc_update_iface_desc+0x4e>
8000d2b6:	30 08       	mov	r8,0
8000d2b8:	10 9c       	mov	r12,r8
8000d2ba:	2f dd       	sub	sp,-12
8000d2bc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d2c0:	00 00       	add	r0,r0
8000d2c2:	08 52       	eor	r2,r4
8000d2c4:	00 00       	add	r0,r0
8000d2c6:	08 54       	eor	r4,r4
8000d2c8:	00 00       	add	r0,r0
8000d2ca:	08 58       	eor	r8,r4
8000d2cc:	80 00       	ld.sh	r0,r0[0x0]
8000d2ce:	d1 5c       	*unknown*

8000d2d0 <udc_iface_disable>:
8000d2d0:	eb cd 40 80 	pushm	r7,lr
8000d2d4:	1a 97       	mov	r7,sp
8000d2d6:	20 3d       	sub	sp,12
8000d2d8:	18 98       	mov	r8,r12
8000d2da:	ef 68 ff f4 	st.b	r7[-12],r8
8000d2de:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d2e2:	30 0b       	mov	r11,0
8000d2e4:	10 9c       	mov	r12,r8
8000d2e6:	f0 1f 00 25 	mcall	8000d378 <udc_iface_disable+0xa8>
8000d2ea:	18 98       	mov	r8,r12
8000d2ec:	ec 18 00 01 	eorl	r8,0x1
8000d2f0:	5c 58       	castu.b	r8
8000d2f2:	c0 30       	breq	8000d2f8 <udc_iface_disable+0x28>
8000d2f4:	30 08       	mov	r8,0
8000d2f6:	c3 d8       	rjmp	8000d370 <udc_iface_disable+0xa0>
8000d2f8:	4a 18       	lddpc	r8,8000d37c <udc_iface_disable+0xac>
8000d2fa:	70 08       	ld.w	r8,r8[0x0]
8000d2fc:	70 19       	ld.w	r9,r8[0x4]
8000d2fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d302:	a3 68       	lsl	r8,0x2
8000d304:	f2 08 00 08 	add	r8,r9,r8
8000d308:	70 08       	ld.w	r8,r8[0x0]
8000d30a:	ef 48 ff f8 	st.w	r7[-8],r8
8000d30e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d312:	70 38       	ld.w	r8,r8[0xc]
8000d314:	5d 18       	icall	r8
8000d316:	18 98       	mov	r8,r12
8000d318:	10 99       	mov	r9,r8
8000d31a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d31e:	12 9b       	mov	r11,r9
8000d320:	10 9c       	mov	r12,r8
8000d322:	f0 1f 00 16 	mcall	8000d378 <udc_iface_disable+0xa8>
8000d326:	18 98       	mov	r8,r12
8000d328:	ec 18 00 01 	eorl	r8,0x1
8000d32c:	5c 58       	castu.b	r8
8000d32e:	c0 30       	breq	8000d334 <udc_iface_disable+0x64>
8000d330:	30 08       	mov	r8,0
8000d332:	c1 f8       	rjmp	8000d370 <udc_iface_disable+0xa0>
8000d334:	49 38       	lddpc	r8,8000d380 <udc_iface_disable+0xb0>
8000d336:	70 08       	ld.w	r8,r8[0x0]
8000d338:	ef 48 ff fc 	st.w	r7[-4],r8
8000d33c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d340:	30 5b       	mov	r11,5
8000d342:	10 9c       	mov	r12,r8
8000d344:	f0 1f 00 10 	mcall	8000d384 <udc_iface_disable+0xb4>
8000d348:	18 98       	mov	r8,r12
8000d34a:	ef 48 ff fc 	st.w	r7[-4],r8
8000d34e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d352:	58 08       	cp.w	r8,0
8000d354:	c0 71       	brne	8000d362 <udc_iface_disable+0x92>
8000d356:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d35a:	70 18       	ld.w	r8,r8[0x4]
8000d35c:	5d 18       	icall	r8
8000d35e:	30 18       	mov	r8,1
8000d360:	c0 88       	rjmp	8000d370 <udc_iface_disable+0xa0>
8000d362:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d366:	11 a8       	ld.ub	r8,r8[0x2]
8000d368:	10 9c       	mov	r12,r8
8000d36a:	f0 1f 00 08 	mcall	8000d388 <udc_iface_disable+0xb8>
8000d36e:	ce 7b       	rjmp	8000d33c <udc_iface_disable+0x6c>
8000d370:	10 9c       	mov	r12,r8
8000d372:	2f dd       	sub	sp,-12
8000d374:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d378:	80 00       	ld.sh	r0,r0[0x0]
8000d37a:	d2 18       	*unknown*
8000d37c:	00 00       	add	r0,r0
8000d37e:	08 54       	eor	r4,r4
8000d380:	00 00       	add	r0,r0
8000d382:	08 58       	eor	r8,r4
8000d384:	80 00       	ld.sh	r0,r0[0x0]
8000d386:	d1 90       	acall	0x64
8000d388:	80 00       	ld.sh	r0,r0[0x0]
8000d38a:	a2 8c       	st.b	r1[0x0],r12

8000d38c <udc_iface_enable>:
8000d38c:	eb cd 40 80 	pushm	r7,lr
8000d390:	1a 97       	mov	r7,sp
8000d392:	20 3d       	sub	sp,12
8000d394:	18 99       	mov	r9,r12
8000d396:	16 98       	mov	r8,r11
8000d398:	ef 69 ff f8 	st.b	r7[-8],r9
8000d39c:	ef 68 ff f4 	st.b	r7[-12],r8
8000d3a0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000d3a4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d3a8:	12 9b       	mov	r11,r9
8000d3aa:	10 9c       	mov	r12,r8
8000d3ac:	f0 1f 00 25 	mcall	8000d440 <udc_iface_enable+0xb4>
8000d3b0:	18 98       	mov	r8,r12
8000d3b2:	ec 18 00 01 	eorl	r8,0x1
8000d3b6:	5c 58       	castu.b	r8
8000d3b8:	c0 30       	breq	8000d3be <udc_iface_enable+0x32>
8000d3ba:	30 08       	mov	r8,0
8000d3bc:	c3 e8       	rjmp	8000d438 <udc_iface_enable+0xac>
8000d3be:	4a 28       	lddpc	r8,8000d444 <udc_iface_enable+0xb8>
8000d3c0:	70 08       	ld.w	r8,r8[0x0]
8000d3c2:	ef 48 ff fc 	st.w	r7[-4],r8
8000d3c6:	c0 28       	rjmp	8000d3ca <udc_iface_enable+0x3e>
8000d3c8:	d7 03       	nop
8000d3ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d3ce:	30 5b       	mov	r11,5
8000d3d0:	10 9c       	mov	r12,r8
8000d3d2:	f0 1f 00 1e 	mcall	8000d448 <udc_iface_enable+0xbc>
8000d3d6:	18 98       	mov	r8,r12
8000d3d8:	ef 48 ff fc 	st.w	r7[-4],r8
8000d3dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d3e0:	58 08       	cp.w	r8,0
8000d3e2:	c0 e1       	brne	8000d3fe <udc_iface_enable+0x72>
8000d3e4:	49 a8       	lddpc	r8,8000d44c <udc_iface_enable+0xc0>
8000d3e6:	70 08       	ld.w	r8,r8[0x0]
8000d3e8:	70 19       	ld.w	r9,r8[0x4]
8000d3ea:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d3ee:	a3 68       	lsl	r8,0x2
8000d3f0:	f2 08 00 08 	add	r8,r9,r8
8000d3f4:	70 08       	ld.w	r8,r8[0x0]
8000d3f6:	70 08       	ld.w	r8,r8[0x0]
8000d3f8:	5d 18       	icall	r8
8000d3fa:	18 98       	mov	r8,r12
8000d3fc:	c1 e8       	rjmp	8000d438 <udc_iface_enable+0xac>
8000d3fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d402:	11 c9       	ld.ub	r9,r8[0x4]
8000d404:	a9 69       	lsl	r9,0x8
8000d406:	11 d8       	ld.ub	r8,r8[0x5]
8000d408:	12 48       	or	r8,r9
8000d40a:	5c 88       	casts.h	r8
8000d40c:	5c 88       	casts.h	r8
8000d40e:	5c c8       	swap.bh	r8
8000d410:	5c 88       	casts.h	r8
8000d412:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000d416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d41a:	11 b8       	ld.ub	r8,r8[0x3]
8000d41c:	10 99       	mov	r9,r8
8000d41e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d422:	11 a8       	ld.ub	r8,r8[0x2]
8000d424:	12 9b       	mov	r11,r9
8000d426:	10 9c       	mov	r12,r8
8000d428:	f0 1f 00 0a 	mcall	8000d450 <udc_iface_enable+0xc4>
8000d42c:	18 98       	mov	r8,r12
8000d42e:	ec 18 00 01 	eorl	r8,0x1
8000d432:	5c 58       	castu.b	r8
8000d434:	cc a0       	breq	8000d3c8 <udc_iface_enable+0x3c>
8000d436:	30 08       	mov	r8,0
8000d438:	10 9c       	mov	r12,r8
8000d43a:	2f dd       	sub	sp,-12
8000d43c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d440:	80 00       	ld.sh	r0,r0[0x0]
8000d442:	d2 18       	*unknown*
8000d444:	00 00       	add	r0,r0
8000d446:	08 58       	eor	r8,r4
8000d448:	80 00       	ld.sh	r0,r0[0x0]
8000d44a:	d1 90       	acall	0x64
8000d44c:	00 00       	add	r0,r0
8000d44e:	08 54       	eor	r4,r4
8000d450:	80 00       	ld.sh	r0,r0[0x0]
8000d452:	9f 3c       	st.w	pc[0xc],r12

8000d454 <udc_start>:
8000d454:	eb cd 40 80 	pushm	r7,lr
8000d458:	1a 97       	mov	r7,sp
8000d45a:	f0 1f 00 03 	mcall	8000d464 <udc_start+0x10>
8000d45e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d462:	00 00       	add	r0,r0
8000d464:	80 00       	ld.sh	r0,r0[0x0]
8000d466:	9c 68       	ld.sh	r8,lr[0xc]

8000d468 <udc_reset>:
8000d468:	eb cd 40 80 	pushm	r7,lr
8000d46c:	1a 97       	mov	r7,sp
8000d46e:	20 1d       	sub	sp,4
8000d470:	49 38       	lddpc	r8,8000d4bc <udc_reset+0x54>
8000d472:	11 88       	ld.ub	r8,r8[0x0]
8000d474:	58 08       	cp.w	r8,0
8000d476:	c1 80       	breq	8000d4a6 <udc_reset+0x3e>
8000d478:	30 08       	mov	r8,0
8000d47a:	ef 68 ff ff 	st.b	r7[-1],r8
8000d47e:	c0 b8       	rjmp	8000d494 <udc_reset+0x2c>
8000d480:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d484:	10 9c       	mov	r12,r8
8000d486:	f0 1f 00 0f 	mcall	8000d4c0 <udc_reset+0x58>
8000d48a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d48e:	2f f8       	sub	r8,-1
8000d490:	ef 68 ff ff 	st.b	r7[-1],r8
8000d494:	48 c8       	lddpc	r8,8000d4c4 <udc_reset+0x5c>
8000d496:	70 08       	ld.w	r8,r8[0x0]
8000d498:	70 08       	ld.w	r8,r8[0x0]
8000d49a:	11 c8       	ld.ub	r8,r8[0x4]
8000d49c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d4a0:	f0 09 18 00 	cp.b	r9,r8
8000d4a4:	ce e3       	brcs	8000d480 <udc_reset+0x18>
8000d4a6:	48 69       	lddpc	r9,8000d4bc <udc_reset+0x54>
8000d4a8:	30 08       	mov	r8,0
8000d4aa:	b2 88       	st.b	r9[0x0],r8
8000d4ac:	48 79       	lddpc	r9,8000d4c8 <udc_reset+0x60>
8000d4ae:	e0 68 01 00 	mov	r8,256
8000d4b2:	b2 08       	st.h	r9[0x0],r8
8000d4b4:	2f fd       	sub	sp,-4
8000d4b6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d4ba:	00 00       	add	r0,r0
8000d4bc:	00 00       	add	r0,r0
8000d4be:	08 52       	eor	r2,r4
8000d4c0:	80 00       	ld.sh	r0,r0[0x0]
8000d4c2:	d2 d0       	acall	0xb4
8000d4c4:	00 00       	add	r0,r0
8000d4c6:	08 54       	eor	r4,r4
8000d4c8:	00 00       	add	r0,r0
8000d4ca:	08 50       	eor	r0,r4

8000d4cc <udc_sof_notify>:
8000d4cc:	eb cd 40 80 	pushm	r7,lr
8000d4d0:	1a 97       	mov	r7,sp
8000d4d2:	20 1d       	sub	sp,4
8000d4d4:	49 88       	lddpc	r8,8000d534 <udc_sof_notify+0x68>
8000d4d6:	11 88       	ld.ub	r8,r8[0x0]
8000d4d8:	58 08       	cp.w	r8,0
8000d4da:	c2 a0       	breq	8000d52e <udc_sof_notify+0x62>
8000d4dc:	30 08       	mov	r8,0
8000d4de:	ef 68 ff ff 	st.b	r7[-1],r8
8000d4e2:	c1 d8       	rjmp	8000d51c <udc_sof_notify+0x50>
8000d4e4:	49 58       	lddpc	r8,8000d538 <udc_sof_notify+0x6c>
8000d4e6:	70 08       	ld.w	r8,r8[0x0]
8000d4e8:	70 19       	ld.w	r9,r8[0x4]
8000d4ea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d4ee:	a3 68       	lsl	r8,0x2
8000d4f0:	f2 08 00 08 	add	r8,r9,r8
8000d4f4:	70 08       	ld.w	r8,r8[0x0]
8000d4f6:	70 48       	ld.w	r8,r8[0x10]
8000d4f8:	58 08       	cp.w	r8,0
8000d4fa:	c0 c0       	breq	8000d512 <udc_sof_notify+0x46>
8000d4fc:	48 f8       	lddpc	r8,8000d538 <udc_sof_notify+0x6c>
8000d4fe:	70 08       	ld.w	r8,r8[0x0]
8000d500:	70 19       	ld.w	r9,r8[0x4]
8000d502:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d506:	a3 68       	lsl	r8,0x2
8000d508:	f2 08 00 08 	add	r8,r9,r8
8000d50c:	70 08       	ld.w	r8,r8[0x0]
8000d50e:	70 48       	ld.w	r8,r8[0x10]
8000d510:	5d 18       	icall	r8
8000d512:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d516:	2f f8       	sub	r8,-1
8000d518:	ef 68 ff ff 	st.b	r7[-1],r8
8000d51c:	48 78       	lddpc	r8,8000d538 <udc_sof_notify+0x6c>
8000d51e:	70 08       	ld.w	r8,r8[0x0]
8000d520:	70 08       	ld.w	r8,r8[0x0]
8000d522:	11 c8       	ld.ub	r8,r8[0x4]
8000d524:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d528:	f0 09 18 00 	cp.b	r9,r8
8000d52c:	cd c3       	brcs	8000d4e4 <udc_sof_notify+0x18>
8000d52e:	2f fd       	sub	sp,-4
8000d530:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d534:	00 00       	add	r0,r0
8000d536:	08 52       	eor	r2,r4
8000d538:	00 00       	add	r0,r0
8000d53a:	08 54       	eor	r4,r4

8000d53c <udc_req_std_dev_get_status>:
8000d53c:	eb cd 40 80 	pushm	r7,lr
8000d540:	1a 97       	mov	r7,sp
8000d542:	48 98       	lddpc	r8,8000d564 <udc_req_std_dev_get_status+0x28>
8000d544:	90 39       	ld.sh	r9,r8[0x6]
8000d546:	30 28       	mov	r8,2
8000d548:	f0 09 19 00 	cp.h	r9,r8
8000d54c:	c0 30       	breq	8000d552 <udc_req_std_dev_get_status+0x16>
8000d54e:	30 08       	mov	r8,0
8000d550:	c0 78       	rjmp	8000d55e <udc_req_std_dev_get_status+0x22>
8000d552:	48 68       	lddpc	r8,8000d568 <udc_req_std_dev_get_status+0x2c>
8000d554:	30 2b       	mov	r11,2
8000d556:	10 9c       	mov	r12,r8
8000d558:	f0 1f 00 05 	mcall	8000d56c <udc_req_std_dev_get_status+0x30>
8000d55c:	30 18       	mov	r8,1
8000d55e:	10 9c       	mov	r12,r8
8000d560:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d564:	00 00       	add	r0,r0
8000d566:	0d e4       	ld.ub	r4,r6[0x6]
8000d568:	00 00       	add	r0,r0
8000d56a:	08 50       	eor	r0,r4
8000d56c:	80 00       	ld.sh	r0,r0[0x0]
8000d56e:	9f 10       	st.w	pc[0x4],r0

8000d570 <udc_req_std_ep_get_status>:
8000d570:	eb cd 40 80 	pushm	r7,lr
8000d574:	1a 97       	mov	r7,sp
8000d576:	49 18       	lddpc	r8,8000d5b8 <udc_req_std_ep_get_status+0x48>
8000d578:	90 39       	ld.sh	r9,r8[0x6]
8000d57a:	30 28       	mov	r8,2
8000d57c:	f0 09 19 00 	cp.h	r9,r8
8000d580:	c0 30       	breq	8000d586 <udc_req_std_ep_get_status+0x16>
8000d582:	30 08       	mov	r8,0
8000d584:	c1 68       	rjmp	8000d5b0 <udc_req_std_ep_get_status+0x40>
8000d586:	48 d8       	lddpc	r8,8000d5b8 <udc_req_std_ep_get_status+0x48>
8000d588:	90 28       	ld.sh	r8,r8[0x4]
8000d58a:	5c 58       	castu.b	r8
8000d58c:	10 9c       	mov	r12,r8
8000d58e:	f0 1f 00 0c 	mcall	8000d5bc <udc_req_std_ep_get_status+0x4c>
8000d592:	18 98       	mov	r8,r12
8000d594:	58 08       	cp.w	r8,0
8000d596:	c0 40       	breq	8000d59e <udc_req_std_ep_get_status+0x2e>
8000d598:	e0 68 01 00 	mov	r8,256
8000d59c:	c0 28       	rjmp	8000d5a0 <udc_req_std_ep_get_status+0x30>
8000d59e:	30 08       	mov	r8,0
8000d5a0:	48 89       	lddpc	r9,8000d5c0 <udc_req_std_ep_get_status+0x50>
8000d5a2:	b2 08       	st.h	r9[0x0],r8
8000d5a4:	48 78       	lddpc	r8,8000d5c0 <udc_req_std_ep_get_status+0x50>
8000d5a6:	30 2b       	mov	r11,2
8000d5a8:	10 9c       	mov	r12,r8
8000d5aa:	f0 1f 00 07 	mcall	8000d5c4 <udc_req_std_ep_get_status+0x54>
8000d5ae:	30 18       	mov	r8,1
8000d5b0:	10 9c       	mov	r12,r8
8000d5b2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d5b6:	00 00       	add	r0,r0
8000d5b8:	00 00       	add	r0,r0
8000d5ba:	0d e4       	ld.ub	r4,r6[0x6]
8000d5bc:	80 00       	ld.sh	r0,r0[0x0]
8000d5be:	a3 28       	st.d	r1++,r8
8000d5c0:	00 00       	add	r0,r0
8000d5c2:	08 5e       	eor	lr,r4
8000d5c4:	80 00       	ld.sh	r0,r0[0x0]
8000d5c6:	9f 10       	st.w	pc[0x4],r0

8000d5c8 <udc_req_std_dev_clear_feature>:
8000d5c8:	eb cd 40 80 	pushm	r7,lr
8000d5cc:	1a 97       	mov	r7,sp
8000d5ce:	48 d8       	lddpc	r8,8000d600 <udc_req_std_dev_clear_feature+0x38>
8000d5d0:	90 38       	ld.sh	r8,r8[0x6]
8000d5d2:	58 08       	cp.w	r8,0
8000d5d4:	c0 30       	breq	8000d5da <udc_req_std_dev_clear_feature+0x12>
8000d5d6:	30 08       	mov	r8,0
8000d5d8:	c1 08       	rjmp	8000d5f8 <udc_req_std_dev_clear_feature+0x30>
8000d5da:	48 a8       	lddpc	r8,8000d600 <udc_req_std_dev_clear_feature+0x38>
8000d5dc:	90 19       	ld.sh	r9,r8[0x2]
8000d5de:	30 18       	mov	r8,1
8000d5e0:	f0 09 19 00 	cp.h	r9,r8
8000d5e4:	c0 91       	brne	8000d5f6 <udc_req_std_dev_clear_feature+0x2e>
8000d5e6:	48 88       	lddpc	r8,8000d604 <udc_req_std_dev_clear_feature+0x3c>
8000d5e8:	90 08       	ld.sh	r8,r8[0x0]
8000d5ea:	a9 d8       	cbr	r8,0x9
8000d5ec:	5c 88       	casts.h	r8
8000d5ee:	48 69       	lddpc	r9,8000d604 <udc_req_std_dev_clear_feature+0x3c>
8000d5f0:	b2 08       	st.h	r9[0x0],r8
8000d5f2:	30 18       	mov	r8,1
8000d5f4:	c0 28       	rjmp	8000d5f8 <udc_req_std_dev_clear_feature+0x30>
8000d5f6:	30 08       	mov	r8,0
8000d5f8:	10 9c       	mov	r12,r8
8000d5fa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d5fe:	00 00       	add	r0,r0
8000d600:	00 00       	add	r0,r0
8000d602:	0d e4       	ld.ub	r4,r6[0x6]
8000d604:	00 00       	add	r0,r0
8000d606:	08 50       	eor	r0,r4

8000d608 <udc_req_std_ep_clear_feature>:
8000d608:	eb cd 40 80 	pushm	r7,lr
8000d60c:	1a 97       	mov	r7,sp
8000d60e:	48 c8       	lddpc	r8,8000d63c <udc_req_std_ep_clear_feature+0x34>
8000d610:	90 38       	ld.sh	r8,r8[0x6]
8000d612:	58 08       	cp.w	r8,0
8000d614:	c0 30       	breq	8000d61a <udc_req_std_ep_clear_feature+0x12>
8000d616:	30 08       	mov	r8,0
8000d618:	c0 e8       	rjmp	8000d634 <udc_req_std_ep_clear_feature+0x2c>
8000d61a:	48 98       	lddpc	r8,8000d63c <udc_req_std_ep_clear_feature+0x34>
8000d61c:	90 18       	ld.sh	r8,r8[0x2]
8000d61e:	58 08       	cp.w	r8,0
8000d620:	c0 91       	brne	8000d632 <udc_req_std_ep_clear_feature+0x2a>
8000d622:	48 78       	lddpc	r8,8000d63c <udc_req_std_ep_clear_feature+0x34>
8000d624:	90 28       	ld.sh	r8,r8[0x4]
8000d626:	5c 58       	castu.b	r8
8000d628:	10 9c       	mov	r12,r8
8000d62a:	f0 1f 00 06 	mcall	8000d640 <udc_req_std_ep_clear_feature+0x38>
8000d62e:	18 98       	mov	r8,r12
8000d630:	c0 28       	rjmp	8000d634 <udc_req_std_ep_clear_feature+0x2c>
8000d632:	30 08       	mov	r8,0
8000d634:	10 9c       	mov	r12,r8
8000d636:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d63a:	00 00       	add	r0,r0
8000d63c:	00 00       	add	r0,r0
8000d63e:	0d e4       	ld.ub	r4,r6[0x6]
8000d640:	80 00       	ld.sh	r0,r0[0x0]
8000d642:	a4 6c       	st.h	r2[0xc],r12

8000d644 <udc_req_std_dev_set_feature>:
8000d644:	eb cd 40 80 	pushm	r7,lr
8000d648:	1a 97       	mov	r7,sp
8000d64a:	4a 78       	lddpc	r8,8000d6e4 <udc_req_std_dev_set_feature+0xa0>
8000d64c:	90 38       	ld.sh	r8,r8[0x6]
8000d64e:	58 08       	cp.w	r8,0
8000d650:	c0 30       	breq	8000d656 <udc_req_std_dev_set_feature+0x12>
8000d652:	30 08       	mov	r8,0
8000d654:	c4 48       	rjmp	8000d6dc <udc_req_std_dev_set_feature+0x98>
8000d656:	4a 48       	lddpc	r8,8000d6e4 <udc_req_std_dev_set_feature+0xa0>
8000d658:	90 18       	ld.sh	r8,r8[0x2]
8000d65a:	5c 78       	castu.h	r8
8000d65c:	58 18       	cp.w	r8,1
8000d65e:	c0 40       	breq	8000d666 <udc_req_std_dev_set_feature+0x22>
8000d660:	58 28       	cp.w	r8,2
8000d662:	c0 40       	breq	8000d66a <udc_req_std_dev_set_feature+0x26>
8000d664:	c3 b8       	rjmp	8000d6da <udc_req_std_dev_set_feature+0x96>
8000d666:	30 08       	mov	r8,0
8000d668:	c3 a8       	rjmp	8000d6dc <udc_req_std_dev_set_feature+0x98>
8000d66a:	f0 1f 00 20 	mcall	8000d6e8 <udc_req_std_dev_set_feature+0xa4>
8000d66e:	18 98       	mov	r8,r12
8000d670:	ec 18 00 01 	eorl	r8,0x1
8000d674:	5c 58       	castu.b	r8
8000d676:	c2 f1       	brne	8000d6d4 <udc_req_std_dev_set_feature+0x90>
8000d678:	49 b8       	lddpc	r8,8000d6e4 <udc_req_std_dev_set_feature+0xa0>
8000d67a:	90 28       	ld.sh	r8,r8[0x4]
8000d67c:	5c 78       	castu.h	r8
8000d67e:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d682:	c2 b1       	brne	8000d6d8 <udc_req_std_dev_set_feature+0x94>
8000d684:	f0 1f 00 1a 	mcall	8000d6ec <udc_req_std_dev_set_feature+0xa8>
8000d688:	49 78       	lddpc	r8,8000d6e4 <udc_req_std_dev_set_feature+0xa0>
8000d68a:	90 28       	ld.sh	r8,r8[0x4]
8000d68c:	5c 78       	castu.h	r8
8000d68e:	a9 88       	lsr	r8,0x8
8000d690:	5c 88       	casts.h	r8
8000d692:	5c 78       	castu.h	r8
8000d694:	58 28       	cp.w	r8,2
8000d696:	c1 00       	breq	8000d6b6 <udc_req_std_dev_set_feature+0x72>
8000d698:	e0 89 00 05 	brgt	8000d6a2 <udc_req_std_dev_set_feature+0x5e>
8000d69c:	58 18       	cp.w	r8,1
8000d69e:	c0 70       	breq	8000d6ac <udc_req_std_dev_set_feature+0x68>
8000d6a0:	c1 d8       	rjmp	8000d6da <udc_req_std_dev_set_feature+0x96>
8000d6a2:	58 38       	cp.w	r8,3
8000d6a4:	c0 e0       	breq	8000d6c0 <udc_req_std_dev_set_feature+0x7c>
8000d6a6:	58 48       	cp.w	r8,4
8000d6a8:	c1 10       	breq	8000d6ca <udc_req_std_dev_set_feature+0x86>
8000d6aa:	c1 88       	rjmp	8000d6da <udc_req_std_dev_set_feature+0x96>
8000d6ac:	48 e8       	lddpc	r8,8000d6e4 <udc_req_std_dev_set_feature+0xa0>
8000d6ae:	49 19       	lddpc	r9,8000d6f0 <udc_req_std_dev_set_feature+0xac>
8000d6b0:	91 49       	st.w	r8[0x10],r9
8000d6b2:	30 18       	mov	r8,1
8000d6b4:	c1 48       	rjmp	8000d6dc <udc_req_std_dev_set_feature+0x98>
8000d6b6:	48 c8       	lddpc	r8,8000d6e4 <udc_req_std_dev_set_feature+0xa0>
8000d6b8:	48 f9       	lddpc	r9,8000d6f4 <udc_req_std_dev_set_feature+0xb0>
8000d6ba:	91 49       	st.w	r8[0x10],r9
8000d6bc:	30 18       	mov	r8,1
8000d6be:	c0 f8       	rjmp	8000d6dc <udc_req_std_dev_set_feature+0x98>
8000d6c0:	48 98       	lddpc	r8,8000d6e4 <udc_req_std_dev_set_feature+0xa0>
8000d6c2:	48 e9       	lddpc	r9,8000d6f8 <udc_req_std_dev_set_feature+0xb4>
8000d6c4:	91 49       	st.w	r8[0x10],r9
8000d6c6:	30 18       	mov	r8,1
8000d6c8:	c0 a8       	rjmp	8000d6dc <udc_req_std_dev_set_feature+0x98>
8000d6ca:	48 78       	lddpc	r8,8000d6e4 <udc_req_std_dev_set_feature+0xa0>
8000d6cc:	48 c9       	lddpc	r9,8000d6fc <udc_req_std_dev_set_feature+0xb8>
8000d6ce:	91 49       	st.w	r8[0x10],r9
8000d6d0:	30 18       	mov	r8,1
8000d6d2:	c0 58       	rjmp	8000d6dc <udc_req_std_dev_set_feature+0x98>
8000d6d4:	d7 03       	nop
8000d6d6:	c0 28       	rjmp	8000d6da <udc_req_std_dev_set_feature+0x96>
8000d6d8:	d7 03       	nop
8000d6da:	30 08       	mov	r8,0
8000d6dc:	10 9c       	mov	r12,r8
8000d6de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d6e2:	00 00       	add	r0,r0
8000d6e4:	00 00       	add	r0,r0
8000d6e6:	0d e4       	ld.ub	r4,r6[0x6]
8000d6e8:	80 00       	ld.sh	r0,r0[0x0]
8000d6ea:	9e 74       	ld.sh	r4,pc[0xe]
8000d6ec:	80 00       	ld.sh	r0,r0[0x0]
8000d6ee:	d4 68       	*unknown*
8000d6f0:	80 00       	ld.sh	r0,r0[0x0]
8000d6f2:	a8 30       	st.h	r4[0x6],r0
8000d6f4:	80 00       	ld.sh	r0,r0[0x0]
8000d6f6:	a8 5a       	st.h	r4[0xa],r10
8000d6f8:	80 00       	ld.sh	r0,r0[0x0]
8000d6fa:	a8 84       	st.b	r4[0x0],r4
8000d6fc:	80 00       	ld.sh	r0,r0[0x0]
8000d6fe:	a8 a0       	st.b	r4[0x2],r0

8000d700 <udc_req_std_ep_set_feature>:
8000d700:	eb cd 40 80 	pushm	r7,lr
8000d704:	1a 97       	mov	r7,sp
8000d706:	48 f8       	lddpc	r8,8000d740 <udc_req_std_ep_set_feature+0x40>
8000d708:	90 38       	ld.sh	r8,r8[0x6]
8000d70a:	58 08       	cp.w	r8,0
8000d70c:	c0 30       	breq	8000d712 <udc_req_std_ep_set_feature+0x12>
8000d70e:	30 08       	mov	r8,0
8000d710:	c1 48       	rjmp	8000d738 <udc_req_std_ep_set_feature+0x38>
8000d712:	48 c8       	lddpc	r8,8000d740 <udc_req_std_ep_set_feature+0x40>
8000d714:	90 18       	ld.sh	r8,r8[0x2]
8000d716:	58 08       	cp.w	r8,0
8000d718:	c0 f1       	brne	8000d736 <udc_req_std_ep_set_feature+0x36>
8000d71a:	48 a8       	lddpc	r8,8000d740 <udc_req_std_ep_set_feature+0x40>
8000d71c:	90 28       	ld.sh	r8,r8[0x4]
8000d71e:	5c 58       	castu.b	r8
8000d720:	10 9c       	mov	r12,r8
8000d722:	f0 1f 00 09 	mcall	8000d744 <udc_req_std_ep_set_feature+0x44>
8000d726:	48 78       	lddpc	r8,8000d740 <udc_req_std_ep_set_feature+0x40>
8000d728:	90 28       	ld.sh	r8,r8[0x4]
8000d72a:	5c 58       	castu.b	r8
8000d72c:	10 9c       	mov	r12,r8
8000d72e:	f0 1f 00 07 	mcall	8000d748 <udc_req_std_ep_set_feature+0x48>
8000d732:	18 98       	mov	r8,r12
8000d734:	c0 28       	rjmp	8000d738 <udc_req_std_ep_set_feature+0x38>
8000d736:	30 08       	mov	r8,0
8000d738:	10 9c       	mov	r12,r8
8000d73a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d73e:	00 00       	add	r0,r0
8000d740:	00 00       	add	r0,r0
8000d742:	0d e4       	ld.ub	r4,r6[0x6]
8000d744:	80 00       	ld.sh	r0,r0[0x0]
8000d746:	a6 d0       	st.b	r3[0x5],r0
8000d748:	80 00       	ld.sh	r0,r0[0x0]
8000d74a:	a3 58       	asr	r8,0x3

8000d74c <udc_valid_address>:
8000d74c:	eb cd 40 80 	pushm	r7,lr
8000d750:	1a 97       	mov	r7,sp
8000d752:	48 68       	lddpc	r8,8000d768 <udc_valid_address+0x1c>
8000d754:	90 18       	ld.sh	r8,r8[0x2]
8000d756:	5c 58       	castu.b	r8
8000d758:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000d75c:	10 9c       	mov	r12,r8
8000d75e:	f0 1f 00 04 	mcall	8000d76c <udc_valid_address+0x20>
8000d762:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d766:	00 00       	add	r0,r0
8000d768:	00 00       	add	r0,r0
8000d76a:	0d e4       	ld.ub	r4,r6[0x6]
8000d76c:	80 00       	ld.sh	r0,r0[0x0]
8000d76e:	9e 90       	ld.uh	r0,pc[0x2]

8000d770 <udc_req_std_dev_set_address>:
8000d770:	eb cd 40 80 	pushm	r7,lr
8000d774:	1a 97       	mov	r7,sp
8000d776:	48 78       	lddpc	r8,8000d790 <udc_req_std_dev_set_address+0x20>
8000d778:	90 38       	ld.sh	r8,r8[0x6]
8000d77a:	58 08       	cp.w	r8,0
8000d77c:	c0 30       	breq	8000d782 <udc_req_std_dev_set_address+0x12>
8000d77e:	30 08       	mov	r8,0
8000d780:	c0 58       	rjmp	8000d78a <udc_req_std_dev_set_address+0x1a>
8000d782:	48 48       	lddpc	r8,8000d790 <udc_req_std_dev_set_address+0x20>
8000d784:	48 49       	lddpc	r9,8000d794 <udc_req_std_dev_set_address+0x24>
8000d786:	91 49       	st.w	r8[0x10],r9
8000d788:	30 18       	mov	r8,1
8000d78a:	10 9c       	mov	r12,r8
8000d78c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d790:	00 00       	add	r0,r0
8000d792:	0d e4       	ld.ub	r4,r6[0x6]
8000d794:	80 00       	ld.sh	r0,r0[0x0]
8000d796:	d7 4c       	*unknown*

8000d798 <udc_req_std_dev_get_str_desc>:
8000d798:	eb cd 40 80 	pushm	r7,lr
8000d79c:	1a 97       	mov	r7,sp
8000d79e:	20 3d       	sub	sp,12
8000d7a0:	30 08       	mov	r8,0
8000d7a2:	ef 68 ff ff 	st.b	r7[-1],r8
8000d7a6:	4b 68       	lddpc	r8,8000d87c <udc_req_std_dev_get_str_desc+0xe4>
8000d7a8:	90 18       	ld.sh	r8,r8[0x2]
8000d7aa:	5c 78       	castu.h	r8
8000d7ac:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000d7b0:	58 18       	cp.w	r8,1
8000d7b2:	c1 00       	breq	8000d7d2 <udc_req_std_dev_get_str_desc+0x3a>
8000d7b4:	e0 89 00 05 	brgt	8000d7be <udc_req_std_dev_get_str_desc+0x26>
8000d7b8:	58 08       	cp.w	r8,0
8000d7ba:	c0 70       	breq	8000d7c8 <udc_req_std_dev_get_str_desc+0x30>
8000d7bc:	c2 28       	rjmp	8000d800 <udc_req_std_dev_get_str_desc+0x68>
8000d7be:	58 28       	cp.w	r8,2
8000d7c0:	c1 00       	breq	8000d7e0 <udc_req_std_dev_get_str_desc+0x48>
8000d7c2:	58 38       	cp.w	r8,3
8000d7c4:	c1 50       	breq	8000d7ee <udc_req_std_dev_get_str_desc+0x56>
8000d7c6:	c1 d8       	rjmp	8000d800 <udc_req_std_dev_get_str_desc+0x68>
8000d7c8:	30 4b       	mov	r11,4
8000d7ca:	4a ec       	lddpc	r12,8000d880 <udc_req_std_dev_get_str_desc+0xe8>
8000d7cc:	f0 1f 00 2e 	mcall	8000d884 <udc_req_std_dev_get_str_desc+0xec>
8000d7d0:	c1 a8       	rjmp	8000d804 <udc_req_std_dev_get_str_desc+0x6c>
8000d7d2:	30 78       	mov	r8,7
8000d7d4:	ef 68 ff ff 	st.b	r7[-1],r8
8000d7d8:	4a c8       	lddpc	r8,8000d888 <udc_req_std_dev_get_str_desc+0xf0>
8000d7da:	ef 48 ff f8 	st.w	r7[-8],r8
8000d7de:	c1 38       	rjmp	8000d804 <udc_req_std_dev_get_str_desc+0x6c>
8000d7e0:	30 78       	mov	r8,7
8000d7e2:	ef 68 ff ff 	st.b	r7[-1],r8
8000d7e6:	4a a8       	lddpc	r8,8000d88c <udc_req_std_dev_get_str_desc+0xf4>
8000d7e8:	ef 48 ff f8 	st.w	r7[-8],r8
8000d7ec:	c0 c8       	rjmp	8000d804 <udc_req_std_dev_get_str_desc+0x6c>
8000d7ee:	30 c8       	mov	r8,12
8000d7f0:	ef 68 ff ff 	st.b	r7[-1],r8
8000d7f4:	f0 1f 00 27 	mcall	8000d890 <udc_req_std_dev_get_str_desc+0xf8>
8000d7f8:	18 98       	mov	r8,r12
8000d7fa:	ef 48 ff f8 	st.w	r7[-8],r8
8000d7fe:	c0 38       	rjmp	8000d804 <udc_req_std_dev_get_str_desc+0x6c>
8000d800:	30 08       	mov	r8,0
8000d802:	c3 88       	rjmp	8000d872 <udc_req_std_dev_get_str_desc+0xda>
8000d804:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d808:	30 08       	mov	r8,0
8000d80a:	f0 09 18 00 	cp.b	r9,r8
8000d80e:	c3 10       	breq	8000d870 <udc_req_std_dev_get_str_desc+0xd8>
8000d810:	30 08       	mov	r8,0
8000d812:	ef 68 ff f7 	st.b	r7[-9],r8
8000d816:	c1 88       	rjmp	8000d846 <udc_req_std_dev_get_str_desc+0xae>
8000d818:	ef 3b ff f7 	ld.ub	r11,r7[-9]
8000d81c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000d820:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d824:	f2 08 00 08 	add	r8,r9,r8
8000d828:	11 88       	ld.ub	r8,r8[0x0]
8000d82a:	5c c8       	swap.bh	r8
8000d82c:	5c 88       	casts.h	r8
8000d82e:	10 99       	mov	r9,r8
8000d830:	49 9a       	lddpc	r10,8000d894 <udc_req_std_dev_get_str_desc+0xfc>
8000d832:	f6 08 15 01 	lsl	r8,r11,0x1
8000d836:	f4 08 00 08 	add	r8,r10,r8
8000d83a:	b0 19       	st.h	r8[0x2],r9
8000d83c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000d840:	2f f8       	sub	r8,-1
8000d842:	ef 68 ff f7 	st.b	r7[-9],r8
8000d846:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000d84a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d84e:	f0 09 18 00 	cp.b	r9,r8
8000d852:	ce 33       	brcs	8000d818 <udc_req_std_dev_get_str_desc+0x80>
8000d854:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d858:	2f f8       	sub	r8,-1
8000d85a:	5c 58       	castu.b	r8
8000d85c:	a1 78       	lsl	r8,0x1
8000d85e:	5c 58       	castu.b	r8
8000d860:	48 d9       	lddpc	r9,8000d894 <udc_req_std_dev_get_str_desc+0xfc>
8000d862:	b2 88       	st.b	r9[0x0],r8
8000d864:	48 c8       	lddpc	r8,8000d894 <udc_req_std_dev_get_str_desc+0xfc>
8000d866:	11 88       	ld.ub	r8,r8[0x0]
8000d868:	10 9b       	mov	r11,r8
8000d86a:	48 bc       	lddpc	r12,8000d894 <udc_req_std_dev_get_str_desc+0xfc>
8000d86c:	f0 1f 00 06 	mcall	8000d884 <udc_req_std_dev_get_str_desc+0xec>
8000d870:	30 18       	mov	r8,1
8000d872:	10 9c       	mov	r12,r8
8000d874:	2f dd       	sub	sp,-12
8000d876:	e3 cd 80 80 	ldm	sp++,r7,pc
8000d87a:	00 00       	add	r0,r0
8000d87c:	00 00       	add	r0,r0
8000d87e:	0d e4       	ld.ub	r4,r6[0x6]
8000d880:	00 00       	add	r0,r0
8000d882:	02 14       	sub	r4,r1
8000d884:	80 00       	ld.sh	r0,r0[0x0]
8000d886:	9f 10       	st.w	pc[0x4],r0
8000d888:	00 00       	add	r0,r0
8000d88a:	02 18       	sub	r8,r1
8000d88c:	00 00       	add	r0,r0
8000d88e:	02 20       	rsub	r0,r1
8000d890:	80 00       	ld.sh	r0,r0[0x0]
8000d892:	d1 48       	*unknown*
8000d894:	00 00       	add	r0,r0
8000d896:	02 28       	rsub	r8,r1

8000d898 <udc_req_std_dev_get_descriptor>:
8000d898:	eb cd 40 80 	pushm	r7,lr
8000d89c:	1a 97       	mov	r7,sp
8000d89e:	20 1d       	sub	sp,4
8000d8a0:	fe f8 02 40 	ld.w	r8,pc[576]
8000d8a4:	90 18       	ld.sh	r8,r8[0x2]
8000d8a6:	ef 68 ff ff 	st.b	r7[-1],r8
8000d8aa:	fe f8 02 36 	ld.w	r8,pc[566]
8000d8ae:	90 18       	ld.sh	r8,r8[0x2]
8000d8b0:	5c 78       	castu.h	r8
8000d8b2:	a9 88       	lsr	r8,0x8
8000d8b4:	5c 88       	casts.h	r8
8000d8b6:	5c 58       	castu.b	r8
8000d8b8:	58 38       	cp.w	r8,3
8000d8ba:	e0 80 00 f7 	breq	8000daa8 <udc_req_std_dev_get_descriptor+0x210>
8000d8be:	e0 89 00 07 	brgt	8000d8cc <udc_req_std_dev_get_descriptor+0x34>
8000d8c2:	58 18       	cp.w	r8,1
8000d8c4:	c0 b0       	breq	8000d8da <udc_req_std_dev_get_descriptor+0x42>
8000d8c6:	58 28       	cp.w	r8,2
8000d8c8:	c2 70       	breq	8000d916 <udc_req_std_dev_get_descriptor+0x7e>
8000d8ca:	cf 88       	rjmp	8000daba <udc_req_std_dev_get_descriptor+0x222>
8000d8cc:	58 68       	cp.w	r8,6
8000d8ce:	e0 80 00 82 	breq	8000d9d2 <udc_req_std_dev_get_descriptor+0x13a>
8000d8d2:	58 78       	cp.w	r8,7
8000d8d4:	e0 80 00 8a 	breq	8000d9e8 <udc_req_std_dev_get_descriptor+0x150>
8000d8d8:	cf 18       	rjmp	8000daba <udc_req_std_dev_get_descriptor+0x222>
8000d8da:	f0 1f 00 83 	mcall	8000dae4 <udc_req_std_dev_get_descriptor+0x24c>
8000d8de:	18 98       	mov	r8,r12
8000d8e0:	ec 18 00 01 	eorl	r8,0x1
8000d8e4:	5c 58       	castu.b	r8
8000d8e6:	c0 d0       	breq	8000d900 <udc_req_std_dev_get_descriptor+0x68>
8000d8e8:	fe f8 02 00 	ld.w	r8,pc[512]
8000d8ec:	70 28       	ld.w	r8,r8[0x8]
8000d8ee:	11 88       	ld.ub	r8,r8[0x0]
8000d8f0:	10 99       	mov	r9,r8
8000d8f2:	4f e8       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000d8f4:	70 28       	ld.w	r8,r8[0x8]
8000d8f6:	12 9b       	mov	r11,r9
8000d8f8:	10 9c       	mov	r12,r8
8000d8fa:	f0 1f 00 7d 	mcall	8000daec <udc_req_std_dev_get_descriptor+0x254>
8000d8fe:	ce 18       	rjmp	8000dac0 <udc_req_std_dev_get_descriptor+0x228>
8000d900:	4f a8       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000d902:	70 08       	ld.w	r8,r8[0x0]
8000d904:	11 88       	ld.ub	r8,r8[0x0]
8000d906:	10 99       	mov	r9,r8
8000d908:	4f 88       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000d90a:	70 08       	ld.w	r8,r8[0x0]
8000d90c:	12 9b       	mov	r11,r9
8000d90e:	10 9c       	mov	r12,r8
8000d910:	f0 1f 00 77 	mcall	8000daec <udc_req_std_dev_get_descriptor+0x254>
8000d914:	cd 68       	rjmp	8000dac0 <udc_req_std_dev_get_descriptor+0x228>
8000d916:	f0 1f 00 74 	mcall	8000dae4 <udc_req_std_dev_get_descriptor+0x24c>
8000d91a:	18 98       	mov	r8,r12
8000d91c:	58 08       	cp.w	r8,0
8000d91e:	c2 b0       	breq	8000d974 <udc_req_std_dev_get_descriptor+0xdc>
8000d920:	4f 28       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000d922:	70 28       	ld.w	r8,r8[0x8]
8000d924:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d928:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d92c:	f0 09 18 00 	cp.b	r9,r8
8000d930:	c0 33       	brcs	8000d936 <udc_req_std_dev_get_descriptor+0x9e>
8000d932:	30 08       	mov	r8,0
8000d934:	cd 28       	rjmp	8000dad8 <udc_req_std_dev_get_descriptor+0x240>
8000d936:	4e d8       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000d938:	70 49       	ld.w	r9,r8[0x10]
8000d93a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d93e:	a3 78       	lsl	r8,0x3
8000d940:	f2 08 00 08 	add	r8,r9,r8
8000d944:	70 08       	ld.w	r8,r8[0x0]
8000d946:	11 a9       	ld.ub	r9,r8[0x2]
8000d948:	a9 69       	lsl	r9,0x8
8000d94a:	11 b8       	ld.ub	r8,r8[0x3]
8000d94c:	12 48       	or	r8,r9
8000d94e:	5c 88       	casts.h	r8
8000d950:	5c 88       	casts.h	r8
8000d952:	5c c8       	swap.bh	r8
8000d954:	5c 88       	casts.h	r8
8000d956:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000d95a:	4e 48       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000d95c:	70 4a       	ld.w	r10,r8[0x10]
8000d95e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d962:	a3 78       	lsl	r8,0x3
8000d964:	f4 08 00 08 	add	r8,r10,r8
8000d968:	70 08       	ld.w	r8,r8[0x0]
8000d96a:	12 9b       	mov	r11,r9
8000d96c:	10 9c       	mov	r12,r8
8000d96e:	f0 1f 00 60 	mcall	8000daec <udc_req_std_dev_get_descriptor+0x254>
8000d972:	c2 a8       	rjmp	8000d9c6 <udc_req_std_dev_get_descriptor+0x12e>
8000d974:	4d d8       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000d976:	70 08       	ld.w	r8,r8[0x0]
8000d978:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d97c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000d980:	f0 09 18 00 	cp.b	r9,r8
8000d984:	c0 33       	brcs	8000d98a <udc_req_std_dev_get_descriptor+0xf2>
8000d986:	30 08       	mov	r8,0
8000d988:	ca 88       	rjmp	8000dad8 <udc_req_std_dev_get_descriptor+0x240>
8000d98a:	4d 88       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000d98c:	70 19       	ld.w	r9,r8[0x4]
8000d98e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d992:	a3 78       	lsl	r8,0x3
8000d994:	f2 08 00 08 	add	r8,r9,r8
8000d998:	70 08       	ld.w	r8,r8[0x0]
8000d99a:	11 a9       	ld.ub	r9,r8[0x2]
8000d99c:	a9 69       	lsl	r9,0x8
8000d99e:	11 b8       	ld.ub	r8,r8[0x3]
8000d9a0:	12 48       	or	r8,r9
8000d9a2:	5c 88       	casts.h	r8
8000d9a4:	5c 88       	casts.h	r8
8000d9a6:	5c c8       	swap.bh	r8
8000d9a8:	5c 88       	casts.h	r8
8000d9aa:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000d9ae:	4c f8       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000d9b0:	70 1a       	ld.w	r10,r8[0x4]
8000d9b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d9b6:	a3 78       	lsl	r8,0x3
8000d9b8:	f4 08 00 08 	add	r8,r10,r8
8000d9bc:	70 08       	ld.w	r8,r8[0x0]
8000d9be:	12 9b       	mov	r11,r9
8000d9c0:	10 9c       	mov	r12,r8
8000d9c2:	f0 1f 00 4b 	mcall	8000daec <udc_req_std_dev_get_descriptor+0x254>
8000d9c6:	4c 78       	lddpc	r8,8000dae0 <udc_req_std_dev_get_descriptor+0x248>
8000d9c8:	70 28       	ld.w	r8,r8[0x8]
8000d9ca:	10 99       	mov	r9,r8
8000d9cc:	30 28       	mov	r8,2
8000d9ce:	b2 98       	st.b	r9[0x1],r8
8000d9d0:	c7 88       	rjmp	8000dac0 <udc_req_std_dev_get_descriptor+0x228>
8000d9d2:	4c 68       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000d9d4:	70 38       	ld.w	r8,r8[0xc]
8000d9d6:	11 88       	ld.ub	r8,r8[0x0]
8000d9d8:	10 99       	mov	r9,r8
8000d9da:	4c 48       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000d9dc:	70 38       	ld.w	r8,r8[0xc]
8000d9de:	12 9b       	mov	r11,r9
8000d9e0:	10 9c       	mov	r12,r8
8000d9e2:	f0 1f 00 43 	mcall	8000daec <udc_req_std_dev_get_descriptor+0x254>
8000d9e6:	c6 d8       	rjmp	8000dac0 <udc_req_std_dev_get_descriptor+0x228>
8000d9e8:	f0 1f 00 3f 	mcall	8000dae4 <udc_req_std_dev_get_descriptor+0x24c>
8000d9ec:	18 98       	mov	r8,r12
8000d9ee:	ec 18 00 01 	eorl	r8,0x1
8000d9f2:	5c 58       	castu.b	r8
8000d9f4:	c2 b0       	breq	8000da4a <udc_req_std_dev_get_descriptor+0x1b2>
8000d9f6:	4b d8       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000d9f8:	70 28       	ld.w	r8,r8[0x8]
8000d9fa:	f1 38 00 11 	ld.ub	r8,r8[17]
8000d9fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000da02:	f0 09 18 00 	cp.b	r9,r8
8000da06:	c0 33       	brcs	8000da0c <udc_req_std_dev_get_descriptor+0x174>
8000da08:	30 08       	mov	r8,0
8000da0a:	c6 78       	rjmp	8000dad8 <udc_req_std_dev_get_descriptor+0x240>
8000da0c:	4b 78       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000da0e:	70 49       	ld.w	r9,r8[0x10]
8000da10:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da14:	a3 78       	lsl	r8,0x3
8000da16:	f2 08 00 08 	add	r8,r9,r8
8000da1a:	70 08       	ld.w	r8,r8[0x0]
8000da1c:	11 a9       	ld.ub	r9,r8[0x2]
8000da1e:	a9 69       	lsl	r9,0x8
8000da20:	11 b8       	ld.ub	r8,r8[0x3]
8000da22:	12 48       	or	r8,r9
8000da24:	5c 88       	casts.h	r8
8000da26:	5c 88       	casts.h	r8
8000da28:	5c c8       	swap.bh	r8
8000da2a:	5c 88       	casts.h	r8
8000da2c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000da30:	4a e8       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000da32:	70 4a       	ld.w	r10,r8[0x10]
8000da34:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da38:	a3 78       	lsl	r8,0x3
8000da3a:	f4 08 00 08 	add	r8,r10,r8
8000da3e:	70 08       	ld.w	r8,r8[0x0]
8000da40:	12 9b       	mov	r11,r9
8000da42:	10 9c       	mov	r12,r8
8000da44:	f0 1f 00 2a 	mcall	8000daec <udc_req_std_dev_get_descriptor+0x254>
8000da48:	c2 a8       	rjmp	8000da9c <udc_req_std_dev_get_descriptor+0x204>
8000da4a:	4a 88       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000da4c:	70 08       	ld.w	r8,r8[0x0]
8000da4e:	f1 38 00 11 	ld.ub	r8,r8[17]
8000da52:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000da56:	f0 09 18 00 	cp.b	r9,r8
8000da5a:	c0 33       	brcs	8000da60 <udc_req_std_dev_get_descriptor+0x1c8>
8000da5c:	30 08       	mov	r8,0
8000da5e:	c3 d8       	rjmp	8000dad8 <udc_req_std_dev_get_descriptor+0x240>
8000da60:	4a 28       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000da62:	70 19       	ld.w	r9,r8[0x4]
8000da64:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da68:	a3 78       	lsl	r8,0x3
8000da6a:	f2 08 00 08 	add	r8,r9,r8
8000da6e:	70 08       	ld.w	r8,r8[0x0]
8000da70:	11 a9       	ld.ub	r9,r8[0x2]
8000da72:	a9 69       	lsl	r9,0x8
8000da74:	11 b8       	ld.ub	r8,r8[0x3]
8000da76:	12 48       	or	r8,r9
8000da78:	5c 88       	casts.h	r8
8000da7a:	5c 88       	casts.h	r8
8000da7c:	5c c8       	swap.bh	r8
8000da7e:	5c 88       	casts.h	r8
8000da80:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000da84:	49 98       	lddpc	r8,8000dae8 <udc_req_std_dev_get_descriptor+0x250>
8000da86:	70 1a       	ld.w	r10,r8[0x4]
8000da88:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000da8c:	a3 78       	lsl	r8,0x3
8000da8e:	f4 08 00 08 	add	r8,r10,r8
8000da92:	70 08       	ld.w	r8,r8[0x0]
8000da94:	12 9b       	mov	r11,r9
8000da96:	10 9c       	mov	r12,r8
8000da98:	f0 1f 00 15 	mcall	8000daec <udc_req_std_dev_get_descriptor+0x254>
8000da9c:	49 18       	lddpc	r8,8000dae0 <udc_req_std_dev_get_descriptor+0x248>
8000da9e:	70 28       	ld.w	r8,r8[0x8]
8000daa0:	10 99       	mov	r9,r8
8000daa2:	30 78       	mov	r8,7
8000daa4:	b2 98       	st.b	r9[0x1],r8
8000daa6:	c0 d8       	rjmp	8000dac0 <udc_req_std_dev_get_descriptor+0x228>
8000daa8:	f0 1f 00 12 	mcall	8000daf0 <udc_req_std_dev_get_descriptor+0x258>
8000daac:	18 98       	mov	r8,r12
8000daae:	ec 18 00 01 	eorl	r8,0x1
8000dab2:	5c 58       	castu.b	r8
8000dab4:	c0 50       	breq	8000dabe <udc_req_std_dev_get_descriptor+0x226>
8000dab6:	30 08       	mov	r8,0
8000dab8:	c1 08       	rjmp	8000dad8 <udc_req_std_dev_get_descriptor+0x240>
8000daba:	30 08       	mov	r8,0
8000dabc:	c0 e8       	rjmp	8000dad8 <udc_req_std_dev_get_descriptor+0x240>
8000dabe:	d7 03       	nop
8000dac0:	48 88       	lddpc	r8,8000dae0 <udc_req_std_dev_get_descriptor+0x248>
8000dac2:	90 39       	ld.sh	r9,r8[0x6]
8000dac4:	48 78       	lddpc	r8,8000dae0 <udc_req_std_dev_get_descriptor+0x248>
8000dac6:	90 68       	ld.sh	r8,r8[0xc]
8000dac8:	f0 09 19 00 	cp.h	r9,r8
8000dacc:	c0 52       	brcc	8000dad6 <udc_req_std_dev_get_descriptor+0x23e>
8000dace:	48 58       	lddpc	r8,8000dae0 <udc_req_std_dev_get_descriptor+0x248>
8000dad0:	90 38       	ld.sh	r8,r8[0x6]
8000dad2:	48 49       	lddpc	r9,8000dae0 <udc_req_std_dev_get_descriptor+0x248>
8000dad4:	b2 68       	st.h	r9[0xc],r8
8000dad6:	30 18       	mov	r8,1
8000dad8:	10 9c       	mov	r12,r8
8000dada:	2f fd       	sub	sp,-4
8000dadc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dae0:	00 00       	add	r0,r0
8000dae2:	0d e4       	ld.ub	r4,r6[0x6]
8000dae4:	80 00       	ld.sh	r0,r0[0x0]
8000dae6:	9e 74       	ld.sh	r4,pc[0xe]
8000dae8:	00 00       	add	r0,r0
8000daea:	02 00       	add	r0,r1
8000daec:	80 00       	ld.sh	r0,r0[0x0]
8000daee:	9f 10       	st.w	pc[0x4],r0
8000daf0:	80 00       	ld.sh	r0,r0[0x0]
8000daf2:	d7 98       	*unknown*

8000daf4 <udc_req_std_dev_get_configuration>:
8000daf4:	eb cd 40 80 	pushm	r7,lr
8000daf8:	1a 97       	mov	r7,sp
8000dafa:	48 98       	lddpc	r8,8000db1c <udc_req_std_dev_get_configuration+0x28>
8000dafc:	90 39       	ld.sh	r9,r8[0x6]
8000dafe:	30 18       	mov	r8,1
8000db00:	f0 09 19 00 	cp.h	r9,r8
8000db04:	c0 30       	breq	8000db0a <udc_req_std_dev_get_configuration+0x16>
8000db06:	30 08       	mov	r8,0
8000db08:	c0 68       	rjmp	8000db14 <udc_req_std_dev_get_configuration+0x20>
8000db0a:	30 1b       	mov	r11,1
8000db0c:	48 5c       	lddpc	r12,8000db20 <udc_req_std_dev_get_configuration+0x2c>
8000db0e:	f0 1f 00 06 	mcall	8000db24 <udc_req_std_dev_get_configuration+0x30>
8000db12:	30 18       	mov	r8,1
8000db14:	10 9c       	mov	r12,r8
8000db16:	e3 cd 80 80 	ldm	sp++,r7,pc
8000db1a:	00 00       	add	r0,r0
8000db1c:	00 00       	add	r0,r0
8000db1e:	0d e4       	ld.ub	r4,r6[0x6]
8000db20:	00 00       	add	r0,r0
8000db22:	08 52       	eor	r2,r4
8000db24:	80 00       	ld.sh	r0,r0[0x0]
8000db26:	9f 10       	st.w	pc[0x4],r0

8000db28 <udc_req_std_dev_set_configuration>:
8000db28:	eb cd 40 80 	pushm	r7,lr
8000db2c:	1a 97       	mov	r7,sp
8000db2e:	20 1d       	sub	sp,4
8000db30:	4b c8       	lddpc	r8,8000dc20 <udc_req_std_dev_set_configuration+0xf8>
8000db32:	90 38       	ld.sh	r8,r8[0x6]
8000db34:	58 08       	cp.w	r8,0
8000db36:	c0 30       	breq	8000db3c <udc_req_std_dev_set_configuration+0x14>
8000db38:	30 08       	mov	r8,0
8000db3a:	c6 f8       	rjmp	8000dc18 <udc_req_std_dev_set_configuration+0xf0>
8000db3c:	f0 1f 00 3a 	mcall	8000dc24 <udc_req_std_dev_set_configuration+0xfc>
8000db40:	18 98       	mov	r8,r12
8000db42:	58 08       	cp.w	r8,0
8000db44:	c0 31       	brne	8000db4a <udc_req_std_dev_set_configuration+0x22>
8000db46:	30 08       	mov	r8,0
8000db48:	c6 88       	rjmp	8000dc18 <udc_req_std_dev_set_configuration+0xf0>
8000db4a:	f0 1f 00 38 	mcall	8000dc28 <udc_req_std_dev_set_configuration+0x100>
8000db4e:	18 98       	mov	r8,r12
8000db50:	58 08       	cp.w	r8,0
8000db52:	c0 f0       	breq	8000db70 <udc_req_std_dev_set_configuration+0x48>
8000db54:	4b 38       	lddpc	r8,8000dc20 <udc_req_std_dev_set_configuration+0xf8>
8000db56:	90 18       	ld.sh	r8,r8[0x2]
8000db58:	5c 78       	castu.h	r8
8000db5a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000db5e:	4b 48       	lddpc	r8,8000dc2c <udc_req_std_dev_set_configuration+0x104>
8000db60:	70 28       	ld.w	r8,r8[0x8]
8000db62:	f1 38 00 11 	ld.ub	r8,r8[17]
8000db66:	10 39       	cp.w	r9,r8
8000db68:	e0 8a 00 12 	brle	8000db8c <udc_req_std_dev_set_configuration+0x64>
8000db6c:	30 08       	mov	r8,0
8000db6e:	c5 58       	rjmp	8000dc18 <udc_req_std_dev_set_configuration+0xf0>
8000db70:	4a c8       	lddpc	r8,8000dc20 <udc_req_std_dev_set_configuration+0xf8>
8000db72:	90 18       	ld.sh	r8,r8[0x2]
8000db74:	5c 78       	castu.h	r8
8000db76:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000db7a:	4a d8       	lddpc	r8,8000dc2c <udc_req_std_dev_set_configuration+0x104>
8000db7c:	70 08       	ld.w	r8,r8[0x0]
8000db7e:	f1 38 00 11 	ld.ub	r8,r8[17]
8000db82:	10 39       	cp.w	r9,r8
8000db84:	e0 8a 00 05 	brle	8000db8e <udc_req_std_dev_set_configuration+0x66>
8000db88:	30 08       	mov	r8,0
8000db8a:	c4 78       	rjmp	8000dc18 <udc_req_std_dev_set_configuration+0xf0>
8000db8c:	d7 03       	nop
8000db8e:	f0 1f 00 29 	mcall	8000dc30 <udc_req_std_dev_set_configuration+0x108>
8000db92:	4a 48       	lddpc	r8,8000dc20 <udc_req_std_dev_set_configuration+0xf8>
8000db94:	90 18       	ld.sh	r8,r8[0x2]
8000db96:	5c 58       	castu.b	r8
8000db98:	4a 79       	lddpc	r9,8000dc34 <udc_req_std_dev_set_configuration+0x10c>
8000db9a:	b2 88       	st.b	r9[0x0],r8
8000db9c:	4a 68       	lddpc	r8,8000dc34 <udc_req_std_dev_set_configuration+0x10c>
8000db9e:	11 88       	ld.ub	r8,r8[0x0]
8000dba0:	58 08       	cp.w	r8,0
8000dba2:	c0 31       	brne	8000dba8 <udc_req_std_dev_set_configuration+0x80>
8000dba4:	30 18       	mov	r8,1
8000dba6:	c3 98       	rjmp	8000dc18 <udc_req_std_dev_set_configuration+0xf0>
8000dba8:	f0 1f 00 20 	mcall	8000dc28 <udc_req_std_dev_set_configuration+0x100>
8000dbac:	18 98       	mov	r8,r12
8000dbae:	58 08       	cp.w	r8,0
8000dbb0:	c0 b0       	breq	8000dbc6 <udc_req_std_dev_set_configuration+0x9e>
8000dbb2:	49 f8       	lddpc	r8,8000dc2c <udc_req_std_dev_set_configuration+0x104>
8000dbb4:	70 49       	ld.w	r9,r8[0x10]
8000dbb6:	4a 08       	lddpc	r8,8000dc34 <udc_req_std_dev_set_configuration+0x10c>
8000dbb8:	11 88       	ld.ub	r8,r8[0x0]
8000dbba:	20 18       	sub	r8,1
8000dbbc:	a3 78       	lsl	r8,0x3
8000dbbe:	10 09       	add	r9,r8
8000dbc0:	49 e8       	lddpc	r8,8000dc38 <udc_req_std_dev_set_configuration+0x110>
8000dbc2:	91 09       	st.w	r8[0x0],r9
8000dbc4:	c0 a8       	rjmp	8000dbd8 <udc_req_std_dev_set_configuration+0xb0>
8000dbc6:	49 a8       	lddpc	r8,8000dc2c <udc_req_std_dev_set_configuration+0x104>
8000dbc8:	70 19       	ld.w	r9,r8[0x4]
8000dbca:	49 b8       	lddpc	r8,8000dc34 <udc_req_std_dev_set_configuration+0x10c>
8000dbcc:	11 88       	ld.ub	r8,r8[0x0]
8000dbce:	20 18       	sub	r8,1
8000dbd0:	a3 78       	lsl	r8,0x3
8000dbd2:	10 09       	add	r9,r8
8000dbd4:	49 98       	lddpc	r8,8000dc38 <udc_req_std_dev_set_configuration+0x110>
8000dbd6:	91 09       	st.w	r8[0x0],r9
8000dbd8:	30 08       	mov	r8,0
8000dbda:	ef 68 ff ff 	st.b	r7[-1],r8
8000dbde:	c1 38       	rjmp	8000dc04 <udc_req_std_dev_set_configuration+0xdc>
8000dbe0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dbe4:	30 0b       	mov	r11,0
8000dbe6:	10 9c       	mov	r12,r8
8000dbe8:	f0 1f 00 15 	mcall	8000dc3c <udc_req_std_dev_set_configuration+0x114>
8000dbec:	18 98       	mov	r8,r12
8000dbee:	ec 18 00 01 	eorl	r8,0x1
8000dbf2:	5c 58       	castu.b	r8
8000dbf4:	c0 30       	breq	8000dbfa <udc_req_std_dev_set_configuration+0xd2>
8000dbf6:	30 08       	mov	r8,0
8000dbf8:	c1 08       	rjmp	8000dc18 <udc_req_std_dev_set_configuration+0xf0>
8000dbfa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000dbfe:	2f f8       	sub	r8,-1
8000dc00:	ef 68 ff ff 	st.b	r7[-1],r8
8000dc04:	48 d8       	lddpc	r8,8000dc38 <udc_req_std_dev_set_configuration+0x110>
8000dc06:	70 08       	ld.w	r8,r8[0x0]
8000dc08:	70 08       	ld.w	r8,r8[0x0]
8000dc0a:	11 c8       	ld.ub	r8,r8[0x4]
8000dc0c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dc10:	f0 09 18 00 	cp.b	r9,r8
8000dc14:	ce 63       	brcs	8000dbe0 <udc_req_std_dev_set_configuration+0xb8>
8000dc16:	30 18       	mov	r8,1
8000dc18:	10 9c       	mov	r12,r8
8000dc1a:	2f fd       	sub	sp,-4
8000dc1c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dc20:	00 00       	add	r0,r0
8000dc22:	0d e4       	ld.ub	r4,r6[0x6]
8000dc24:	80 00       	ld.sh	r0,r0[0x0]
8000dc26:	9e de       	ld.uh	lr,pc[0xa]
8000dc28:	80 00       	ld.sh	r0,r0[0x0]
8000dc2a:	9e 74       	ld.sh	r4,pc[0xe]
8000dc2c:	00 00       	add	r0,r0
8000dc2e:	02 00       	add	r0,r1
8000dc30:	80 00       	ld.sh	r0,r0[0x0]
8000dc32:	d4 68       	*unknown*
8000dc34:	00 00       	add	r0,r0
8000dc36:	08 52       	eor	r2,r4
8000dc38:	00 00       	add	r0,r0
8000dc3a:	08 54       	eor	r4,r4
8000dc3c:	80 00       	ld.sh	r0,r0[0x0]
8000dc3e:	d3 8c       	*unknown*

8000dc40 <udc_req_std_iface_get_setting>:
8000dc40:	eb cd 40 80 	pushm	r7,lr
8000dc44:	1a 97       	mov	r7,sp
8000dc46:	20 2d       	sub	sp,8
8000dc48:	4a 38       	lddpc	r8,8000dcd4 <udc_req_std_iface_get_setting+0x94>
8000dc4a:	90 39       	ld.sh	r9,r8[0x6]
8000dc4c:	30 18       	mov	r8,1
8000dc4e:	f0 09 19 00 	cp.h	r9,r8
8000dc52:	c0 30       	breq	8000dc58 <udc_req_std_iface_get_setting+0x18>
8000dc54:	30 08       	mov	r8,0
8000dc56:	c3 a8       	rjmp	8000dcca <udc_req_std_iface_get_setting+0x8a>
8000dc58:	4a 08       	lddpc	r8,8000dcd8 <udc_req_std_iface_get_setting+0x98>
8000dc5a:	11 88       	ld.ub	r8,r8[0x0]
8000dc5c:	58 08       	cp.w	r8,0
8000dc5e:	c0 31       	brne	8000dc64 <udc_req_std_iface_get_setting+0x24>
8000dc60:	30 08       	mov	r8,0
8000dc62:	c3 48       	rjmp	8000dcca <udc_req_std_iface_get_setting+0x8a>
8000dc64:	49 c8       	lddpc	r8,8000dcd4 <udc_req_std_iface_get_setting+0x94>
8000dc66:	90 28       	ld.sh	r8,r8[0x4]
8000dc68:	ef 68 ff fb 	st.b	r7[-5],r8
8000dc6c:	49 c8       	lddpc	r8,8000dcdc <udc_req_std_iface_get_setting+0x9c>
8000dc6e:	70 08       	ld.w	r8,r8[0x0]
8000dc70:	70 08       	ld.w	r8,r8[0x0]
8000dc72:	11 c8       	ld.ub	r8,r8[0x4]
8000dc74:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000dc78:	f0 09 18 00 	cp.b	r9,r8
8000dc7c:	c0 33       	brcs	8000dc82 <udc_req_std_iface_get_setting+0x42>
8000dc7e:	30 08       	mov	r8,0
8000dc80:	c2 58       	rjmp	8000dcca <udc_req_std_iface_get_setting+0x8a>
8000dc82:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dc86:	30 0b       	mov	r11,0
8000dc88:	10 9c       	mov	r12,r8
8000dc8a:	f0 1f 00 16 	mcall	8000dce0 <udc_req_std_iface_get_setting+0xa0>
8000dc8e:	18 98       	mov	r8,r12
8000dc90:	ec 18 00 01 	eorl	r8,0x1
8000dc94:	5c 58       	castu.b	r8
8000dc96:	c0 30       	breq	8000dc9c <udc_req_std_iface_get_setting+0x5c>
8000dc98:	30 08       	mov	r8,0
8000dc9a:	c1 88       	rjmp	8000dcca <udc_req_std_iface_get_setting+0x8a>
8000dc9c:	49 08       	lddpc	r8,8000dcdc <udc_req_std_iface_get_setting+0x9c>
8000dc9e:	70 08       	ld.w	r8,r8[0x0]
8000dca0:	70 19       	ld.w	r9,r8[0x4]
8000dca2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000dca6:	a3 68       	lsl	r8,0x2
8000dca8:	f2 08 00 08 	add	r8,r9,r8
8000dcac:	70 08       	ld.w	r8,r8[0x0]
8000dcae:	ef 48 ff fc 	st.w	r7[-4],r8
8000dcb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dcb6:	70 38       	ld.w	r8,r8[0xc]
8000dcb8:	5d 18       	icall	r8
8000dcba:	18 98       	mov	r8,r12
8000dcbc:	48 a9       	lddpc	r9,8000dce4 <udc_req_std_iface_get_setting+0xa4>
8000dcbe:	b2 88       	st.b	r9[0x0],r8
8000dcc0:	30 1b       	mov	r11,1
8000dcc2:	48 9c       	lddpc	r12,8000dce4 <udc_req_std_iface_get_setting+0xa4>
8000dcc4:	f0 1f 00 09 	mcall	8000dce8 <udc_req_std_iface_get_setting+0xa8>
8000dcc8:	30 18       	mov	r8,1
8000dcca:	10 9c       	mov	r12,r8
8000dccc:	2f ed       	sub	sp,-8
8000dcce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dcd2:	00 00       	add	r0,r0
8000dcd4:	00 00       	add	r0,r0
8000dcd6:	0d e4       	ld.ub	r4,r6[0x6]
8000dcd8:	00 00       	add	r0,r0
8000dcda:	08 52       	eor	r2,r4
8000dcdc:	00 00       	add	r0,r0
8000dcde:	08 54       	eor	r4,r4
8000dce0:	80 00       	ld.sh	r0,r0[0x0]
8000dce2:	d2 18       	*unknown*
8000dce4:	00 00       	add	r0,r0
8000dce6:	08 5c       	eor	r12,r4
8000dce8:	80 00       	ld.sh	r0,r0[0x0]
8000dcea:	9f 10       	st.w	pc[0x4],r0

8000dcec <udc_req_std_iface_set_setting>:
8000dcec:	eb cd 40 80 	pushm	r7,lr
8000dcf0:	1a 97       	mov	r7,sp
8000dcf2:	20 1d       	sub	sp,4
8000dcf4:	49 78       	lddpc	r8,8000dd50 <udc_req_std_iface_set_setting+0x64>
8000dcf6:	90 38       	ld.sh	r8,r8[0x6]
8000dcf8:	58 08       	cp.w	r8,0
8000dcfa:	c0 30       	breq	8000dd00 <udc_req_std_iface_set_setting+0x14>
8000dcfc:	30 08       	mov	r8,0
8000dcfe:	c2 48       	rjmp	8000dd46 <udc_req_std_iface_set_setting+0x5a>
8000dd00:	49 58       	lddpc	r8,8000dd54 <udc_req_std_iface_set_setting+0x68>
8000dd02:	11 88       	ld.ub	r8,r8[0x0]
8000dd04:	58 08       	cp.w	r8,0
8000dd06:	c0 31       	brne	8000dd0c <udc_req_std_iface_set_setting+0x20>
8000dd08:	30 08       	mov	r8,0
8000dd0a:	c1 e8       	rjmp	8000dd46 <udc_req_std_iface_set_setting+0x5a>
8000dd0c:	49 18       	lddpc	r8,8000dd50 <udc_req_std_iface_set_setting+0x64>
8000dd0e:	90 28       	ld.sh	r8,r8[0x4]
8000dd10:	ef 68 ff fe 	st.b	r7[-2],r8
8000dd14:	48 f8       	lddpc	r8,8000dd50 <udc_req_std_iface_set_setting+0x64>
8000dd16:	90 18       	ld.sh	r8,r8[0x2]
8000dd18:	ef 68 ff ff 	st.b	r7[-1],r8
8000dd1c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000dd20:	10 9c       	mov	r12,r8
8000dd22:	f0 1f 00 0e 	mcall	8000dd58 <udc_req_std_iface_set_setting+0x6c>
8000dd26:	18 98       	mov	r8,r12
8000dd28:	ec 18 00 01 	eorl	r8,0x1
8000dd2c:	5c 58       	castu.b	r8
8000dd2e:	c0 30       	breq	8000dd34 <udc_req_std_iface_set_setting+0x48>
8000dd30:	30 08       	mov	r8,0
8000dd32:	c0 a8       	rjmp	8000dd46 <udc_req_std_iface_set_setting+0x5a>
8000dd34:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000dd38:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000dd3c:	12 9b       	mov	r11,r9
8000dd3e:	10 9c       	mov	r12,r8
8000dd40:	f0 1f 00 07 	mcall	8000dd5c <udc_req_std_iface_set_setting+0x70>
8000dd44:	18 98       	mov	r8,r12
8000dd46:	10 9c       	mov	r12,r8
8000dd48:	2f fd       	sub	sp,-4
8000dd4a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dd4e:	00 00       	add	r0,r0
8000dd50:	00 00       	add	r0,r0
8000dd52:	0d e4       	ld.ub	r4,r6[0x6]
8000dd54:	00 00       	add	r0,r0
8000dd56:	08 52       	eor	r2,r4
8000dd58:	80 00       	ld.sh	r0,r0[0x0]
8000dd5a:	d2 d0       	acall	0xb4
8000dd5c:	80 00       	ld.sh	r0,r0[0x0]
8000dd5e:	d3 8c       	*unknown*

8000dd60 <udc_reqstd>:
8000dd60:	eb cd 40 80 	pushm	r7,lr
8000dd64:	1a 97       	mov	r7,sp
8000dd66:	4c 78       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000dd68:	11 88       	ld.ub	r8,r8[0x0]
8000dd6a:	10 99       	mov	r9,r8
8000dd6c:	30 08       	mov	r8,0
8000dd6e:	f0 09 18 00 	cp.b	r9,r8
8000dd72:	c3 c4       	brge	8000ddea <udc_reqstd+0x8a>
8000dd74:	4c 38       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000dd76:	90 38       	ld.sh	r8,r8[0x6]
8000dd78:	58 08       	cp.w	r8,0
8000dd7a:	c0 31       	brne	8000dd80 <udc_reqstd+0x20>
8000dd7c:	30 08       	mov	r8,0
8000dd7e:	c7 e8       	rjmp	8000de7a <udc_reqstd+0x11a>
8000dd80:	4c 08       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000dd82:	11 88       	ld.ub	r8,r8[0x0]
8000dd84:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dd88:	c1 51       	brne	8000ddb2 <udc_reqstd+0x52>
8000dd8a:	4b e8       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000dd8c:	11 98       	ld.ub	r8,r8[0x1]
8000dd8e:	58 68       	cp.w	r8,6
8000dd90:	c0 90       	breq	8000dda2 <udc_reqstd+0x42>
8000dd92:	58 88       	cp.w	r8,8
8000dd94:	c0 b0       	breq	8000ddaa <udc_reqstd+0x4a>
8000dd96:	58 08       	cp.w	r8,0
8000dd98:	c0 d1       	brne	8000ddb2 <udc_reqstd+0x52>
8000dd9a:	f0 1f 00 3b 	mcall	8000de84 <udc_reqstd+0x124>
8000dd9e:	18 98       	mov	r8,r12
8000dda0:	c6 d8       	rjmp	8000de7a <udc_reqstd+0x11a>
8000dda2:	f0 1f 00 3a 	mcall	8000de88 <udc_reqstd+0x128>
8000dda6:	18 98       	mov	r8,r12
8000dda8:	c6 98       	rjmp	8000de7a <udc_reqstd+0x11a>
8000ddaa:	f0 1f 00 39 	mcall	8000de8c <udc_reqstd+0x12c>
8000ddae:	18 98       	mov	r8,r12
8000ddb0:	c6 58       	rjmp	8000de7a <udc_reqstd+0x11a>
8000ddb2:	4b 48       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000ddb4:	11 88       	ld.ub	r8,r8[0x0]
8000ddb6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000ddba:	58 18       	cp.w	r8,1
8000ddbc:	c0 91       	brne	8000ddce <udc_reqstd+0x6e>
8000ddbe:	4b 18       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000ddc0:	11 98       	ld.ub	r8,r8[0x1]
8000ddc2:	58 a8       	cp.w	r8,10
8000ddc4:	c0 51       	brne	8000ddce <udc_reqstd+0x6e>
8000ddc6:	f0 1f 00 33 	mcall	8000de90 <udc_reqstd+0x130>
8000ddca:	18 98       	mov	r8,r12
8000ddcc:	c5 78       	rjmp	8000de7a <udc_reqstd+0x11a>
8000ddce:	4a d8       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000ddd0:	11 88       	ld.ub	r8,r8[0x0]
8000ddd2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000ddd6:	58 28       	cp.w	r8,2
8000ddd8:	c4 f1       	brne	8000de76 <udc_reqstd+0x116>
8000ddda:	4a a8       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000dddc:	11 98       	ld.ub	r8,r8[0x1]
8000ddde:	58 08       	cp.w	r8,0
8000dde0:	c4 c1       	brne	8000de78 <udc_reqstd+0x118>
8000dde2:	f0 1f 00 2d 	mcall	8000de94 <udc_reqstd+0x134>
8000dde6:	18 98       	mov	r8,r12
8000dde8:	c4 98       	rjmp	8000de7a <udc_reqstd+0x11a>
8000ddea:	4a 68       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000ddec:	11 88       	ld.ub	r8,r8[0x0]
8000ddee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000ddf2:	c1 f1       	brne	8000de30 <udc_reqstd+0xd0>
8000ddf4:	4a 38       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000ddf6:	11 98       	ld.ub	r8,r8[0x1]
8000ddf8:	58 38       	cp.w	r8,3
8000ddfa:	c1 30       	breq	8000de20 <udc_reqstd+0xc0>
8000ddfc:	e0 89 00 05 	brgt	8000de06 <udc_reqstd+0xa6>
8000de00:	58 18       	cp.w	r8,1
8000de02:	c0 b0       	breq	8000de18 <udc_reqstd+0xb8>
8000de04:	c1 68       	rjmp	8000de30 <udc_reqstd+0xd0>
8000de06:	58 58       	cp.w	r8,5
8000de08:	c0 40       	breq	8000de10 <udc_reqstd+0xb0>
8000de0a:	58 98       	cp.w	r8,9
8000de0c:	c0 e0       	breq	8000de28 <udc_reqstd+0xc8>
8000de0e:	c1 18       	rjmp	8000de30 <udc_reqstd+0xd0>
8000de10:	f0 1f 00 22 	mcall	8000de98 <udc_reqstd+0x138>
8000de14:	18 98       	mov	r8,r12
8000de16:	c3 28       	rjmp	8000de7a <udc_reqstd+0x11a>
8000de18:	f0 1f 00 21 	mcall	8000de9c <udc_reqstd+0x13c>
8000de1c:	18 98       	mov	r8,r12
8000de1e:	c2 e8       	rjmp	8000de7a <udc_reqstd+0x11a>
8000de20:	f0 1f 00 20 	mcall	8000dea0 <udc_reqstd+0x140>
8000de24:	18 98       	mov	r8,r12
8000de26:	c2 a8       	rjmp	8000de7a <udc_reqstd+0x11a>
8000de28:	f0 1f 00 1f 	mcall	8000dea4 <udc_reqstd+0x144>
8000de2c:	18 98       	mov	r8,r12
8000de2e:	c2 68       	rjmp	8000de7a <udc_reqstd+0x11a>
8000de30:	49 48       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000de32:	11 88       	ld.ub	r8,r8[0x0]
8000de34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de38:	58 18       	cp.w	r8,1
8000de3a:	c0 91       	brne	8000de4c <udc_reqstd+0xec>
8000de3c:	49 18       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000de3e:	11 98       	ld.ub	r8,r8[0x1]
8000de40:	58 b8       	cp.w	r8,11
8000de42:	c0 51       	brne	8000de4c <udc_reqstd+0xec>
8000de44:	f0 1f 00 19 	mcall	8000dea8 <udc_reqstd+0x148>
8000de48:	18 98       	mov	r8,r12
8000de4a:	c1 88       	rjmp	8000de7a <udc_reqstd+0x11a>
8000de4c:	48 d8       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000de4e:	11 88       	ld.ub	r8,r8[0x0]
8000de50:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000de54:	58 28       	cp.w	r8,2
8000de56:	c1 11       	brne	8000de78 <udc_reqstd+0x118>
8000de58:	48 a8       	lddpc	r8,8000de80 <udc_reqstd+0x120>
8000de5a:	11 98       	ld.ub	r8,r8[0x1]
8000de5c:	58 18       	cp.w	r8,1
8000de5e:	c0 40       	breq	8000de66 <udc_reqstd+0x106>
8000de60:	58 38       	cp.w	r8,3
8000de62:	c0 60       	breq	8000de6e <udc_reqstd+0x10e>
8000de64:	c0 a8       	rjmp	8000de78 <udc_reqstd+0x118>
8000de66:	f0 1f 00 12 	mcall	8000deac <udc_reqstd+0x14c>
8000de6a:	18 98       	mov	r8,r12
8000de6c:	c0 78       	rjmp	8000de7a <udc_reqstd+0x11a>
8000de6e:	f0 1f 00 11 	mcall	8000deb0 <udc_reqstd+0x150>
8000de72:	18 98       	mov	r8,r12
8000de74:	c0 38       	rjmp	8000de7a <udc_reqstd+0x11a>
8000de76:	d7 03       	nop
8000de78:	30 08       	mov	r8,0
8000de7a:	10 9c       	mov	r12,r8
8000de7c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000de80:	00 00       	add	r0,r0
8000de82:	0d e4       	ld.ub	r4,r6[0x6]
8000de84:	80 00       	ld.sh	r0,r0[0x0]
8000de86:	d5 3c       	*unknown*
8000de88:	80 00       	ld.sh	r0,r0[0x0]
8000de8a:	d8 98       	*unknown*
8000de8c:	80 00       	ld.sh	r0,r0[0x0]
8000de8e:	da f4       	*unknown*
8000de90:	80 00       	ld.sh	r0,r0[0x0]
8000de92:	dc 40       	acall	0x310
8000de94:	80 00       	ld.sh	r0,r0[0x0]
8000de96:	d5 70       	acall	0x15c
8000de98:	80 00       	ld.sh	r0,r0[0x0]
8000de9a:	d7 70       	acall	0x1dc
8000de9c:	80 00       	ld.sh	r0,r0[0x0]
8000de9e:	d5 c8       	*unknown*
8000dea0:	80 00       	ld.sh	r0,r0[0x0]
8000dea2:	d6 44       	*unknown*
8000dea4:	80 00       	ld.sh	r0,r0[0x0]
8000dea6:	db 28       	*unknown*
8000dea8:	80 00       	ld.sh	r0,r0[0x0]
8000deaa:	dc ec       	*unknown*
8000deac:	80 00       	ld.sh	r0,r0[0x0]
8000deae:	d6 08       	*unknown*
8000deb0:	80 00       	ld.sh	r0,r0[0x0]
8000deb2:	d7 00       	acall	0x1c0

8000deb4 <udc_req_iface>:
8000deb4:	eb cd 40 80 	pushm	r7,lr
8000deb8:	1a 97       	mov	r7,sp
8000deba:	20 2d       	sub	sp,8
8000debc:	4a 58       	lddpc	r8,8000df50 <udc_req_iface+0x9c>
8000debe:	11 88       	ld.ub	r8,r8[0x0]
8000dec0:	58 08       	cp.w	r8,0
8000dec2:	c0 31       	brne	8000dec8 <udc_req_iface+0x14>
8000dec4:	30 08       	mov	r8,0
8000dec6:	c4 08       	rjmp	8000df46 <udc_req_iface+0x92>
8000dec8:	4a 38       	lddpc	r8,8000df54 <udc_req_iface+0xa0>
8000deca:	90 28       	ld.sh	r8,r8[0x4]
8000decc:	ef 68 ff fb 	st.b	r7[-5],r8
8000ded0:	4a 28       	lddpc	r8,8000df58 <udc_req_iface+0xa4>
8000ded2:	70 08       	ld.w	r8,r8[0x0]
8000ded4:	70 08       	ld.w	r8,r8[0x0]
8000ded6:	11 c8       	ld.ub	r8,r8[0x4]
8000ded8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000dedc:	f0 09 18 00 	cp.b	r9,r8
8000dee0:	c0 33       	brcs	8000dee6 <udc_req_iface+0x32>
8000dee2:	30 08       	mov	r8,0
8000dee4:	c3 18       	rjmp	8000df46 <udc_req_iface+0x92>
8000dee6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000deea:	30 0b       	mov	r11,0
8000deec:	10 9c       	mov	r12,r8
8000deee:	f0 1f 00 1c 	mcall	8000df5c <udc_req_iface+0xa8>
8000def2:	18 98       	mov	r8,r12
8000def4:	ec 18 00 01 	eorl	r8,0x1
8000def8:	5c 58       	castu.b	r8
8000defa:	c0 30       	breq	8000df00 <udc_req_iface+0x4c>
8000defc:	30 08       	mov	r8,0
8000defe:	c2 48       	rjmp	8000df46 <udc_req_iface+0x92>
8000df00:	49 68       	lddpc	r8,8000df58 <udc_req_iface+0xa4>
8000df02:	70 08       	ld.w	r8,r8[0x0]
8000df04:	70 19       	ld.w	r9,r8[0x4]
8000df06:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000df0a:	a3 68       	lsl	r8,0x2
8000df0c:	f2 08 00 08 	add	r8,r9,r8
8000df10:	70 08       	ld.w	r8,r8[0x0]
8000df12:	ef 48 ff fc 	st.w	r7[-4],r8
8000df16:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df1a:	70 38       	ld.w	r8,r8[0xc]
8000df1c:	5d 18       	icall	r8
8000df1e:	18 98       	mov	r8,r12
8000df20:	10 99       	mov	r9,r8
8000df22:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000df26:	12 9b       	mov	r11,r9
8000df28:	10 9c       	mov	r12,r8
8000df2a:	f0 1f 00 0d 	mcall	8000df5c <udc_req_iface+0xa8>
8000df2e:	18 98       	mov	r8,r12
8000df30:	ec 18 00 01 	eorl	r8,0x1
8000df34:	5c 58       	castu.b	r8
8000df36:	c0 30       	breq	8000df3c <udc_req_iface+0x88>
8000df38:	30 08       	mov	r8,0
8000df3a:	c0 68       	rjmp	8000df46 <udc_req_iface+0x92>
8000df3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000df40:	70 28       	ld.w	r8,r8[0x8]
8000df42:	5d 18       	icall	r8
8000df44:	18 98       	mov	r8,r12
8000df46:	10 9c       	mov	r12,r8
8000df48:	2f ed       	sub	sp,-8
8000df4a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000df4e:	00 00       	add	r0,r0
8000df50:	00 00       	add	r0,r0
8000df52:	08 52       	eor	r2,r4
8000df54:	00 00       	add	r0,r0
8000df56:	0d e4       	ld.ub	r4,r6[0x6]
8000df58:	00 00       	add	r0,r0
8000df5a:	08 54       	eor	r4,r4
8000df5c:	80 00       	ld.sh	r0,r0[0x0]
8000df5e:	d2 18       	*unknown*

8000df60 <udc_process_setup>:
8000df60:	eb cd 40 80 	pushm	r7,lr
8000df64:	1a 97       	mov	r7,sp
8000df66:	49 a9       	lddpc	r9,8000dfcc <udc_process_setup+0x6c>
8000df68:	30 08       	mov	r8,0
8000df6a:	b2 68       	st.h	r9[0xc],r8
8000df6c:	49 88       	lddpc	r8,8000dfcc <udc_process_setup+0x6c>
8000df6e:	30 09       	mov	r9,0
8000df70:	91 49       	st.w	r8[0x10],r9
8000df72:	49 78       	lddpc	r8,8000dfcc <udc_process_setup+0x6c>
8000df74:	30 09       	mov	r9,0
8000df76:	91 59       	st.w	r8[0x14],r9
8000df78:	49 58       	lddpc	r8,8000dfcc <udc_process_setup+0x6c>
8000df7a:	11 88       	ld.ub	r8,r8[0x0]
8000df7c:	10 99       	mov	r9,r8
8000df7e:	30 08       	mov	r8,0
8000df80:	f0 09 18 00 	cp.b	r9,r8
8000df84:	c0 74       	brge	8000df92 <udc_process_setup+0x32>
8000df86:	49 28       	lddpc	r8,8000dfcc <udc_process_setup+0x6c>
8000df88:	90 38       	ld.sh	r8,r8[0x6]
8000df8a:	58 08       	cp.w	r8,0
8000df8c:	c0 31       	brne	8000df92 <udc_process_setup+0x32>
8000df8e:	30 08       	mov	r8,0
8000df90:	c1 b8       	rjmp	8000dfc6 <udc_process_setup+0x66>
8000df92:	48 f8       	lddpc	r8,8000dfcc <udc_process_setup+0x6c>
8000df94:	11 88       	ld.ub	r8,r8[0x0]
8000df96:	e2 18 00 60 	andl	r8,0x60,COH
8000df9a:	c0 81       	brne	8000dfaa <udc_process_setup+0x4a>
8000df9c:	f0 1f 00 0d 	mcall	8000dfd0 <udc_process_setup+0x70>
8000dfa0:	18 98       	mov	r8,r12
8000dfa2:	58 08       	cp.w	r8,0
8000dfa4:	c0 30       	breq	8000dfaa <udc_process_setup+0x4a>
8000dfa6:	30 18       	mov	r8,1
8000dfa8:	c0 f8       	rjmp	8000dfc6 <udc_process_setup+0x66>
8000dfaa:	48 98       	lddpc	r8,8000dfcc <udc_process_setup+0x6c>
8000dfac:	11 88       	ld.ub	r8,r8[0x0]
8000dfae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000dfb2:	58 18       	cp.w	r8,1
8000dfb4:	c0 81       	brne	8000dfc4 <udc_process_setup+0x64>
8000dfb6:	f0 1f 00 08 	mcall	8000dfd4 <udc_process_setup+0x74>
8000dfba:	18 98       	mov	r8,r12
8000dfbc:	58 08       	cp.w	r8,0
8000dfbe:	c0 30       	breq	8000dfc4 <udc_process_setup+0x64>
8000dfc0:	30 18       	mov	r8,1
8000dfc2:	c0 28       	rjmp	8000dfc6 <udc_process_setup+0x66>
8000dfc4:	30 08       	mov	r8,0
8000dfc6:	10 9c       	mov	r12,r8
8000dfc8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000dfcc:	00 00       	add	r0,r0
8000dfce:	0d e4       	ld.ub	r4,r6[0x6]
8000dfd0:	80 00       	ld.sh	r0,r0[0x0]
8000dfd2:	dd 60       	acall	0x358
8000dfd4:	80 00       	ld.sh	r0,r0[0x0]
8000dfd6:	de b4       	*unknown*

8000dfd8 <pm_sleep>:
#else
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
8000dfd8:	eb cd 40 80 	pushm	r7,lr
8000dfdc:	1a 97       	mov	r7,sp
8000dfde:	20 1d       	sub	sp,4
8000dfe0:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (sleep_mode) {
8000dfe4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dfe8:	58 58       	cp.w	r8,5
8000dfea:	c4 30       	breq	8000e070 <pm_sleep+0x98>
8000dfec:	e0 89 00 10 	brgt	8000e00c <pm_sleep+0x34>
8000dff0:	58 28       	cp.w	r8,2
8000dff2:	c2 d0       	breq	8000e04c <pm_sleep+0x74>
8000dff4:	e0 89 00 07 	brgt	8000e002 <pm_sleep+0x2a>
8000dff8:	58 08       	cp.w	r8,0
8000dffa:	c1 d0       	breq	8000e034 <pm_sleep+0x5c>
8000dffc:	58 18       	cp.w	r8,1
8000dffe:	c2 10       	breq	8000e040 <pm_sleep+0x68>
8000e000:	c3 d8       	rjmp	8000e07a <pm_sleep+0xa2>
8000e002:	58 38       	cp.w	r8,3
8000e004:	c2 a0       	breq	8000e058 <pm_sleep+0x80>
8000e006:	58 48       	cp.w	r8,4
8000e008:	c2 e0       	breq	8000e064 <pm_sleep+0x8c>
8000e00a:	c3 88       	rjmp	8000e07a <pm_sleep+0xa2>
8000e00c:	e0 48 00 82 	cp.w	r8,130
8000e010:	c2 10       	breq	8000e052 <pm_sleep+0x7a>
8000e012:	e0 89 00 09 	brgt	8000e024 <pm_sleep+0x4c>
8000e016:	e0 48 00 80 	cp.w	r8,128
8000e01a:	c1 00       	breq	8000e03a <pm_sleep+0x62>
8000e01c:	e0 48 00 81 	cp.w	r8,129
8000e020:	c1 30       	breq	8000e046 <pm_sleep+0x6e>
8000e022:	c2 c8       	rjmp	8000e07a <pm_sleep+0xa2>
8000e024:	e0 48 00 84 	cp.w	r8,132
8000e028:	c2 10       	breq	8000e06a <pm_sleep+0x92>
8000e02a:	c1 a5       	brlt	8000e05e <pm_sleep+0x86>
8000e02c:	e0 48 00 85 	cp.w	r8,133
8000e030:	c2 30       	breq	8000e076 <pm_sleep+0x9e>
8000e032:	c2 48       	rjmp	8000e07a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
8000e034:	e9 b0 00 00 	sleep	0x0
		break;
8000e038:	c2 18       	rjmp	8000e07a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
8000e03a:	e9 b0 00 80 	sleep	0x80
		break;
8000e03e:	c1 e8       	rjmp	8000e07a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
8000e040:	e9 b0 00 01 	sleep	0x1
		break;
8000e044:	c1 b8       	rjmp	8000e07a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000e046:	e9 b0 00 81 	sleep	0x81
		break;
8000e04a:	c1 88       	rjmp	8000e07a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
8000e04c:	e9 b0 00 02 	sleep	0x2
		break;
8000e050:	c1 58       	rjmp	8000e07a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
8000e052:	e9 b0 00 82 	sleep	0x82
		break;
8000e056:	c1 28       	rjmp	8000e07a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
8000e058:	e9 b0 00 03 	sleep	0x3
		break;
8000e05c:	c0 f8       	rjmp	8000e07a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
8000e05e:	e9 b0 00 83 	sleep	0x83
		break;
8000e062:	c0 c8       	rjmp	8000e07a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
8000e064:	e9 b0 00 04 	sleep	0x4
		break;
8000e068:	c0 98       	rjmp	8000e07a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000e06a:	e9 b0 00 84 	sleep	0x84
		break;
8000e06e:	c0 68       	rjmp	8000e07a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
8000e070:	e9 b0 00 05 	sleep	0x5
		break;
8000e074:	c0 38       	rjmp	8000e07a <pm_sleep+0xa2>
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
8000e076:	e9 b0 00 85 	sleep	0x85
		break;
#endif
	default:
		break;
	}
}
8000e07a:	2f fd       	sub	sp,-4
8000e07c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e080 <sleepmgr_sleep>:
//! @}



static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
8000e080:	eb cd 40 80 	pushm	r7,lr
8000e084:	1a 97       	mov	r7,sp
8000e086:	20 1d       	sub	sp,4
8000e088:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
8000e08c:	d3 03       	ssrf	0x10

	// Atomically enable the global interrupts and enter the sleep mode.
	pm_sleep(AVR32_PM_SMODE_GMCLEAR_MASK | (sleep_mode-1));
8000e08e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e092:	20 18       	sub	r8,1
8000e094:	a7 b8       	sbr	r8,0x7
8000e096:	10 9c       	mov	r12,r8
8000e098:	f0 1f 00 03 	mcall	8000e0a4 <sleepmgr_sleep+0x24>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
8000e09c:	2f fd       	sub	sp,-4
8000e09e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e0a2:	00 00       	add	r0,r0
8000e0a4:	80 00       	ld.sh	r0,r0[0x0]
8000e0a6:	df d8       	*unknown*

8000e0a8 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8000e0a8:	eb cd 40 80 	pushm	r7,lr
8000e0ac:	1a 97       	mov	r7,sp
8000e0ae:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000e0b0:	30 08       	mov	r8,0
8000e0b2:	ef 68 ff ff 	st.b	r7[-1],r8
8000e0b6:	c0 c8       	rjmp	8000e0ce <sleepmgr_init+0x26>
		sleepmgr_locks[i] = 0;
8000e0b8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e0bc:	48 ba       	lddpc	r10,8000e0e8 <sleepmgr_init+0x40>
8000e0be:	30 08       	mov	r8,0
8000e0c0:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8000e0c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000e0c8:	2f f8       	sub	r8,-1
8000e0ca:	ef 68 ff ff 	st.b	r7[-1],r8
8000e0ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000e0d2:	30 58       	mov	r8,5
8000e0d4:	f0 09 18 00 	cp.b	r9,r8
8000e0d8:	fe 98 ff f0 	brls	8000e0b8 <sleepmgr_init+0x10>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8000e0dc:	48 39       	lddpc	r9,8000e0e8 <sleepmgr_init+0x40>
8000e0de:	30 18       	mov	r8,1
8000e0e0:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000e0e2:	2f fd       	sub	sp,-4
8000e0e4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e0e8:	00 00       	add	r0,r0
8000e0ea:	0d fc       	ld.ub	r12,r6[0x7]

8000e0ec <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
8000e0ec:	eb cd 40 80 	pushm	r7,lr
8000e0f0:	1a 97       	mov	r7,sp
8000e0f2:	20 2d       	sub	sp,8
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
8000e0f4:	30 08       	mov	r8,0
8000e0f6:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
8000e0fa:	48 d8       	lddpc	r8,8000e12c <sleepmgr_get_sleep_mode+0x40>
8000e0fc:	ef 48 ff fc 	st.w	r7[-4],r8

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000e100:	c0 b8       	rjmp	8000e116 <sleepmgr_get_sleep_mode+0x2a>
		lock_ptr++;
8000e102:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e106:	2f f8       	sub	r8,-1
8000e108:	ef 48 ff fc 	st.w	r7[-4],r8
		sleep_mode++;
8000e10c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e110:	2f f8       	sub	r8,-1
8000e112:	ef 48 ff f8 	st.w	r7[-8],r8

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000e116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e11a:	11 88       	ld.ub	r8,r8[0x0]
8000e11c:	58 08       	cp.w	r8,0
8000e11e:	cf 20       	breq	8000e102 <sleepmgr_get_sleep_mode+0x16>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
8000e120:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000e124:	10 9c       	mov	r12,r8
8000e126:	2f ed       	sub	sp,-8
8000e128:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e12c:	00 00       	add	r0,r0
8000e12e:	0d fc       	ld.ub	r12,r6[0x7]

8000e130 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
8000e130:	eb cd 40 80 	pushm	r7,lr
8000e134:	1a 97       	mov	r7,sp
8000e136:	20 1d       	sub	sp,4
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
8000e138:	d3 03       	ssrf	0x10

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
8000e13a:	f0 1f 00 0a 	mcall	8000e160 <sleepmgr_enter_sleep+0x30>
8000e13e:	18 98       	mov	r8,r12
8000e140:	ef 48 ff fc 	st.w	r7[-4],r8
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
8000e144:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e148:	58 08       	cp.w	r8,0
8000e14a:	c0 31       	brne	8000e150 <sleepmgr_enter_sleep+0x20>
		cpu_irq_enable();
8000e14c:	d5 03       	csrf	0x10
		return;
8000e14e:	c0 58       	rjmp	8000e158 <sleepmgr_enter_sleep+0x28>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
8000e150:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e154:	f0 1f 00 04 	mcall	8000e164 <sleepmgr_enter_sleep+0x34>
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8000e158:	2f fd       	sub	sp,-4
8000e15a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e15e:	00 00       	add	r0,r0
8000e160:	80 00       	ld.sh	r0,r0[0x0]
8000e162:	e0 ec 80 00 	ld.d	r12,r0[-32768]
8000e166:	e0 80 eb cd 	breq	8002b900 <_data_lma+0x1c538>

8000e168 <udc_include_vbus_monitoring>:
 *        // Start USB \n
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
8000e168:	eb cd 40 80 	pushm	r7,lr
8000e16c:	1a 97       	mov	r7,sp
	return udd_include_vbus_monitoring();
8000e16e:	f0 1f 00 04 	mcall	8000e17c <udc_include_vbus_monitoring+0x14>
8000e172:	18 98       	mov	r8,r12
}
8000e174:	10 9c       	mov	r12,r8
8000e176:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e17a:	00 00       	add	r0,r0
8000e17c:	80 00       	ld.sh	r0,r0[0x0]
8000e17e:	9c 58       	ld.sh	r8,lr[0xa]

8000e180 <udc_attach>:
 * \warning If a VBus control is included in driver,
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
8000e180:	eb cd 40 80 	pushm	r7,lr
8000e184:	1a 97       	mov	r7,sp
	udd_attach();
8000e186:	f0 1f 00 03 	mcall	8000e190 <udc_attach+0x10>
}
8000e18a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e18e:	00 00       	add	r0,r0
8000e190:	80 00       	ld.sh	r0,r0[0x0]
8000e192:	9d 88       	st.w	lr[0x20],r8

8000e194 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
8000e194:	eb cd 40 80 	pushm	r7,lr
8000e198:	1a 97       	mov	r7,sp
	udd_detach();
8000e19a:	f0 1f 00 03 	mcall	8000e1a4 <udc_detach+0x10>
}
8000e19e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e1a2:	00 00       	add	r0,r0
8000e1a4:	80 00       	ld.sh	r0,r0[0x0]
8000e1a6:	9e 34       	ld.sh	r4,pc[0x6]

8000e1a8 <main>:
static bool main_b_msc_enable = false;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
8000e1a8:	eb cd 40 80 	pushm	r7,lr
8000e1ac:	1a 97       	mov	r7,sp
8000e1ae:	20 1d       	sub	sp,4
	uint8_t i = 0;
8000e1b0:	30 08       	mov	r8,0
8000e1b2:	ef 68 ff ff 	st.b	r7[-1],r8
	irq_initialize_vectors();
8000e1b6:	f0 1f 00 2a 	mcall	8000e25c <main+0xb4>
	cpu_irq_enable();
8000e1ba:	d5 03       	csrf	0x10

	// Initialize the sleep manager
	sleepmgr_init();
8000e1bc:	f0 1f 00 29 	mcall	8000e260 <main+0xb8>

	sysclk_init();
8000e1c0:	f0 1f 00 29 	mcall	8000e264 <main+0xbc>
	board_init();
8000e1c4:	f0 1f 00 29 	mcall	8000e268 <main+0xc0>

	ui_init();
8000e1c8:	f0 1f 00 29 	mcall	8000e26c <main+0xc4>
	ui_powerdown();
8000e1cc:	f0 1f 00 29 	mcall	8000e270 <main+0xc8>

	memories_initialization();
8000e1d0:	f0 1f 00 29 	mcall	8000e274 <main+0xcc>

	// Initialize LCD
	et024006_Init( FOSC0, FOSC0 );
8000e1d4:	e0 6b 1b 00 	mov	r11,6912
8000e1d8:	ea 1b 00 b7 	orh	r11,0xb7
8000e1dc:	e0 6c 1b 00 	mov	r12,6912
8000e1e0:	ea 1c 00 b7 	orh	r12,0xb7
8000e1e4:	f0 1f 00 25 	mcall	8000e278 <main+0xd0>
	gpio_set_gpio_pin(ET024006DHU_BL_PIN);
8000e1e8:	30 9c       	mov	r12,9
8000e1ea:	f0 1f 00 25 	mcall	8000e27c <main+0xd4>
	
	//et024006_PrintConsole("Welcome Eric", BLACK, -1);
	//clear_lcd
	et024006_DrawFilledRect(1, 1, ET024006_WIDTH, ET024006_HEIGHT, BLACK);
8000e1ee:	30 08       	mov	r8,0
8000e1f0:	e0 69 00 f0 	mov	r9,240
8000e1f4:	e0 6a 01 40 	mov	r10,320
8000e1f8:	30 1b       	mov	r11,1
8000e1fa:	30 1c       	mov	r12,1
8000e1fc:	f0 1f 00 21 	mcall	8000e280 <main+0xd8>
	
	// Initialize AES module
	aes_task();
8000e200:	f0 1f 00 21 	mcall	8000e284 <main+0xdc>

	// Start TC
	tc_task();
8000e204:	f0 1f 00 21 	mcall	8000e288 <main+0xe0>

	// Read the stored values from the flash
	Load_stored_values();
8000e208:	f0 1f 00 21 	mcall	8000e28c <main+0xe4>
	
	Stored_values_ram.salt[5] = 0x4d68ab23;
8000e20c:	4a 18       	lddpc	r8,8000e290 <main+0xe8>
8000e20e:	e0 69 ab 23 	mov	r9,43811
8000e212:	ea 19 4d 68 	orh	r9,0x4d68
8000e216:	f1 49 00 94 	st.w	r8[148],r9
	
	Update_stored_values();
8000e21a:	f0 1f 00 1f 	mcall	8000e294 <main+0xec>
	// Start USB stack to authorize VBus monitoring
	udc_start();
8000e21e:	f0 1f 00 1f 	mcall	8000e298 <main+0xf0>

	if (!udc_include_vbus_monitoring()) {
8000e222:	f0 1f 00 1f 	mcall	8000e29c <main+0xf4>
8000e226:	18 98       	mov	r8,r12
8000e228:	ec 18 00 01 	eorl	r8,0x1
8000e22c:	5c 58       	castu.b	r8
8000e22e:	c0 60       	breq	8000e23a <main+0x92>
		// VBUS monitoring is not available on this product
		// thereby VBUS has to be considered as present
		main_vbus_action(true);
8000e230:	30 1c       	mov	r12,1
8000e232:	f0 1f 00 1c 	mcall	8000e2a0 <main+0xf8>
8000e236:	c0 28       	rjmp	8000e23a <main+0x92>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e238:	d7 03       	nop

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true)
	{
		if (main_b_msc_enable)
8000e23a:	49 b8       	lddpc	r8,8000e2a4 <main+0xfc>
8000e23c:	11 88       	ld.ub	r8,r8[0x0]
8000e23e:	58 08       	cp.w	r8,0
8000e240:	c0 b0       	breq	8000e256 <main+0xae>
		{
			if (!udi_msc_process_trans())
8000e242:	f0 1f 00 1a 	mcall	8000e2a8 <main+0x100>
8000e246:	18 98       	mov	r8,r12
8000e248:	ec 18 00 01 	eorl	r8,0x1
8000e24c:	5c 58       	castu.b	r8
8000e24e:	cf 50       	breq	8000e238 <main+0x90>
			{
				sleepmgr_enter_sleep();
8000e250:	f0 1f 00 17 	mcall	8000e2ac <main+0x104>
		else
		{
			sleepmgr_enter_sleep();
		}
		//main_process_mode();
	}
8000e254:	cf 3b       	rjmp	8000e23a <main+0x92>
				sleepmgr_enter_sleep();
			}
		}
		else
		{
			sleepmgr_enter_sleep();
8000e256:	f0 1f 00 16 	mcall	8000e2ac <main+0x104>
		}
		//main_process_mode();
	}
8000e25a:	cf 0b       	rjmp	8000e23a <main+0x92>
8000e25c:	80 00       	ld.sh	r0,r0[0x0]
8000e25e:	8f 90       	st.w	r7[0x24],r0
8000e260:	80 00       	ld.sh	r0,r0[0x0]
8000e262:	e0 a8       	*unknown*
8000e264:	80 00       	ld.sh	r0,r0[0x0]
8000e266:	c0 54       	brge	8000e270 <main+0xc8>
8000e268:	80 00       	ld.sh	r0,r0[0x0]
8000e26a:	42 50       	lddsp	r0,sp[0x94]
8000e26c:	80 00       	ld.sh	r0,r0[0x0]
8000e26e:	c2 dc       	rcall	8000e2c8 <main_vbus_action+0x18>
8000e270:	80 00       	ld.sh	r0,r0[0x0]
8000e272:	c2 fc       	rcall	8000e2d0 <main_vbus_action+0x20>
8000e274:	80 00       	ld.sh	r0,r0[0x0]
8000e276:	e4 28 80 00 	sub	r8,294912
8000e27a:	44 38       	lddsp	r8,sp[0x10c]
8000e27c:	80 00       	ld.sh	r0,r0[0x0]
8000e27e:	8d ca       	st.w	r6[0x30],r10
8000e280:	80 00       	ld.sh	r0,r0[0x0]
8000e282:	44 b0       	lddsp	r0,sp[0x12c]
8000e284:	80 00       	ld.sh	r0,r0[0x0]
8000e286:	3f c0       	mov	r0,-4
8000e288:	80 00       	ld.sh	r0,r0[0x0]
8000e28a:	3f 28       	mov	r8,-14
8000e28c:	80 00       	ld.sh	r0,r0[0x0]
8000e28e:	2e 8c       	sub	r12,-24
8000e290:	00 00       	add	r0,r0
8000e292:	08 84       	andn	r4,r4
8000e294:	80 00       	ld.sh	r0,r0[0x0]
8000e296:	2e 68       	sub	r8,-26
8000e298:	80 00       	ld.sh	r0,r0[0x0]
8000e29a:	d4 54       	*unknown*
8000e29c:	80 00       	ld.sh	r0,r0[0x0]
8000e29e:	e1 68 80 00 	st.b	r0[-32768],r8
8000e2a2:	e2 b0 00 00 	rcall	8006e2a2 <Stored_values_flash+0x2e4a2>
8000e2a6:	08 60       	and	r0,r4
8000e2a8:	80 00       	ld.sh	r0,r0[0x0]
8000e2aa:	cf 50       	breq	8000e294 <main+0xec>
8000e2ac:	80 00       	ld.sh	r0,r0[0x0]
8000e2ae:	e1 30 eb cd 	ld.ub	r0,r0[-5171]

8000e2b0 <main_vbus_action>:
}

void main_vbus_action(bool b_high)
{
8000e2b0:	eb cd 40 80 	pushm	r7,lr
8000e2b4:	1a 97       	mov	r7,sp
8000e2b6:	20 1d       	sub	sp,4
8000e2b8:	18 98       	mov	r8,r12
8000e2ba:	ef 68 ff fc 	st.b	r7[-4],r8
	if (b_high) {
8000e2be:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000e2c2:	30 08       	mov	r8,0
8000e2c4:	f0 09 18 00 	cp.b	r9,r8
8000e2c8:	c0 40       	breq	8000e2d0 <main_vbus_action+0x20>
		// Attach USB Device
		udc_attach();
8000e2ca:	f0 1f 00 05 	mcall	8000e2dc <main_vbus_action+0x2c>
8000e2ce:	c0 38       	rjmp	8000e2d4 <main_vbus_action+0x24>
	} else {
		// VBUS not present
		udc_detach();
8000e2d0:	f0 1f 00 04 	mcall	8000e2e0 <main_vbus_action+0x30>
	}
}
8000e2d4:	2f fd       	sub	sp,-4
8000e2d6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e2da:	00 00       	add	r0,r0
8000e2dc:	80 00       	ld.sh	r0,r0[0x0]
8000e2de:	e1 80       	*unknown*
8000e2e0:	80 00       	ld.sh	r0,r0[0x0]
8000e2e2:	e1 94       	*unknown*

8000e2e4 <main_suspend_action>:

void main_suspend_action(void)
{
8000e2e4:	eb cd 40 80 	pushm	r7,lr
8000e2e8:	1a 97       	mov	r7,sp
	ui_powerdown();
8000e2ea:	f0 1f 00 03 	mcall	8000e2f4 <main_suspend_action+0x10>
}
8000e2ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e2f2:	00 00       	add	r0,r0
8000e2f4:	80 00       	ld.sh	r0,r0[0x0]
8000e2f6:	c2 fc       	rcall	8000e354 <main_msc_enable+0x10>

8000e2f8 <main_resume_action>:

void main_resume_action(void)
{
8000e2f8:	eb cd 40 80 	pushm	r7,lr
8000e2fc:	1a 97       	mov	r7,sp
	ui_wakeup();
8000e2fe:	f0 1f 00 03 	mcall	8000e308 <main_resume_action+0x10>
}
8000e302:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e306:	00 00       	add	r0,r0
8000e308:	80 00       	ld.sh	r0,r0[0x0]
8000e30a:	c3 18       	rjmp	8000e36c <main_msc_disable+0x10>

8000e30c <main_sof_action>:

void main_sof_action(void)
{
8000e30c:	eb cd 40 80 	pushm	r7,lr
8000e310:	1a 97       	mov	r7,sp
	if (!main_b_msc_enable)
8000e312:	48 a8       	lddpc	r8,8000e338 <main_sof_action+0x2c>
8000e314:	11 88       	ld.ub	r8,r8[0x0]
8000e316:	ec 18 00 01 	eorl	r8,0x1
8000e31a:	5c 58       	castu.b	r8
8000e31c:	c0 a1       	brne	8000e330 <main_sof_action+0x24>
		return;
	ui_process(udd_get_frame_number());
8000e31e:	f0 1f 00 08 	mcall	8000e33c <main_sof_action+0x30>
8000e322:	18 98       	mov	r8,r12
8000e324:	5c 88       	casts.h	r8
8000e326:	5c 78       	castu.h	r8
8000e328:	10 9c       	mov	r12,r8
8000e32a:	f0 1f 00 06 	mcall	8000e340 <main_sof_action+0x34>
8000e32e:	c0 28       	rjmp	8000e332 <main_sof_action+0x26>
}

void main_sof_action(void)
{
	if (!main_b_msc_enable)
		return;
8000e330:	d7 03       	nop
	ui_process(udd_get_frame_number());
}
8000e332:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e336:	00 00       	add	r0,r0
8000e338:	00 00       	add	r0,r0
8000e33a:	08 60       	and	r0,r4
8000e33c:	80 00       	ld.sh	r0,r0[0x0]
8000e33e:	9e f6       	ld.uh	r6,pc[0xe]
8000e340:	80 00       	ld.sh	r0,r0[0x0]
8000e342:	c3 7c       	rcall	8000e3b0 <osc_get_rate+0x40>

8000e344 <main_msc_enable>:

bool main_msc_enable(void)
{
8000e344:	eb cd 40 80 	pushm	r7,lr
8000e348:	1a 97       	mov	r7,sp
	main_b_msc_enable = true;
8000e34a:	48 49       	lddpc	r9,8000e358 <main_msc_enable+0x14>
8000e34c:	30 18       	mov	r8,1
8000e34e:	b2 88       	st.b	r9[0x0],r8
	return true;
8000e350:	30 18       	mov	r8,1
}
8000e352:	10 9c       	mov	r12,r8
8000e354:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e358:	00 00       	add	r0,r0
8000e35a:	08 60       	and	r0,r4

8000e35c <main_msc_disable>:

void main_msc_disable(void)
{
8000e35c:	eb cd 40 80 	pushm	r7,lr
8000e360:	1a 97       	mov	r7,sp
	main_b_msc_enable = false;
8000e362:	48 39       	lddpc	r9,8000e36c <main_msc_disable+0x10>
8000e364:	30 08       	mov	r8,0
8000e366:	b2 88       	st.b	r9[0x0],r8
}
8000e368:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e36c:	00 00       	add	r0,r0
8000e36e:	08 60       	and	r0,r4

8000e370 <osc_get_rate>:
8000e370:	eb cd 40 80 	pushm	r7,lr
8000e374:	1a 97       	mov	r7,sp
8000e376:	20 1d       	sub	sp,4
8000e378:	18 98       	mov	r8,r12
8000e37a:	ef 68 ff fc 	st.b	r7[-4],r8
8000e37e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000e382:	58 18       	cp.w	r8,1
8000e384:	c0 a0       	breq	8000e398 <osc_get_rate+0x28>
8000e386:	58 28       	cp.w	r8,2
8000e388:	c0 d0       	breq	8000e3a2 <osc_get_rate+0x32>
8000e38a:	58 08       	cp.w	r8,0
8000e38c:	c0 e1       	brne	8000e3a8 <osc_get_rate+0x38>
8000e38e:	e0 68 1b 00 	mov	r8,6912
8000e392:	ea 18 00 b7 	orh	r8,0xb7
8000e396:	c0 a8       	rjmp	8000e3aa <osc_get_rate+0x3a>
8000e398:	e0 68 44 00 	mov	r8,17408
8000e39c:	ea 18 00 ac 	orh	r8,0xac
8000e3a0:	c0 58       	rjmp	8000e3aa <osc_get_rate+0x3a>
8000e3a2:	e0 68 80 00 	mov	r8,32768
8000e3a6:	c0 28       	rjmp	8000e3aa <osc_get_rate+0x3a>
8000e3a8:	30 08       	mov	r8,0
8000e3aa:	10 9c       	mov	r12,r8
8000e3ac:	2f fd       	sub	sp,-4
8000e3ae:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e3b2:	d7 03       	nop

8000e3b4 <sysclk_get_main_hz>:
8000e3b4:	eb cd 40 80 	pushm	r7,lr
8000e3b8:	1a 97       	mov	r7,sp
8000e3ba:	30 0c       	mov	r12,0
8000e3bc:	f0 1f 00 06 	mcall	8000e3d4 <sysclk_get_main_hz+0x20>
8000e3c0:	18 99       	mov	r9,r12
8000e3c2:	12 98       	mov	r8,r9
8000e3c4:	a3 68       	lsl	r8,0x2
8000e3c6:	12 08       	add	r8,r9
8000e3c8:	a1 78       	lsl	r8,0x1
8000e3ca:	12 08       	add	r8,r9
8000e3cc:	a1 98       	lsr	r8,0x1
8000e3ce:	10 9c       	mov	r12,r8
8000e3d0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e3d4:	80 00       	ld.sh	r0,r0[0x0]
8000e3d6:	e3 70 eb cd 	stcond	r1[-5171],r0

8000e3d8 <sysclk_get_cpu_hz>:
8000e3d8:	eb cd 40 80 	pushm	r7,lr
8000e3dc:	1a 97       	mov	r7,sp
8000e3de:	f0 1f 00 04 	mcall	8000e3ec <sysclk_get_cpu_hz+0x14>
8000e3e2:	18 98       	mov	r8,r12
8000e3e4:	10 9c       	mov	r12,r8
8000e3e6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e3ea:	00 00       	add	r0,r0
8000e3ec:	80 00       	ld.sh	r0,r0[0x0]
8000e3ee:	e3 b4       	*unknown*

8000e3f0 <sysclk_get_pbb_hz>:
8000e3f0:	eb cd 40 80 	pushm	r7,lr
8000e3f4:	1a 97       	mov	r7,sp
8000e3f6:	f0 1f 00 04 	mcall	8000e404 <sysclk_get_pbb_hz+0x14>
8000e3fa:	18 98       	mov	r8,r12
8000e3fc:	10 9c       	mov	r12,r8
8000e3fe:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e402:	00 00       	add	r0,r0
8000e404:	80 00       	ld.sh	r0,r0[0x0]
8000e406:	e3 b4       	*unknown*

8000e408 <sysclk_enable_hsb_module>:
8000e408:	eb cd 40 80 	pushm	r7,lr
8000e40c:	1a 97       	mov	r7,sp
8000e40e:	20 1d       	sub	sp,4
8000e410:	ef 4c ff fc 	st.w	r7[-4],r12
8000e414:	ee fb ff fc 	ld.w	r11,r7[-4]
8000e418:	30 1c       	mov	r12,1
8000e41a:	f0 1f 00 03 	mcall	8000e424 <sysclk_enable_hsb_module+0x1c>
8000e41e:	2f fd       	sub	sp,-4
8000e420:	e3 cd 80 80 	ldm	sp++,r7,pc
8000e424:	80 00       	ld.sh	r0,r0[0x0]
8000e426:	bf 2c       	st.d	pc++,r12

8000e428 <memories_initialization>:
8000e428:	eb cd 40 c0 	pushm	r6-r7,lr
8000e42c:	1a 97       	mov	r7,sp
8000e42e:	20 2d       	sub	sp,8
8000e430:	30 0c       	mov	r12,0
8000e432:	f0 1f 00 42 	mcall	8000e538 <memories_initialization+0x110>
8000e436:	fe 68 10 00 	mov	r8,-126976
8000e43a:	71 08       	ld.w	r8,r8[0x40]
8000e43c:	ef 48 ff fc 	st.w	r7[-4],r8
8000e440:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e444:	30 19       	mov	r9,1
8000e446:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e44a:	ef 48 ff fc 	st.w	r7[-4],r8
8000e44e:	fe 68 10 00 	mov	r8,-126976
8000e452:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e456:	f1 49 00 40 	st.w	r8[64],r9
8000e45a:	fe 68 10 00 	mov	r8,-126976
8000e45e:	71 48       	ld.w	r8,r8[0x50]
8000e460:	ef 48 ff fc 	st.w	r7[-4],r8
8000e464:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e468:	30 19       	mov	r9,1
8000e46a:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e46e:	ef 48 ff fc 	st.w	r7[-4],r8
8000e472:	fe 68 10 00 	mov	r8,-126976
8000e476:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e47a:	f1 49 00 50 	st.w	r8[80],r9
8000e47e:	fe 68 10 00 	mov	r8,-126976
8000e482:	71 68       	ld.w	r8,r8[0x58]
8000e484:	ef 48 ff fc 	st.w	r7[-4],r8
8000e488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e48c:	30 19       	mov	r9,1
8000e48e:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e492:	ef 48 ff fc 	st.w	r7[-4],r8
8000e496:	fe 68 10 00 	mov	r8,-126976
8000e49a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e49e:	f1 49 00 58 	st.w	r8[88],r9
8000e4a2:	fe 68 10 00 	mov	r8,-126976
8000e4a6:	70 68       	ld.w	r8,r8[0x18]
8000e4a8:	ef 48 ff f8 	st.w	r7[-8],r8
8000e4ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e4b0:	30 09       	mov	r9,0
8000e4b2:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000e4b6:	ef 48 ff f8 	st.w	r7[-8],r8
8000e4ba:	fe 68 10 00 	mov	r8,-126976
8000e4be:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e4c2:	91 69       	st.w	r8[0x18],r9
8000e4c4:	fe 68 10 00 	mov	r8,-126976
8000e4c8:	71 58       	ld.w	r8,r8[0x54]
8000e4ca:	ef 48 ff fc 	st.w	r7[-4],r8
8000e4ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e4d2:	30 69       	mov	r9,6
8000e4d4:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
8000e4d8:	ef 48 ff fc 	st.w	r7[-4],r8
8000e4dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e4e0:	30 29       	mov	r9,2
8000e4e2:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
8000e4e6:	ef 48 ff fc 	st.w	r7[-4],r8
8000e4ea:	fe 68 10 00 	mov	r8,-126976
8000e4ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e4f2:	f1 49 00 54 	st.w	r8[84],r9
8000e4f6:	30 6c       	mov	r12,6
8000e4f8:	f0 1f 00 10 	mcall	8000e538 <memories_initialization+0x110>
8000e4fc:	30 7c       	mov	r12,7
8000e4fe:	f0 1f 00 10 	mcall	8000e53c <memories_initialization+0x114>
8000e502:	f0 1f 00 10 	mcall	8000e540 <memories_initialization+0x118>
8000e506:	18 98       	mov	r8,r12
8000e508:	10 96       	mov	r6,r8
8000e50a:	f0 1f 00 0f 	mcall	8000e544 <memories_initialization+0x11c>
8000e50e:	18 98       	mov	r8,r12
8000e510:	0c 9a       	mov	r10,r6
8000e512:	10 9b       	mov	r11,r8
8000e514:	30 0c       	mov	r12,0
8000e516:	f0 1f 00 0d 	mcall	8000e548 <memories_initialization+0x120>
8000e51a:	f0 1f 00 0a 	mcall	8000e540 <memories_initialization+0x118>
8000e51e:	18 98       	mov	r8,r12
8000e520:	10 96       	mov	r6,r8
8000e522:	f0 1f 00 09 	mcall	8000e544 <memories_initialization+0x11c>
8000e526:	18 98       	mov	r8,r12
8000e528:	0c 9a       	mov	r10,r6
8000e52a:	10 9b       	mov	r11,r8
8000e52c:	30 1c       	mov	r12,1
8000e52e:	f0 1f 00 07 	mcall	8000e548 <memories_initialization+0x120>
8000e532:	2f ed       	sub	sp,-8
8000e534:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e538:	80 00       	ld.sh	r0,r0[0x0]
8000e53a:	bf a0       	sbr	r0,0x1e
8000e53c:	80 00       	ld.sh	r0,r0[0x0]
8000e53e:	e4 08       	*unknown*
8000e540:	80 00       	ld.sh	r0,r0[0x0]
8000e542:	e3 d8 80 00 	ldswp.w	r8,r1[0]
8000e546:	e3 f0 80 00 	ld.wls	r0,r1[0x0]
8000e54a:	65 28       	ld.w	r8,r2[0x48]

8000e54c <__avr32_udiv64>:
8000e54c:	d4 31       	pushm	r0-r7,lr
8000e54e:	1a 97       	mov	r7,sp
8000e550:	20 2d       	sub	sp,8
8000e552:	10 9e       	mov	lr,r8
8000e554:	12 95       	mov	r5,r9
8000e556:	14 96       	mov	r6,r10
8000e558:	58 09       	cp.w	r9,0
8000e55a:	c4 91       	brne	8000e5ec <__avr32_udiv64+0xa0>
8000e55c:	16 38       	cp.w	r8,r11
8000e55e:	e0 88 00 57 	brls	8000e60c <__avr32_udiv64+0xc0>
8000e562:	f0 08 12 00 	clz	r8,r8
8000e566:	c0 d0       	breq	8000e580 <__avr32_udiv64+0x34>
8000e568:	f6 08 09 4b 	lsl	r11,r11,r8
8000e56c:	f0 09 11 20 	rsub	r9,r8,32
8000e570:	fc 08 09 4e 	lsl	lr,lr,r8
8000e574:	f4 09 0a 49 	lsr	r9,r10,r9
8000e578:	f4 08 09 46 	lsl	r6,r10,r8
8000e57c:	f3 eb 10 0b 	or	r11,r9,r11
8000e580:	fc 05 16 10 	lsr	r5,lr,0x10
8000e584:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
8000e588:	f6 05 0d 0a 	divu	r10,r11,r5
8000e58c:	ec 08 16 10 	lsr	r8,r6,0x10
8000e590:	14 99       	mov	r9,r10
8000e592:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e596:	b9 3a       	mul	r10,r12
8000e598:	10 3a       	cp.w	r10,r8
8000e59a:	e0 88 00 0c 	brls	8000e5b2 <__avr32_udiv64+0x66>
8000e59e:	20 19       	sub	r9,1
8000e5a0:	1c 08       	add	r8,lr
8000e5a2:	10 3e       	cp.w	lr,r8
8000e5a4:	e0 8b 00 07 	brhi	8000e5b2 <__avr32_udiv64+0x66>
8000e5a8:	10 3a       	cp.w	r10,r8
8000e5aa:	f7 b9 0b 01 	subhi	r9,1
8000e5ae:	f1 de eb 08 	addhi	r8,r8,lr
8000e5b2:	f0 0a 01 0b 	sub	r11,r8,r10
8000e5b6:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e5ba:	f6 05 0d 0a 	divu	r10,r11,r5
8000e5be:	ed eb 11 06 	or	r6,r6,r11<<0x10
8000e5c2:	14 98       	mov	r8,r10
8000e5c4:	f4 0c 02 4c 	mul	r12,r10,r12
8000e5c8:	0c 3c       	cp.w	r12,r6
8000e5ca:	e0 88 00 0a 	brls	8000e5de <__avr32_udiv64+0x92>
8000e5ce:	20 18       	sub	r8,1
8000e5d0:	1c 06       	add	r6,lr
8000e5d2:	0c 3e       	cp.w	lr,r6
8000e5d4:	e0 8b 00 05 	brhi	8000e5de <__avr32_udiv64+0x92>
8000e5d8:	0c 3c       	cp.w	r12,r6
8000e5da:	f7 b8 0b 01 	subhi	r8,1
8000e5de:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
8000e5e2:	30 0c       	mov	r12,0
8000e5e4:	16 9a       	mov	r10,r11
8000e5e6:	18 9b       	mov	r11,r12
8000e5e8:	2f ed       	sub	sp,-8
8000e5ea:	d8 32       	popm	r0-r7,pc
8000e5ec:	16 39       	cp.w	r9,r11
8000e5ee:	e0 8b 00 51 	brhi	8000e690 <__avr32_udiv64+0x144>
8000e5f2:	f2 0c 12 00 	clz	r12,r9
8000e5f6:	c5 31       	brne	8000e69c <__avr32_udiv64+0x150>
8000e5f8:	14 38       	cp.w	r8,r10
8000e5fa:	5f 89       	srls	r9
8000e5fc:	16 35       	cp.w	r5,r11
8000e5fe:	5f 38       	srlo	r8
8000e600:	10 49       	or	r9,r8
8000e602:	f8 09 18 00 	cp.b	r9,r12
8000e606:	c4 50       	breq	8000e690 <__avr32_udiv64+0x144>
8000e608:	30 1b       	mov	r11,1
8000e60a:	c4 58       	rjmp	8000e694 <__avr32_udiv64+0x148>
8000e60c:	58 08       	cp.w	r8,0
8000e60e:	c0 51       	brne	8000e618 <__avr32_udiv64+0xcc>
8000e610:	30 19       	mov	r9,1
8000e612:	f2 08 0d 08 	divu	r8,r9,r8
8000e616:	10 9e       	mov	lr,r8
8000e618:	fc 08 12 00 	clz	r8,lr
8000e61c:	e0 81 00 91 	brne	8000e73e <__avr32_udiv64+0x1f2>
8000e620:	1c 1b       	sub	r11,lr
8000e622:	fc 05 16 10 	lsr	r5,lr,0x10
8000e626:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e62a:	30 1c       	mov	r12,1
8000e62c:	f6 05 0d 0a 	divu	r10,r11,r5
8000e630:	ec 08 16 10 	lsr	r8,r6,0x10
8000e634:	f4 09 02 43 	mul	r3,r10,r9
8000e638:	f1 eb 11 08 	or	r8,r8,r11<<0x10
8000e63c:	14 9b       	mov	r11,r10
8000e63e:	10 33       	cp.w	r3,r8
8000e640:	e0 88 00 0c 	brls	8000e658 <__avr32_udiv64+0x10c>
8000e644:	20 1b       	sub	r11,1
8000e646:	1c 08       	add	r8,lr
8000e648:	10 3e       	cp.w	lr,r8
8000e64a:	e0 8b 00 07 	brhi	8000e658 <__avr32_udiv64+0x10c>
8000e64e:	10 33       	cp.w	r3,r8
8000e650:	f7 bb 0b 01 	subhi	r11,1
8000e654:	f1 de eb 08 	addhi	r8,r8,lr
8000e658:	f0 03 01 03 	sub	r3,r8,r3
8000e65c:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
8000e660:	e6 05 0d 02 	divu	r2,r3,r5
8000e664:	ed e3 11 06 	or	r6,r6,r3<<0x10
8000e668:	04 98       	mov	r8,r2
8000e66a:	e4 09 02 49 	mul	r9,r2,r9
8000e66e:	0c 39       	cp.w	r9,r6
8000e670:	e0 88 00 0a 	brls	8000e684 <__avr32_udiv64+0x138>
8000e674:	20 18       	sub	r8,1
8000e676:	1c 06       	add	r6,lr
8000e678:	0c 3e       	cp.w	lr,r6
8000e67a:	e0 8b 00 05 	brhi	8000e684 <__avr32_udiv64+0x138>
8000e67e:	0c 39       	cp.w	r9,r6
8000e680:	f7 b8 0b 01 	subhi	r8,1
8000e684:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
8000e688:	16 9a       	mov	r10,r11
8000e68a:	18 9b       	mov	r11,r12
8000e68c:	2f ed       	sub	sp,-8
8000e68e:	d8 32       	popm	r0-r7,pc
8000e690:	30 0b       	mov	r11,0
8000e692:	16 9c       	mov	r12,r11
8000e694:	16 9a       	mov	r10,r11
8000e696:	18 9b       	mov	r11,r12
8000e698:	2f ed       	sub	sp,-8
8000e69a:	d8 32       	popm	r0-r7,pc
8000e69c:	f2 0c 09 45 	lsl	r5,r9,r12
8000e6a0:	f8 0e 11 20 	rsub	lr,r12,32
8000e6a4:	f0 0c 09 43 	lsl	r3,r8,r12
8000e6a8:	f4 0e 0a 46 	lsr	r6,r10,lr
8000e6ac:	f0 0e 0a 48 	lsr	r8,r8,lr
8000e6b0:	f6 0e 0a 4e 	lsr	lr,r11,lr
8000e6b4:	0a 48       	or	r8,r5
8000e6b6:	f0 01 16 10 	lsr	r1,r8,0x10
8000e6ba:	fc 01 0d 04 	divu	r4,lr,r1
8000e6be:	ee e5 ff f8 	st.d	r7[-8],r4
8000e6c2:	f6 0c 09 49 	lsl	r9,r11,r12
8000e6c6:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000e6ca:	ed e9 10 09 	or	r9,r6,r9
8000e6ce:	08 96       	mov	r6,r4
8000e6d0:	f2 0e 16 10 	lsr	lr,r9,0x10
8000e6d4:	ee f4 ff f8 	ld.w	r4,r7[-8]
8000e6d8:	ec 05 02 4b 	mul	r11,r6,r5
8000e6dc:	fd e4 11 0e 	or	lr,lr,r4<<0x10
8000e6e0:	1c 3b       	cp.w	r11,lr
8000e6e2:	e0 88 00 07 	brls	8000e6f0 <__avr32_udiv64+0x1a4>
8000e6e6:	20 16       	sub	r6,1
8000e6e8:	10 0e       	add	lr,r8
8000e6ea:	1c 38       	cp.w	r8,lr
8000e6ec:	e0 88 00 6d 	brls	8000e7c6 <__avr32_udiv64+0x27a>
8000e6f0:	16 1e       	sub	lr,r11
8000e6f2:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000e6f6:	fc 01 0d 00 	divu	r0,lr,r1
8000e6fa:	f3 e1 11 09 	or	r9,r9,r1<<0x10
8000e6fe:	00 9b       	mov	r11,r0
8000e700:	e0 05 02 4e 	mul	lr,r0,r5
8000e704:	12 3e       	cp.w	lr,r9
8000e706:	e0 88 00 07 	brls	8000e714 <__avr32_udiv64+0x1c8>
8000e70a:	20 1b       	sub	r11,1
8000e70c:	10 09       	add	r9,r8
8000e70e:	12 38       	cp.w	r8,r9
8000e710:	e0 88 00 55 	brls	8000e7ba <__avr32_udiv64+0x26e>
8000e714:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
8000e718:	1c 19       	sub	r9,lr
8000e71a:	f6 03 06 42 	mulu.d	r2,r11,r3
8000e71e:	06 39       	cp.w	r9,r3
8000e720:	c0 93       	brcs	8000e732 <__avr32_udiv64+0x1e6>
8000e722:	5f 09       	sreq	r9
8000e724:	f4 0c 09 4c 	lsl	r12,r10,r12
8000e728:	04 3c       	cp.w	r12,r2
8000e72a:	5f 38       	srlo	r8
8000e72c:	f3 e8 00 08 	and	r8,r9,r8
8000e730:	c0 20       	breq	8000e734 <__avr32_udiv64+0x1e8>
8000e732:	20 1b       	sub	r11,1
8000e734:	30 0c       	mov	r12,0
8000e736:	16 9a       	mov	r10,r11
8000e738:	18 9b       	mov	r11,r12
8000e73a:	2f ed       	sub	sp,-8
8000e73c:	d8 32       	popm	r0-r7,pc
8000e73e:	f6 08 09 49 	lsl	r9,r11,r8
8000e742:	fc 08 09 4e 	lsl	lr,lr,r8
8000e746:	f0 01 11 20 	rsub	r1,r8,32
8000e74a:	fc 05 16 10 	lsr	r5,lr,0x10
8000e74e:	f4 01 0a 42 	lsr	r2,r10,r1
8000e752:	f6 01 0a 41 	lsr	r1,r11,r1
8000e756:	12 42       	or	r2,r9
8000e758:	e2 05 0d 00 	divu	r0,r1,r5
8000e75c:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
8000e760:	e4 06 16 10 	lsr	r6,r2,0x10
8000e764:	00 93       	mov	r3,r0
8000e766:	ed e1 11 06 	or	r6,r6,r1<<0x10
8000e76a:	e0 09 02 4c 	mul	r12,r0,r9
8000e76e:	0c 3c       	cp.w	r12,r6
8000e770:	e0 88 00 07 	brls	8000e77e <__avr32_udiv64+0x232>
8000e774:	20 13       	sub	r3,1
8000e776:	1c 06       	add	r6,lr
8000e778:	0c 3e       	cp.w	lr,r6
8000e77a:	e0 88 00 2c 	brls	8000e7d2 <__avr32_udiv64+0x286>
8000e77e:	ec 0c 01 01 	sub	r1,r6,r12
8000e782:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000e786:	e2 05 0d 00 	divu	r0,r1,r5
8000e78a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000e78e:	00 9c       	mov	r12,r0
8000e790:	e0 09 02 41 	mul	r1,r0,r9
8000e794:	16 31       	cp.w	r1,r11
8000e796:	e0 88 00 0c 	brls	8000e7ae <__avr32_udiv64+0x262>
8000e79a:	20 1c       	sub	r12,1
8000e79c:	1c 0b       	add	r11,lr
8000e79e:	16 3e       	cp.w	lr,r11
8000e7a0:	e0 8b 00 07 	brhi	8000e7ae <__avr32_udiv64+0x262>
8000e7a4:	16 31       	cp.w	r1,r11
8000e7a6:	f7 bc 0b 01 	subhi	r12,1
8000e7aa:	f7 de eb 0b 	addhi	r11,r11,lr
8000e7ae:	f4 08 09 46 	lsl	r6,r10,r8
8000e7b2:	02 1b       	sub	r11,r1
8000e7b4:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
8000e7b8:	c3 ab       	rjmp	8000e62c <__avr32_udiv64+0xe0>
8000e7ba:	12 3e       	cp.w	lr,r9
8000e7bc:	f3 d8 eb 09 	addhi	r9,r9,r8
8000e7c0:	f7 bb 0b 01 	subhi	r11,1
8000e7c4:	ca 8b       	rjmp	8000e714 <__avr32_udiv64+0x1c8>
8000e7c6:	1c 3b       	cp.w	r11,lr
8000e7c8:	f7 b6 0b 01 	subhi	r6,1
8000e7cc:	fd d8 eb 0e 	addhi	lr,lr,r8
8000e7d0:	c9 0b       	rjmp	8000e6f0 <__avr32_udiv64+0x1a4>
8000e7d2:	0c 3c       	cp.w	r12,r6
8000e7d4:	f7 b3 0b 01 	subhi	r3,1
8000e7d8:	ed de eb 06 	addhi	r6,r6,lr
8000e7dc:	cd 1b       	rjmp	8000e77e <__avr32_udiv64+0x232>

8000e7de <memcpy>:
8000e7de:	58 8a       	cp.w	r10,8
8000e7e0:	c2 f5       	brlt	8000e83e <memcpy+0x60>
8000e7e2:	f9 eb 10 09 	or	r9,r12,r11
8000e7e6:	e2 19 00 03 	andl	r9,0x3,COH
8000e7ea:	e0 81 00 97 	brne	8000e918 <memcpy+0x13a>
8000e7ee:	e0 4a 00 20 	cp.w	r10,32
8000e7f2:	c3 b4       	brge	8000e868 <memcpy+0x8a>
8000e7f4:	f4 08 14 02 	asr	r8,r10,0x2
8000e7f8:	f0 09 11 08 	rsub	r9,r8,8
8000e7fc:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000e800:	76 69       	ld.w	r9,r11[0x18]
8000e802:	99 69       	st.w	r12[0x18],r9
8000e804:	76 59       	ld.w	r9,r11[0x14]
8000e806:	99 59       	st.w	r12[0x14],r9
8000e808:	76 49       	ld.w	r9,r11[0x10]
8000e80a:	99 49       	st.w	r12[0x10],r9
8000e80c:	76 39       	ld.w	r9,r11[0xc]
8000e80e:	99 39       	st.w	r12[0xc],r9
8000e810:	76 29       	ld.w	r9,r11[0x8]
8000e812:	99 29       	st.w	r12[0x8],r9
8000e814:	76 19       	ld.w	r9,r11[0x4]
8000e816:	99 19       	st.w	r12[0x4],r9
8000e818:	76 09       	ld.w	r9,r11[0x0]
8000e81a:	99 09       	st.w	r12[0x0],r9
8000e81c:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000e820:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000e824:	e0 1a 00 03 	andl	r10,0x3
8000e828:	f4 0a 11 04 	rsub	r10,r10,4
8000e82c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000e830:	17 a9       	ld.ub	r9,r11[0x2]
8000e832:	b0 a9       	st.b	r8[0x2],r9
8000e834:	17 99       	ld.ub	r9,r11[0x1]
8000e836:	b0 99       	st.b	r8[0x1],r9
8000e838:	17 89       	ld.ub	r9,r11[0x0]
8000e83a:	b0 89       	st.b	r8[0x0],r9
8000e83c:	5e fc       	retal	r12
8000e83e:	f4 0a 11 09 	rsub	r10,r10,9
8000e842:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000e846:	17 f9       	ld.ub	r9,r11[0x7]
8000e848:	b8 f9       	st.b	r12[0x7],r9
8000e84a:	17 e9       	ld.ub	r9,r11[0x6]
8000e84c:	b8 e9       	st.b	r12[0x6],r9
8000e84e:	17 d9       	ld.ub	r9,r11[0x5]
8000e850:	b8 d9       	st.b	r12[0x5],r9
8000e852:	17 c9       	ld.ub	r9,r11[0x4]
8000e854:	b8 c9       	st.b	r12[0x4],r9
8000e856:	17 b9       	ld.ub	r9,r11[0x3]
8000e858:	b8 b9       	st.b	r12[0x3],r9
8000e85a:	17 a9       	ld.ub	r9,r11[0x2]
8000e85c:	b8 a9       	st.b	r12[0x2],r9
8000e85e:	17 99       	ld.ub	r9,r11[0x1]
8000e860:	b8 99       	st.b	r12[0x1],r9
8000e862:	17 89       	ld.ub	r9,r11[0x0]
8000e864:	b8 89       	st.b	r12[0x0],r9
8000e866:	5e fc       	retal	r12
8000e868:	eb cd 40 c0 	pushm	r6-r7,lr
8000e86c:	18 99       	mov	r9,r12
8000e86e:	22 0a       	sub	r10,32
8000e870:	b7 07       	ld.d	r6,r11++
8000e872:	b3 26       	st.d	r9++,r6
8000e874:	b7 07       	ld.d	r6,r11++
8000e876:	b3 26       	st.d	r9++,r6
8000e878:	b7 07       	ld.d	r6,r11++
8000e87a:	b3 26       	st.d	r9++,r6
8000e87c:	b7 07       	ld.d	r6,r11++
8000e87e:	b3 26       	st.d	r9++,r6
8000e880:	22 0a       	sub	r10,32
8000e882:	cf 74       	brge	8000e870 <memcpy+0x92>
8000e884:	2f 0a       	sub	r10,-16
8000e886:	c0 65       	brlt	8000e892 <memcpy+0xb4>
8000e888:	b7 07       	ld.d	r6,r11++
8000e88a:	b3 26       	st.d	r9++,r6
8000e88c:	b7 07       	ld.d	r6,r11++
8000e88e:	b3 26       	st.d	r9++,r6
8000e890:	21 0a       	sub	r10,16
8000e892:	5c 3a       	neg	r10
8000e894:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000e898:	d7 03       	nop
8000e89a:	d7 03       	nop
8000e89c:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000e8a0:	f3 66 00 0e 	st.b	r9[14],r6
8000e8a4:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000e8a8:	f3 66 00 0d 	st.b	r9[13],r6
8000e8ac:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000e8b0:	f3 66 00 0c 	st.b	r9[12],r6
8000e8b4:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000e8b8:	f3 66 00 0b 	st.b	r9[11],r6
8000e8bc:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000e8c0:	f3 66 00 0a 	st.b	r9[10],r6
8000e8c4:	f7 36 00 09 	ld.ub	r6,r11[9]
8000e8c8:	f3 66 00 09 	st.b	r9[9],r6
8000e8cc:	f7 36 00 08 	ld.ub	r6,r11[8]
8000e8d0:	f3 66 00 08 	st.b	r9[8],r6
8000e8d4:	f7 36 00 07 	ld.ub	r6,r11[7]
8000e8d8:	f3 66 00 07 	st.b	r9[7],r6
8000e8dc:	f7 36 00 06 	ld.ub	r6,r11[6]
8000e8e0:	f3 66 00 06 	st.b	r9[6],r6
8000e8e4:	f7 36 00 05 	ld.ub	r6,r11[5]
8000e8e8:	f3 66 00 05 	st.b	r9[5],r6
8000e8ec:	f7 36 00 04 	ld.ub	r6,r11[4]
8000e8f0:	f3 66 00 04 	st.b	r9[4],r6
8000e8f4:	f7 36 00 03 	ld.ub	r6,r11[3]
8000e8f8:	f3 66 00 03 	st.b	r9[3],r6
8000e8fc:	f7 36 00 02 	ld.ub	r6,r11[2]
8000e900:	f3 66 00 02 	st.b	r9[2],r6
8000e904:	f7 36 00 01 	ld.ub	r6,r11[1]
8000e908:	f3 66 00 01 	st.b	r9[1],r6
8000e90c:	f7 36 00 00 	ld.ub	r6,r11[0]
8000e910:	f3 66 00 00 	st.b	r9[0],r6
8000e914:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e918:	20 1a       	sub	r10,1
8000e91a:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000e91e:	f8 0a 0b 09 	st.b	r12[r10],r9
8000e922:	cf b1       	brne	8000e918 <memcpy+0x13a>
8000e924:	5e fc       	retal	r12

8000e926 <memset>:
8000e926:	18 98       	mov	r8,r12
8000e928:	c0 38       	rjmp	8000e92e <memset+0x8>
8000e92a:	10 cb       	st.b	r8++,r11
8000e92c:	20 1a       	sub	r10,1
8000e92e:	58 0a       	cp.w	r10,0
8000e930:	cf d1       	brne	8000e92a <memset+0x4>
8000e932:	5e fc       	retal	r12

Disassembly of section .exception:

8000ea00 <_evba>:
8000ea00:	c0 08       	rjmp	8000ea00 <_evba>
	...

8000ea04 <_handle_TLB_Multiple_Hit>:
8000ea04:	c0 08       	rjmp	8000ea04 <_handle_TLB_Multiple_Hit>
	...

8000ea08 <_handle_Bus_Error_Data_Fetch>:
8000ea08:	c0 08       	rjmp	8000ea08 <_handle_Bus_Error_Data_Fetch>
	...

8000ea0c <_handle_Bus_Error_Instruction_Fetch>:
8000ea0c:	c0 08       	rjmp	8000ea0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000ea10 <_handle_NMI>:
8000ea10:	c0 08       	rjmp	8000ea10 <_handle_NMI>
	...

8000ea14 <_handle_Instruction_Address>:
8000ea14:	c0 08       	rjmp	8000ea14 <_handle_Instruction_Address>
	...

8000ea18 <_handle_ITLB_Protection>:
8000ea18:	c0 08       	rjmp	8000ea18 <_handle_ITLB_Protection>
	...

8000ea1c <_handle_Breakpoint>:
8000ea1c:	c0 08       	rjmp	8000ea1c <_handle_Breakpoint>
	...

8000ea20 <_handle_Illegal_Opcode>:
8000ea20:	c0 08       	rjmp	8000ea20 <_handle_Illegal_Opcode>
	...

8000ea24 <_handle_Unimplemented_Instruction>:
8000ea24:	c0 08       	rjmp	8000ea24 <_handle_Unimplemented_Instruction>
	...

8000ea28 <_handle_Privilege_Violation>:
8000ea28:	c0 08       	rjmp	8000ea28 <_handle_Privilege_Violation>
	...

8000ea2c <_handle_Floating_Point>:
8000ea2c:	c0 08       	rjmp	8000ea2c <_handle_Floating_Point>
	...

8000ea30 <_handle_Coprocessor_Absent>:
8000ea30:	c0 08       	rjmp	8000ea30 <_handle_Coprocessor_Absent>
	...

8000ea34 <_handle_Data_Address_Read>:
8000ea34:	c0 08       	rjmp	8000ea34 <_handle_Data_Address_Read>
	...

8000ea38 <_handle_Data_Address_Write>:
8000ea38:	c0 08       	rjmp	8000ea38 <_handle_Data_Address_Write>
	...

8000ea3c <_handle_DTLB_Protection_Read>:
8000ea3c:	c0 08       	rjmp	8000ea3c <_handle_DTLB_Protection_Read>
	...

8000ea40 <_handle_DTLB_Protection_Write>:
8000ea40:	c0 08       	rjmp	8000ea40 <_handle_DTLB_Protection_Write>
	...

8000ea44 <_handle_DTLB_Modified>:
8000ea44:	c0 08       	rjmp	8000ea44 <_handle_DTLB_Modified>
	...

8000ea50 <_handle_ITLB_Miss>:
8000ea50:	c0 08       	rjmp	8000ea50 <_handle_ITLB_Miss>
	...

8000ea60 <_handle_DTLB_Miss_Read>:
8000ea60:	c0 08       	rjmp	8000ea60 <_handle_DTLB_Miss_Read>
	...

8000ea70 <_handle_DTLB_Miss_Write>:
8000ea70:	c0 08       	rjmp	8000ea70 <_handle_DTLB_Miss_Write>
	...

8000eb00 <_handle_Supervisor_Call>:
8000eb00:	c0 08       	rjmp	8000eb00 <_handle_Supervisor_Call>
8000eb02:	d7 03       	nop

8000eb04 <_int0>:
8000eb04:	30 0c       	mov	r12,0
8000eb06:	fe b0 d2 03 	rcall	80008f0c <_get_interrupt_handler>
8000eb0a:	58 0c       	cp.w	r12,0
8000eb0c:	f8 0f 17 10 	movne	pc,r12
8000eb10:	d6 03       	rete

8000eb12 <_int1>:
8000eb12:	30 1c       	mov	r12,1
8000eb14:	fe b0 d1 fc 	rcall	80008f0c <_get_interrupt_handler>
8000eb18:	58 0c       	cp.w	r12,0
8000eb1a:	f8 0f 17 10 	movne	pc,r12
8000eb1e:	d6 03       	rete

8000eb20 <_int2>:
8000eb20:	30 2c       	mov	r12,2
8000eb22:	fe b0 d1 f5 	rcall	80008f0c <_get_interrupt_handler>
8000eb26:	58 0c       	cp.w	r12,0
8000eb28:	f8 0f 17 10 	movne	pc,r12
8000eb2c:	d6 03       	rete

8000eb2e <_int3>:
8000eb2e:	30 3c       	mov	r12,3
8000eb30:	fe b0 d1 ee 	rcall	80008f0c <_get_interrupt_handler>
8000eb34:	58 0c       	cp.w	r12,0
8000eb36:	f8 0f 17 10 	movne	pc,r12
8000eb3a:	d6 03       	rete
8000eb3c:	d7 03       	nop
8000eb3e:	d7 03       	nop
8000eb40:	d7 03       	nop
8000eb42:	d7 03       	nop
8000eb44:	d7 03       	nop
8000eb46:	d7 03       	nop
8000eb48:	d7 03       	nop
8000eb4a:	d7 03       	nop
8000eb4c:	d7 03       	nop
8000eb4e:	d7 03       	nop
8000eb50:	d7 03       	nop
8000eb52:	d7 03       	nop
8000eb54:	d7 03       	nop
8000eb56:	d7 03       	nop
8000eb58:	d7 03       	nop
8000eb5a:	d7 03       	nop
8000eb5c:	d7 03       	nop
8000eb5e:	d7 03       	nop
8000eb60:	d7 03       	nop
8000eb62:	d7 03       	nop
8000eb64:	d7 03       	nop
8000eb66:	d7 03       	nop
8000eb68:	d7 03       	nop
8000eb6a:	d7 03       	nop
8000eb6c:	d7 03       	nop
8000eb6e:	d7 03       	nop
8000eb70:	d7 03       	nop
8000eb72:	d7 03       	nop
8000eb74:	d7 03       	nop
8000eb76:	d7 03       	nop
8000eb78:	d7 03       	nop
8000eb7a:	d7 03       	nop
8000eb7c:	d7 03       	nop
8000eb7e:	d7 03       	nop
8000eb80:	d7 03       	nop
8000eb82:	d7 03       	nop
8000eb84:	d7 03       	nop
8000eb86:	d7 03       	nop
8000eb88:	d7 03       	nop
8000eb8a:	d7 03       	nop
8000eb8c:	d7 03       	nop
8000eb8e:	d7 03       	nop
8000eb90:	d7 03       	nop
8000eb92:	d7 03       	nop
8000eb94:	d7 03       	nop
8000eb96:	d7 03       	nop
8000eb98:	d7 03       	nop
8000eb9a:	d7 03       	nop
8000eb9c:	d7 03       	nop
8000eb9e:	d7 03       	nop
8000eba0:	d7 03       	nop
8000eba2:	d7 03       	nop
8000eba4:	d7 03       	nop
8000eba6:	d7 03       	nop
8000eba8:	d7 03       	nop
8000ebaa:	d7 03       	nop
8000ebac:	d7 03       	nop
8000ebae:	d7 03       	nop
8000ebb0:	d7 03       	nop
8000ebb2:	d7 03       	nop
8000ebb4:	d7 03       	nop
8000ebb6:	d7 03       	nop
8000ebb8:	d7 03       	nop
8000ebba:	d7 03       	nop
8000ebbc:	d7 03       	nop
8000ebbe:	d7 03       	nop
8000ebc0:	d7 03       	nop
8000ebc2:	d7 03       	nop
8000ebc4:	d7 03       	nop
8000ebc6:	d7 03       	nop
8000ebc8:	d7 03       	nop
8000ebca:	d7 03       	nop
8000ebcc:	d7 03       	nop
8000ebce:	d7 03       	nop
8000ebd0:	d7 03       	nop
8000ebd2:	d7 03       	nop
8000ebd4:	d7 03       	nop
8000ebd6:	d7 03       	nop
8000ebd8:	d7 03       	nop
8000ebda:	d7 03       	nop
8000ebdc:	d7 03       	nop
8000ebde:	d7 03       	nop
8000ebe0:	d7 03       	nop
8000ebe2:	d7 03       	nop
8000ebe4:	d7 03       	nop
8000ebe6:	d7 03       	nop
8000ebe8:	d7 03       	nop
8000ebea:	d7 03       	nop
8000ebec:	d7 03       	nop
8000ebee:	d7 03       	nop
8000ebf0:	d7 03       	nop
8000ebf2:	d7 03       	nop
8000ebf4:	d7 03       	nop
8000ebf6:	d7 03       	nop
8000ebf8:	d7 03       	nop
8000ebfa:	d7 03       	nop
8000ebfc:	d7 03       	nop
8000ebfe:	d7 03       	nop
